{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar CustomElementConstructor = require(\"./CustomElementConstructor.js\");\n\nvar ElementDefinitionOptions = require(\"./ElementDefinitionOptions.js\");\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar Node = require(\"./Node.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"CustomElementRegistry\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'CustomElementRegistry'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"CustomElementRegistry\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor CustomElementRegistry is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var CustomElementRegistry = /*#__PURE__*/function () {\n    function CustomElementRegistry() {\n      _classCallCheck(this, CustomElementRegistry);\n\n      throw new TypeError(\"Illegal constructor\");\n    }\n\n    _createClass(CustomElementRegistry, [{\n      key: \"define\",\n      value: function define(name, constructor) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'define' called on an object that is not a valid instance of CustomElementRegistry.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'define' on 'CustomElementRegistry': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'define' on 'CustomElementRegistry': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n          _curArg = CustomElementConstructor.convert(_curArg, {\n            context: \"Failed to execute 'define' on 'CustomElementRegistry': parameter 2\"\n          });\n          args.push(_curArg);\n        }\n        {\n          var _curArg2 = arguments[2];\n          _curArg2 = ElementDefinitionOptions.convert(_curArg2, {\n            context: \"Failed to execute 'define' on 'CustomElementRegistry': parameter 3\"\n          });\n          args.push(_curArg2);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol;\n\n          return (_esValue$implSymbol = esValue[implSymbol]).define.apply(_esValue$implSymbol, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"get\",\n      value: function get(name) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get' called on an object that is not a valid instance of CustomElementRegistry.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'get' on 'CustomElementRegistry': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'get' on 'CustomElementRegistry': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).get.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"whenDefined\",\n      value: function whenDefined(name) {\n        try {\n          var _esValue$implSymbol3;\n\n          var esValue = this !== null && this !== undefined ? this : globalObject;\n\n          if (!exports.is(esValue)) {\n            throw new TypeError(\"'whenDefined' called on an object that is not a valid instance of CustomElementRegistry.\");\n          }\n\n          if (arguments.length < 1) {\n            throw new TypeError(\"Failed to execute 'whenDefined' on 'CustomElementRegistry': 1 argument required, but only \" + arguments.length + \" present.\");\n          }\n\n          var args = [];\n          {\n            var curArg = arguments[0];\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'whenDefined' on 'CustomElementRegistry': parameter 1\"\n            });\n            args.push(curArg);\n          }\n          return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).whenDefined.apply(_esValue$implSymbol3, args));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }\n    }, {\n      key: \"upgrade\",\n      value: function upgrade(root) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'upgrade' called on an object that is not a valid instance of CustomElementRegistry.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'upgrade' on 'CustomElementRegistry': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'upgrade' on 'CustomElementRegistry': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol4;\n\n          return (_esValue$implSymbol4 = esValue[implSymbol]).upgrade.apply(_esValue$implSymbol4, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }]);\n\n    return CustomElementRegistry;\n  }();\n\n  Object.defineProperties(CustomElementRegistry.prototype, _defineProperty({\n    define: {\n      enumerable: true\n    },\n    get: {\n      enumerable: true\n    },\n    whenDefined: {\n      enumerable: true\n    },\n    upgrade: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"CustomElementRegistry\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = CustomElementRegistry;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: CustomElementRegistry\n  });\n};\n\nvar Impl = require(\"../custom-elements/CustomElementRegistry-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
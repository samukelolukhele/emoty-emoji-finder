{"ast":null,"code":"\"use strict\";\n\nvar produceXMLSerialization = require(\"w3c-xmlserializer\");\n\nvar parse5 = require(\"parse5\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar utils = require(\"../generated/utils\");\n\nvar treeAdapter = require(\"./parse5-adapter-serialization\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar NAMESPACES = require(\"../helpers/namespaces\");\n\nfunction htmlSerialization(node) {\n  if (node.nodeType === NODE_TYPE.ELEMENT_NODE && node.namespaceURI === NAMESPACES.HTML_NS && node.tagName === \"TEMPLATE\") {\n    node = node.content;\n  }\n\n  return parse5.serialize(node, {\n    treeAdapter: treeAdapter\n  });\n}\n\nmodule.exports.fragmentSerialization = function (node, _ref) {\n  var requireWellFormed = _ref.requireWellFormed,\n      globalObject = _ref.globalObject;\n  var contextDocument = node.nodeType === NODE_TYPE.DOCUMENT_NODE ? node : node._ownerDocument;\n\n  if (contextDocument._parsingMode === \"html\") {\n    return htmlSerialization(node);\n  }\n\n  var childNodes = node.childNodesForSerializing || node.childNodes;\n\n  try {\n    var serialized = \"\";\n\n    for (var i = 0; i < childNodes.length; ++i) {\n      serialized += produceXMLSerialization(utils.wrapperForImpl(childNodes[i] || childNodes.item(i)), {\n        requireWellFormed: requireWellFormed\n      });\n    }\n\n    return serialized;\n  } catch (e) {\n    throw DOMException.create(globalObject, [e.message, \"InvalidStateError\"]);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
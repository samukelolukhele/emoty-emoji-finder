{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar MIMETypeParameters = require(\"./mime-type-parameters.js\");\n\nvar parse = require(\"./parser.js\");\n\nvar serialize = require(\"./serializer.js\");\n\nvar _require = require(\"./utils.js\"),\n    asciiLowercase = _require.asciiLowercase,\n    solelyContainsHTTPTokenCodePoints = _require.solelyContainsHTTPTokenCodePoints;\n\nmodule.exports = /*#__PURE__*/function () {\n  function MIMEType(string) {\n    _classCallCheck(this, MIMEType);\n\n    string = String(string);\n    var result = parse(string);\n\n    if (result === null) {\n      throw new Error(\"Could not parse MIME type string \\\"\".concat(string, \"\\\"\"));\n    }\n\n    this._type = result.type;\n    this._subtype = result.subtype;\n    this._parameters = new MIMETypeParameters(result.parameters);\n  }\n\n  _createClass(MIMEType, [{\n    key: \"essence\",\n    get: function get() {\n      return \"\".concat(this.type, \"/\").concat(this.subtype);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(value) {\n      value = asciiLowercase(String(value));\n\n      if (value.length === 0) {\n        throw new Error(\"Invalid type: must be a non-empty string\");\n      }\n\n      if (!solelyContainsHTTPTokenCodePoints(value)) {\n        throw new Error(\"Invalid type \".concat(value, \": must contain only HTTP token code points\"));\n      }\n\n      this._type = value;\n    }\n  }, {\n    key: \"subtype\",\n    get: function get() {\n      return this._subtype;\n    },\n    set: function set(value) {\n      value = asciiLowercase(String(value));\n\n      if (value.length === 0) {\n        throw new Error(\"Invalid subtype: must be a non-empty string\");\n      }\n\n      if (!solelyContainsHTTPTokenCodePoints(value)) {\n        throw new Error(\"Invalid subtype \".concat(value, \": must contain only HTTP token code points\"));\n      }\n\n      this._subtype = value;\n    }\n  }, {\n    key: \"parameters\",\n    get: function get() {\n      return this._parameters;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      // The serialize function works on both \"MIME type records\" (i.e. the results of parse) and on this class, since\n      // this class's interface is identical.\n      return serialize(this);\n    }\n  }, {\n    key: \"isJavaScript\",\n    value: function isJavaScript() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$prohibitParamete = _ref.prohibitParameters,\n          prohibitParameters = _ref$prohibitParamete === void 0 ? false : _ref$prohibitParamete;\n\n      switch (this._type) {\n        case \"text\":\n          {\n            switch (this._subtype) {\n              case \"ecmascript\":\n              case \"javascript\":\n              case \"javascript1.0\":\n              case \"javascript1.1\":\n              case \"javascript1.2\":\n              case \"javascript1.3\":\n              case \"javascript1.4\":\n              case \"javascript1.5\":\n              case \"jscript\":\n              case \"livescript\":\n              case \"x-ecmascript\":\n              case \"x-javascript\":\n                {\n                  return !prohibitParameters || this._parameters.size === 0;\n                }\n\n              default:\n                {\n                  return false;\n                }\n            }\n          }\n\n        case \"application\":\n          {\n            switch (this._subtype) {\n              case \"ecmascript\":\n              case \"javascript\":\n              case \"x-ecmascript\":\n              case \"x-javascript\":\n                {\n                  return !prohibitParameters || this._parameters.size === 0;\n                }\n\n              default:\n                {\n                  return false;\n                }\n            }\n          }\n\n        default:\n          {\n            return false;\n          }\n      }\n    }\n  }, {\n    key: \"isXML\",\n    value: function isXML() {\n      return this._subtype === \"xml\" && (this._type === \"text\" || this._type === \"application\") || this._subtype.endsWith(\"+xml\");\n    }\n  }, {\n    key: \"isHTML\",\n    value: function isHTML() {\n      return this._subtype === \"html\" && this._type === \"text\";\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(string) {\n      try {\n        return new this(string);\n      } catch (e) {\n        return null;\n      }\n    }\n  }]);\n\n  return MIMEType;\n}();","map":null,"metadata":{},"sourceType":"script"}
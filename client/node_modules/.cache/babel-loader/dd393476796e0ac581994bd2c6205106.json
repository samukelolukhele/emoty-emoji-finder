{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar validateNames = require(\"../helpers/validate-names\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS,\n    SVG_NS = _require.SVG_NS;\n\nvar _require2 = require(\"../helpers/create-element\"),\n    createElement = _require2.createElement,\n    internalCreateElementNSSteps = _require2.internalCreateElementNSSteps;\n\nvar DocumentType = require(\"../generated/DocumentType\");\n\nvar documents = require(\"../documents.js\");\n\nvar DOMImplementationImpl = /*#__PURE__*/function () {\n  function DOMImplementationImpl(globalObject, args, privateData) {\n    _classCallCheck(this, DOMImplementationImpl);\n\n    this._globalObject = globalObject;\n    this._ownerDocument = privateData.ownerDocument;\n  }\n\n  _createClass(DOMImplementationImpl, [{\n    key: \"hasFeature\",\n    value: function hasFeature() {\n      return true;\n    }\n  }, {\n    key: \"createDocumentType\",\n    value: function createDocumentType(qualifiedName, publicId, systemId) {\n      validateNames.qname(this._globalObject, qualifiedName);\n      return DocumentType.createImpl(this._globalObject, [], {\n        ownerDocument: this._ownerDocument,\n        name: qualifiedName,\n        publicId: publicId,\n        systemId: systemId\n      });\n    } // https://dom.spec.whatwg.org/#dom-domimplementation-createdocument\n\n  }, {\n    key: \"createDocument\",\n    value: function createDocument(namespace, qualifiedName, doctype) {\n      var contentType = \"application/xml\";\n\n      if (namespace === HTML_NS) {\n        contentType = \"application/xhtml+xml\";\n      } else if (namespace === SVG_NS) {\n        contentType = \"image/svg+xml\";\n      }\n\n      var document = documents.createImpl(this._globalObject, {\n        contentType: contentType,\n        parsingMode: \"xml\",\n        encoding: \"UTF-8\"\n      });\n      var element = null;\n\n      if (qualifiedName !== \"\") {\n        element = internalCreateElementNSSteps(document, namespace, qualifiedName, {});\n      }\n\n      if (doctype !== null) {\n        document.appendChild(doctype);\n      }\n\n      if (element !== null) {\n        document.appendChild(element);\n      }\n\n      document._origin = this._ownerDocument._origin;\n      return document;\n    } // https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument\n\n  }, {\n    key: \"createHTMLDocument\",\n    value: function createHTMLDocument(title) {\n      // Let doc be a new document that is an HTML document.\n      // Set doc's content type to \"text/html\".\n      var document = documents.createImpl(this._globalObject, {\n        parsingMode: \"html\",\n        encoding: \"UTF-8\"\n      }); // Create a doctype, with \"html\" as its name and with its node document set\n      // to doc. Append the newly created node to doc.\n\n      var doctype = DocumentType.createImpl(this._globalObject, [], {\n        ownerDocument: document,\n        name: \"html\",\n        publicId: \"\",\n        systemId: \"\"\n      });\n      document.appendChild(doctype); // Create an html element in the HTML namespace, and append it to doc.\n\n      var htmlElement = createElement(document, \"html\", HTML_NS);\n      document.appendChild(htmlElement); // Create a head element in the HTML namespace, and append it to the html\n      // element created in the previous step.\n\n      var headElement = createElement(document, \"head\", HTML_NS);\n      htmlElement.appendChild(headElement); // If the title argument is not omitted:\n\n      if (title !== undefined) {\n        // Create a title element in the HTML namespace, and append it to the head\n        // element created in the previous step.\n        var titleElement = createElement(document, \"title\", HTML_NS);\n        headElement.appendChild(titleElement); // Create a Text node, set its data to title (which could be the empty\n        // string), and append it to the title element created in the previous step.\n\n        titleElement.appendChild(document.createTextNode(title));\n      } // Create a body element in the HTML namespace, and append it to the html\n      // element created in the earlier step.\n\n\n      var bodyElement = createElement(document, \"body\", HTML_NS);\n      htmlElement.appendChild(bodyElement); // doc's origin is an alias to the origin of the context object's associated\n      // document, and doc's effective script origin is an alias to the effective\n      // script origin of the context object's associated document.\n\n      return document;\n    }\n  }]);\n\n  return DOMImplementationImpl;\n}();\n\nmodule.exports = {\n  implementation: DOMImplementationImpl\n};","map":null,"metadata":{},"sourceType":"script"}
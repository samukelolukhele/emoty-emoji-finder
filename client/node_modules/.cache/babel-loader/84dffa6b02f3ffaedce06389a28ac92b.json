{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar urlencoded = require(\"./urlencoded\");\n\nexports.implementation = /*#__PURE__*/function (_Symbol$iterator) {\n  function URLSearchParamsImpl(globalObject, constructorArgs, _ref) {\n    var _ref$doNotStripQMark = _ref.doNotStripQMark,\n        doNotStripQMark = _ref$doNotStripQMark === void 0 ? false : _ref$doNotStripQMark;\n\n    _classCallCheck(this, URLSearchParamsImpl);\n\n    var init = constructorArgs[0];\n    this._list = [];\n    this._url = null;\n\n    if (!doNotStripQMark && typeof init === \"string\" && init[0] === \"?\") {\n      init = init.slice(1);\n    }\n\n    if (Array.isArray(init)) {\n      var _iterator = _createForOfIteratorHelper(init),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var pair = _step.value;\n\n          if (pair.length !== 2) {\n            throw new TypeError(\"Failed to construct 'URLSearchParams': parameter 1 sequence's element does not \" + \"contain exactly two elements.\");\n          }\n\n          this._list.push([pair[0], pair[1]]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    } else if (typeof init === \"object\" && Object.getPrototypeOf(init) === null) {\n      for (var _i = 0, _Object$keys = Object.keys(init); _i < _Object$keys.length; _i++) {\n        var name = _Object$keys[_i];\n        var value = init[name];\n\n        this._list.push([name, value]);\n      }\n    } else {\n      this._list = urlencoded.parseUrlencodedString(init);\n    }\n  }\n\n  _createClass(URLSearchParamsImpl, [{\n    key: \"_updateSteps\",\n    value: function _updateSteps() {\n      if (this._url !== null) {\n        var query = urlencoded.serializeUrlencoded(this._list);\n\n        if (query === \"\") {\n          query = null;\n        }\n\n        this._url._url.query = query;\n      }\n    }\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      this._list.push([name, value]);\n\n      this._updateSteps();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      var i = 0;\n\n      while (i < this._list.length) {\n        if (this._list[i][0] === name) {\n          this._list.splice(i, 1);\n        } else {\n          i++;\n        }\n      }\n\n      this._updateSteps();\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var _iterator2 = _createForOfIteratorHelper(this._list),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tuple = _step2.value;\n\n          if (tuple[0] === name) {\n            return tuple[1];\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      var output = [];\n\n      var _iterator3 = _createForOfIteratorHelper(this._list),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var tuple = _step3.value;\n\n          if (tuple[0] === name) {\n            output.push(tuple[1]);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return output;\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      var _iterator4 = _createForOfIteratorHelper(this._list),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var tuple = _step4.value;\n\n          if (tuple[0] === name) {\n            return true;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return false;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      var found = false;\n      var i = 0;\n\n      while (i < this._list.length) {\n        if (this._list[i][0] === name) {\n          if (found) {\n            this._list.splice(i, 1);\n          } else {\n            found = true;\n            this._list[i][1] = value;\n            i++;\n          }\n        } else {\n          i++;\n        }\n      }\n\n      if (!found) {\n        this._list.push([name, value]);\n      }\n\n      this._updateSteps();\n    }\n  }, {\n    key: \"sort\",\n    value: function sort() {\n      this._list.sort(function (a, b) {\n        if (a[0] < b[0]) {\n          return -1;\n        }\n\n        if (a[0] > b[0]) {\n          return 1;\n        }\n\n        return 0;\n      });\n\n      this._updateSteps();\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this._list[Symbol.iterator]();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return urlencoded.serializeUrlencoded(this._list);\n    }\n  }]);\n\n  return URLSearchParamsImpl;\n}(Symbol.iterator);","map":null,"metadata":{},"sourceType":"script"}
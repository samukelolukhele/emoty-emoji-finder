{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar EventListener = require(\"./EventListener.js\");\n\nvar AddEventListenerOptions = require(\"./AddEventListenerOptions.js\");\n\nvar EventListenerOptions = require(\"./EventListenerOptions.js\");\n\nvar Event = require(\"./Event.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"EventTarget\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'EventTarget'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"EventTarget\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor EventTarget is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\", \"Worker\", \"AudioWorklet\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var EventTarget = /*#__PURE__*/function () {\n    function EventTarget() {\n      _classCallCheck(this, EventTarget);\n\n      return exports.setup(Object.create((this instanceof EventTarget ? this.constructor : void 0).prototype), globalObject, undefined);\n    }\n\n    _createClass(EventTarget, [{\n      key: \"addEventListener\",\n      value: function addEventListener(type, callback) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'addEventListener' called on an object that is not a valid instance of EventTarget.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'addEventListener' on 'EventTarget': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n\n          if (_curArg === null || _curArg === undefined) {\n            _curArg = null;\n          } else {\n            _curArg = EventListener.convert(_curArg, {\n              context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 2\"\n            });\n          }\n\n          args.push(_curArg);\n        }\n        {\n          var _curArg2 = arguments[2];\n\n          if (_curArg2 !== undefined) {\n            if (_curArg2 === null || _curArg2 === undefined) {\n              _curArg2 = AddEventListenerOptions.convert(_curArg2, {\n                context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n              });\n            } else if (utils.isObject(_curArg2)) {\n              _curArg2 = AddEventListenerOptions.convert(_curArg2, {\n                context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\" + \" dictionary\"\n              });\n            } else if (typeof _curArg2 === \"boolean\") {\n              _curArg2 = conversions[\"boolean\"](_curArg2, {\n                context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n              });\n            } else {\n              _curArg2 = conversions[\"boolean\"](_curArg2, {\n                context: \"Failed to execute 'addEventListener' on 'EventTarget': parameter 3\"\n              });\n            }\n          }\n\n          args.push(_curArg2);\n        }\n        return (_esValue$implSymbol = esValue[implSymbol]).addEventListener.apply(_esValue$implSymbol, args);\n      }\n    }, {\n      key: \"removeEventListener\",\n      value: function removeEventListener(type, callback) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'removeEventListener' called on an object that is not a valid instance of EventTarget.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'removeEventListener' on 'EventTarget': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg3 = arguments[1];\n\n          if (_curArg3 === null || _curArg3 === undefined) {\n            _curArg3 = null;\n          } else {\n            _curArg3 = EventListener.convert(_curArg3, {\n              context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 2\"\n            });\n          }\n\n          args.push(_curArg3);\n        }\n        {\n          var _curArg4 = arguments[2];\n\n          if (_curArg4 !== undefined) {\n            if (_curArg4 === null || _curArg4 === undefined) {\n              _curArg4 = EventListenerOptions.convert(_curArg4, {\n                context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n              });\n            } else if (utils.isObject(_curArg4)) {\n              _curArg4 = EventListenerOptions.convert(_curArg4, {\n                context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\" + \" dictionary\"\n              });\n            } else if (typeof _curArg4 === \"boolean\") {\n              _curArg4 = conversions[\"boolean\"](_curArg4, {\n                context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n              });\n            } else {\n              _curArg4 = conversions[\"boolean\"](_curArg4, {\n                context: \"Failed to execute 'removeEventListener' on 'EventTarget': parameter 3\"\n              });\n            }\n          }\n\n          args.push(_curArg4);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).removeEventListener.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"dispatchEvent\",\n      value: function dispatchEvent(event) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'dispatchEvent' called on an object that is not a valid instance of EventTarget.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'dispatchEvent' on 'EventTarget': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Event.convert(curArg, {\n            context: \"Failed to execute 'dispatchEvent' on 'EventTarget': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).dispatchEvent.apply(_esValue$implSymbol3, args);\n      }\n    }]);\n\n    return EventTarget;\n  }();\n\n  Object.defineProperties(EventTarget.prototype, _defineProperty({\n    addEventListener: {\n      enumerable: true\n    },\n    removeEventListener: {\n      enumerable: true\n    },\n    dispatchEvent: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"EventTarget\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = EventTarget;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: EventTarget\n  });\n};\n\nvar Impl = require(\"../events/EventTarget-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar whatwgEncoding = require(\"whatwg-encoding\");\n\nvar MIMEType = require(\"whatwg-mimetype\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\n\nvar ProgressEvent = require(\"../generated/ProgressEvent\");\n\nvar _require = require(\"../helpers/create-event-accessor\"),\n    setupForSimpleEventAccessors = _require.setupForSimpleEventAccessors;\n\nvar _require2 = require(\"../helpers/events\"),\n    fireAnEvent = _require2.fireAnEvent;\n\nvar _require3 = require(\"../helpers/binary-data\"),\n    copyToArrayBufferInNewRealm = _require3.copyToArrayBufferInNewRealm;\n\nvar READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nvar events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nvar FileReaderImpl = /*#__PURE__*/function (_EventTargetImpl) {\n  _inherits(FileReaderImpl, _EventTargetImpl);\n\n  var _super = _createSuper(FileReaderImpl);\n\n  function FileReaderImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, FileReaderImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this.error = null;\n    _this.readyState = READY_STATES.EMPTY;\n    _this.result = null;\n    _this._globalObject = globalObject;\n    _this._ownerDocument = globalObject.document;\n    _this._terminated = false;\n    return _this;\n  }\n\n  _createClass(FileReaderImpl, [{\n    key: \"readAsArrayBuffer\",\n    value: function readAsArrayBuffer(file) {\n      this._readFile(file, \"buffer\");\n    }\n  }, {\n    key: \"readAsBinaryString\",\n    value: function readAsBinaryString(file) {\n      this._readFile(file, \"binaryString\");\n    }\n  }, {\n    key: \"readAsDataURL\",\n    value: function readAsDataURL(file) {\n      this._readFile(file, \"dataURL\");\n    }\n  }, {\n    key: \"readAsText\",\n    value: function readAsText(file, encoding) {\n      this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n        this.result = null;\n        return;\n      }\n\n      if (this.readyState === READY_STATES.LOADING) {\n        this.readyState = READY_STATES.DONE;\n        this.result = null;\n      }\n\n      this._terminated = true;\n\n      this._fireProgressEvent(\"abort\");\n\n      this._fireProgressEvent(\"loadend\");\n    }\n  }, {\n    key: \"_fireProgressEvent\",\n    value: function _fireProgressEvent(name, props) {\n      fireAnEvent(name, this, ProgressEvent, props);\n    }\n  }, {\n    key: \"_readFile\",\n    value: function _readFile(file, format, encoding) {\n      var _this2 = this;\n\n      if (this.readyState === READY_STATES.LOADING) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      this.readyState = READY_STATES.LOADING;\n      setImmediate(function () {\n        if (_this2._terminated) {\n          _this2._terminated = false;\n          return;\n        }\n\n        _this2._fireProgressEvent(\"loadstart\");\n\n        var data = file._buffer;\n\n        if (!data) {\n          data = Buffer.alloc(0);\n        }\n\n        _this2._fireProgressEvent(\"progress\", {\n          lengthComputable: !isNaN(file.size),\n          total: file.size,\n          loaded: data.length\n        });\n\n        setImmediate(function () {\n          if (_this2._terminated) {\n            _this2._terminated = false;\n            return;\n          }\n\n          switch (format) {\n            case \"binaryString\":\n              {\n                _this2.result = data.toString(\"binary\");\n                break;\n              }\n\n            case \"dataURL\":\n              {\n                // Spec seems very unclear here; see https://github.com/w3c/FileAPI/issues/104.\n                var contentType = MIMEType.parse(file.type) || \"application/octet-stream\";\n                _this2.result = \"data:\".concat(contentType, \";base64,\").concat(data.toString(\"base64\"));\n                break;\n              }\n\n            case \"text\":\n              {\n                _this2.result = whatwgEncoding.decode(data, encoding);\n                break;\n              }\n\n            case \"buffer\":\n            default:\n              {\n                _this2.result = copyToArrayBufferInNewRealm(data, _this2._globalObject);\n                break;\n              }\n          }\n\n          _this2.readyState = READY_STATES.DONE;\n\n          _this2._fireProgressEvent(\"load\");\n\n          _this2._fireProgressEvent(\"loadend\");\n        });\n      });\n    }\n  }]);\n\n  return FileReaderImpl;\n}(EventTargetImpl);\n\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":null,"metadata":{},"sourceType":"script"}
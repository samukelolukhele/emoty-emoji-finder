{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar DocumentType = require(\"./DocumentType.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"DOMImplementation\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'DOMImplementation'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"DOMImplementation\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor DOMImplementation is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var DOMImplementation = /*#__PURE__*/function () {\n    function DOMImplementation() {\n      _classCallCheck(this, DOMImplementation);\n\n      throw new TypeError(\"Illegal constructor\");\n    }\n\n    _createClass(DOMImplementation, [{\n      key: \"createDocumentType\",\n      value: function createDocumentType(qualifiedName, publicId, systemId) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createDocumentType' called on an object that is not a valid instance of DOMImplementation.\");\n        }\n\n        if (arguments.length < 3) {\n          throw new TypeError(\"Failed to execute 'createDocumentType' on 'DOMImplementation': 3 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n          _curArg = conversions[\"DOMString\"](_curArg, {\n            context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 2\"\n          });\n          args.push(_curArg);\n        }\n        {\n          var _curArg2 = arguments[2];\n          _curArg2 = conversions[\"DOMString\"](_curArg2, {\n            context: \"Failed to execute 'createDocumentType' on 'DOMImplementation': parameter 3\"\n          });\n          args.push(_curArg2);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).createDocumentType.apply(_esValue$implSymbol, args));\n      }\n    }, {\n      key: \"createDocument\",\n      value: function createDocument(namespace, qualifiedName) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createDocument' called on an object that is not a valid instance of DOMImplementation.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'createDocument' on 'DOMImplementation': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 1\"\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg3 = arguments[1];\n          _curArg3 = conversions[\"DOMString\"](_curArg3, {\n            context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 2\",\n            treatNullAsEmptyString: true\n          });\n          args.push(_curArg3);\n        }\n        {\n          var _curArg4 = arguments[2];\n\n          if (_curArg4 !== undefined) {\n            if (_curArg4 === null || _curArg4 === undefined) {\n              _curArg4 = null;\n            } else {\n              _curArg4 = DocumentType.convert(_curArg4, {\n                context: \"Failed to execute 'createDocument' on 'DOMImplementation': parameter 3\"\n              });\n            }\n          } else {\n            _curArg4 = null;\n          }\n\n          args.push(_curArg4);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).createDocument.apply(_esValue$implSymbol2, args));\n      }\n    }, {\n      key: \"createHTMLDocument\",\n      value: function createHTMLDocument() {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createHTMLDocument' called on an object that is not a valid instance of DOMImplementation.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'createHTMLDocument' on 'DOMImplementation': parameter 1\"\n            });\n          }\n\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).createHTMLDocument.apply(_esValue$implSymbol3, args));\n      }\n    }, {\n      key: \"hasFeature\",\n      value: function hasFeature() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'hasFeature' called on an object that is not a valid instance of DOMImplementation.\");\n        }\n\n        return esValue[implSymbol].hasFeature();\n      }\n    }]);\n\n    return DOMImplementation;\n  }();\n\n  Object.defineProperties(DOMImplementation.prototype, _defineProperty({\n    createDocumentType: {\n      enumerable: true\n    },\n    createDocument: {\n      enumerable: true\n    },\n    createHTMLDocument: {\n      enumerable: true\n    },\n    hasFeature: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"DOMImplementation\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = DOMImplementation;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: DOMImplementation\n  });\n};\n\nvar Impl = require(\"../nodes/DOMImplementation-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    cloningSteps = _require2.cloningSteps;\n\nvar _require3 = require(\"../helpers/form-controls\"),\n    isDisabled = _require3.isDisabled,\n    getLabelsForLabelable = _require3.getLabelsForLabelable,\n    formOwner = _require3.formOwner;\n\nvar _require4 = require(\"../helpers/text\"),\n    childTextContent = _require4.childTextContent;\n\nvar _require5 = require(\"../helpers/events\"),\n    fireAnEvent = _require5.fireAnEvent;\n\nvar HTMLTextAreaElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLTextAreaElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLTextAreaElementImpl);\n\n  function HTMLTextAreaElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLTextAreaElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this._selectionStart = _this._selectionEnd = 0;\n    _this._selectionDirection = \"none\";\n    _this._rawValue = \"\";\n    _this._dirtyValue = false;\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  }\n\n  _createClass(HTMLTextAreaElementImpl, [{\n    key: \"_formReset\",\n    value: function _formReset() {\n      this._rawValue = childTextContent(this);\n      this._dirtyValue = false;\n    }\n  }, {\n    key: \"_getAPIValue\",\n    value: function _getAPIValue() {\n      return this._rawValue.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#textarea-wrapping-transformation\n\n  }, {\n    key: \"_getValue\",\n    value: function _getValue() {\n      var apiValue = this._getAPIValue();\n\n      var wrap = this.getAttributeNS(null, \"wrap\");\n      return wrap === \"hard\" ? textareaWrappingTransformation(apiValue, this.cols) : apiValue;\n    }\n  }, {\n    key: \"_childTextContentChangeSteps\",\n    value: function _childTextContentChangeSteps() {\n      _get(_getPrototypeOf(HTMLTextAreaElementImpl.prototype), \"_childTextContentChangeSteps\", this).call(this);\n\n      if (this._dirtyValue === false) {\n        this._rawValue = childTextContent(this);\n      }\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return formOwner(this);\n    }\n  }, {\n    key: \"defaultValue\",\n    get: function get() {\n      return childTextContent(this);\n    },\n    set: function set(val) {\n      this.textContent = val;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._getAPIValue();\n    },\n    set: function set(val) {\n      // https://html.spec.whatwg.org/multipage/form-elements.html#dom-textarea-value\n      var oldAPIValue = this._getAPIValue();\n\n      this._rawValue = val;\n      this._dirtyValue = true;\n\n      if (oldAPIValue !== this._getAPIValue()) {\n        this._selectionStart = this._selectionEnd = this._getValueLength();\n        this._selectionDirection = \"none\";\n      }\n    }\n  }, {\n    key: \"textLength\",\n    get: function get() {\n      return this.value.length; // code unit length (16 bit)\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return \"textarea\";\n    }\n  }, {\n    key: \"_dispatchSelectEvent\",\n    value: function _dispatchSelectEvent() {\n      fireAnEvent(\"select\", this, undefined, {\n        bubbles: true,\n        cancelable: true\n      });\n    }\n  }, {\n    key: \"_getValueLength\",\n    value: function _getValueLength() {\n      return typeof this.value === \"string\" ? this.value.length : 0;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      this._selectionStart = 0;\n      this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"selectionStart\",\n    get: function get() {\n      return this._selectionStart;\n    },\n    set: function set(start) {\n      this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n    }\n  }, {\n    key: \"selectionEnd\",\n    get: function get() {\n      return this._selectionEnd;\n    },\n    set: function set(end) {\n      this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n    }\n  }, {\n    key: \"selectionDirection\",\n    get: function get() {\n      return this._selectionDirection;\n    },\n    set: function set(dir) {\n      this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n    }\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(start, end, dir) {\n      this._selectionEnd = Math.min(end, this._getValueLength());\n      this._selectionStart = Math.min(start, this._selectionEnd);\n      this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"setRangeText\",\n    value: function setRangeText(repl, start, end) {\n      var selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"preserve\";\n\n      if (arguments.length < 2) {\n        start = this._selectionStart;\n        end = this._selectionEnd;\n      } else if (start > end) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      start = Math.min(start, this._getValueLength());\n      end = Math.min(end, this._getValueLength());\n      var val = this.value;\n      var selStart = this._selectionStart;\n      var selEnd = this._selectionEnd;\n      this.value = val.slice(0, start) + repl + val.slice(end);\n      var newEnd = start + this.value.length;\n\n      if (selectionMode === \"select\") {\n        this.setSelectionRange(start, newEnd);\n      } else if (selectionMode === \"start\") {\n        this.setSelectionRange(start, start);\n      } else if (selectionMode === \"end\") {\n        this.setSelectionRange(newEnd, newEnd);\n      } else {\n        // preserve\n        var delta = repl.length - (end - start);\n\n        if (selStart > end) {\n          selStart += delta;\n        } else if (selStart > start) {\n          selStart = start;\n        }\n\n        if (selEnd > end) {\n          selEnd += delta;\n        } else if (selEnd > start) {\n          selEnd = newEnd;\n        }\n\n        this.setSelectionRange(selStart, selEnd);\n      }\n    }\n  }, {\n    key: \"cols\",\n    get: function get() {\n      if (!this.hasAttributeNS(null, \"cols\")) {\n        return 20;\n      }\n\n      return parseInt(this.getAttributeNS(null, \"cols\"));\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      this.setAttributeNS(null, \"cols\", String(value));\n    }\n  }, {\n    key: \"rows\",\n    get: function get() {\n      if (!this.hasAttributeNS(null, \"rows\")) {\n        return 2;\n      }\n\n      return parseInt(this.getAttributeNS(null, \"rows\"));\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      this.setAttributeNS(null, \"rows\", String(value));\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      return this.hasAttributeNS(null, \"readonly\");\n    }\n  }, {\n    key: \"_mutable\",\n    get: function get() {\n      return !isDisabled(this) && !this.hasAttributeNS(null, \"readonly\");\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#attr-textarea-required\n\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._validity) {\n        var state = {\n          valueMissing: function valueMissing() {\n            return _this2.hasAttributeNS(null, \"required\") && _this2._mutable && _this2.value === \"\";\n          }\n        };\n        this._validity = ValidityState.createImpl(this._globalObject, [], {\n          element: this,\n          state: state\n        });\n      }\n\n      return this._validity;\n    }\n  }, {\n    key: cloningSteps,\n    value: function value(copy, node) {\n      copy._dirtyValue = node._dirtyValue;\n      copy._rawValue = node._rawValue;\n    }\n  }]);\n\n  return HTMLTextAreaElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLTextAreaElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLTextAreaElementImpl\n};\n\nfunction textareaWrappingTransformation(text, cols) {\n  var lineStart = 0;\n  var lineEnd = text.indexOf(\"\\n\");\n\n  if (lineEnd === -1) {\n    lineEnd = text.length;\n  }\n\n  while (lineStart < text.length) {\n    var lineLength = lineEnd - lineStart;\n\n    if (lineLength > cols) {\n      // split the line\n      lineEnd = lineStart + cols;\n      text = text.slice(0, lineEnd) + \"\\n\" + text.slice(lineEnd);\n    } // move to next line\n\n\n    lineStart = lineEnd + 1; // step over the newline\n\n    lineEnd = text.indexOf(\"\\n\", lineStart);\n\n    if (lineEnd === -1) {\n      lineEnd = text.length;\n    }\n  }\n\n  return text;\n}","map":null,"metadata":{},"sourceType":"script"}
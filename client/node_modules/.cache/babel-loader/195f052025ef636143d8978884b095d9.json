{"ast":null,"code":"\"use strict\";\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  function invokeTheCallbackFunction() {\n    if ((this instanceof invokeTheCallbackFunction ? this.constructor : void 0) !== undefined) {\n      throw new Error(\"Internal error: invokeTheCallbackFunction is not a constructor\");\n    }\n\n    var thisArg = utils.tryWrapperForImpl(this);\n    var callResult;\n\n    if (typeof value === \"function\") {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      for (var i = 0; i < Math.min(args.length, 5); i++) {\n        args[i] = utils.tryWrapperForImpl(args[i]);\n      }\n\n      if (args.length < 1) {\n        for (var _i = args.length; _i < 1; _i++) {\n          args[_i] = undefined;\n        }\n      } else if (args.length > 5) {\n        args.length = 5;\n      }\n\n      callResult = Reflect.apply(value, thisArg, args);\n    }\n\n    callResult = conversions[\"any\"](callResult, {\n      context: context\n    });\n    return callResult;\n  }\n\n  invokeTheCallbackFunction.construct = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    for (var i = 0; i < Math.min(args.length, 5); i++) {\n      args[i] = utils.tryWrapperForImpl(args[i]);\n    }\n\n    if (args.length < 1) {\n      for (var _i2 = args.length; _i2 < 1; _i2++) {\n        args[_i2] = undefined;\n      }\n    } else if (args.length > 5) {\n      args.length = 5;\n    }\n\n    var callResult = Reflect.construct(value, args);\n    callResult = conversions[\"any\"](callResult, {\n      context: context\n    });\n    return callResult;\n  };\n\n  invokeTheCallbackFunction[utils.wrapperSymbol] = value;\n  invokeTheCallbackFunction.objectReference = value;\n  return invokeTheCallbackFunction;\n};","map":null,"metadata":{},"sourceType":"script"}
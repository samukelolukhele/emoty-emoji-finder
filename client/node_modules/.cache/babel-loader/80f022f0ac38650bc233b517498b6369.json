{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar _require = require(\"whatwg-url\"),\n    serializeURL = _require.serializeURL;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require2 = require(\"../../utils\"),\n    Canvas = _require2.Canvas;\n\nvar _require3 = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require3.parseURLToResultingURLRecord;\n\nvar HTMLImageElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLImageElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLImageElementImpl);\n\n  function HTMLImageElementImpl() {\n    var _this;\n\n    _classCallCheck(this, HTMLImageElementImpl);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this._currentRequestState = \"unavailable\";\n    return _this;\n  }\n\n  _createClass(HTMLImageElementImpl, [{\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldVal) {\n      // TODO: handle crossorigin\n      if (name === \"src\" || (name === \"srcset\" || name === \"width\" || name === \"sizes\") && value !== oldVal) {\n        this._updateTheImageData();\n      }\n\n      _get(_getPrototypeOf(HTMLImageElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldVal);\n    }\n  }, {\n    key: \"_accept\",\n    get: function get() {\n      return \"image/png,image/*;q=0.8,*/*;q=0.5\";\n    }\n  }, {\n    key: \"height\",\n    get: function get() {\n      // Just like on browsers, if no width / height is defined, we fall back on the\n      // dimensions of the internal image data.\n      return this.hasAttributeNS(null, \"height\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"height\")) : this.naturalHeight;\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"height\", String(V));\n    }\n  }, {\n    key: \"width\",\n    get: function get() {\n      return this.hasAttributeNS(null, \"width\") ? conversions[\"unsigned long\"](this.getAttributeNS(null, \"width\")) : this.naturalWidth;\n    },\n    set: function set(V) {\n      this.setAttributeNS(null, \"width\", String(V));\n    }\n  }, {\n    key: \"naturalHeight\",\n    get: function get() {\n      return this._image ? this._image.naturalHeight : 0;\n    }\n  }, {\n    key: \"naturalWidth\",\n    get: function get() {\n      return this._image ? this._image.naturalWidth : 0;\n    }\n  }, {\n    key: \"complete\",\n    get: function get() {\n      var srcAttributeValue = this.getAttributeNS(null, \"src\");\n      return srcAttributeValue === null || srcAttributeValue === \"\" || this._currentRequestState === \"broken\" || this._currentRequestState === \"completely available\";\n    }\n  }, {\n    key: \"currentSrc\",\n    get: function get() {\n      return this._currentSrc || \"\";\n    } // https://html.spec.whatwg.org/multipage/images.html#updating-the-image-data\n\n  }, {\n    key: \"_updateTheImageData\",\n    value: function _updateTheImageData() {\n      var _this2 = this;\n\n      var document = this._ownerDocument;\n\n      if (!document._defaultView) {\n        return;\n      }\n\n      if (!Canvas) {\n        return;\n      }\n\n      if (!this._image) {\n        this._image = new Canvas.Image();\n      }\n\n      this._currentSrc = null;\n      this._currentRequestState = \"unavailable\";\n      var srcAttributeValue = this.getAttributeNS(null, \"src\");\n      var urlString = null;\n\n      if (srcAttributeValue !== null && srcAttributeValue !== \"\") {\n        var urlRecord = parseURLToResultingURLRecord(srcAttributeValue, this._ownerDocument);\n\n        if (urlRecord === null) {\n          return;\n        }\n\n        urlString = serializeURL(urlRecord);\n      }\n\n      if (urlString !== null) {\n        var resourceLoader = document._resourceLoader;\n        var request;\n\n        var onLoadImage = function onLoadImage(data) {\n          var _request = request,\n              response = _request.response;\n\n          if (response && response.statusCode !== undefined && response.statusCode !== 200) {\n            throw new Error(\"Status code: \" + response.statusCode);\n          }\n\n          var error = null;\n\n          _this2._image.onerror = function (err) {\n            error = err;\n          };\n\n          _this2._image.src = data;\n\n          if (error) {\n            throw new Error(error);\n          }\n\n          _this2._currentSrc = srcAttributeValue;\n          _this2._currentRequestState = \"completely available\";\n        };\n\n        request = resourceLoader.fetch(urlString, {\n          element: this,\n          onLoad: onLoadImage,\n          onError: function onError() {\n            _this2._currentRequestState = \"broken\";\n          }\n        });\n      } else {\n        this._image.src = \"\";\n      }\n    }\n  }]);\n\n  return HTMLImageElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLImageElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
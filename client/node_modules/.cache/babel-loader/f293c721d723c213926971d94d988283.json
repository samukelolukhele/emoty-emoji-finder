{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar Node = require(\"./Node.js\");\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar AbstractRange = require(\"./AbstractRange.js\");\n\nvar interfaceName = \"Range\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'Range'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"Range\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Range is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  AbstractRange._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  var _Object$definePropert;\n\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.AbstractRange === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate Range before AbstractRange\");\n  }\n\n  var Range = /*#__PURE__*/function (_globalObject$Abstrac) {\n    _inherits(Range, _globalObject$Abstrac);\n\n    var _super = _createSuper(Range);\n\n    function Range() {\n      var _this;\n\n      _classCallCheck(this, Range);\n\n      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof Range ? this.constructor : void 0).prototype), globalObject, undefined));\n    }\n\n    _createClass(Range, [{\n      key: \"setStart\",\n      value: function setStart(node, offset) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setStart' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'setStart' on 'Range': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'setStart' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n          _curArg = conversions[\"unsigned long\"](_curArg, {\n            context: \"Failed to execute 'setStart' on 'Range': parameter 2\"\n          });\n          args.push(_curArg);\n        }\n        return (_esValue$implSymbol = esValue[implSymbol]).setStart.apply(_esValue$implSymbol, args);\n      }\n    }, {\n      key: \"setEnd\",\n      value: function setEnd(node, offset) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setEnd' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'setEnd' on 'Range': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'setEnd' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg2 = arguments[1];\n          _curArg2 = conversions[\"unsigned long\"](_curArg2, {\n            context: \"Failed to execute 'setEnd' on 'Range': parameter 2\"\n          });\n          args.push(_curArg2);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).setEnd.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"setStartBefore\",\n      value: function setStartBefore(node) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setStartBefore' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'setStartBefore' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'setStartBefore' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).setStartBefore.apply(_esValue$implSymbol3, args);\n      }\n    }, {\n      key: \"setStartAfter\",\n      value: function setStartAfter(node) {\n        var _esValue$implSymbol4;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setStartAfter' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'setStartAfter' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'setStartAfter' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol4 = esValue[implSymbol]).setStartAfter.apply(_esValue$implSymbol4, args);\n      }\n    }, {\n      key: \"setEndBefore\",\n      value: function setEndBefore(node) {\n        var _esValue$implSymbol5;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setEndBefore' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'setEndBefore' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'setEndBefore' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol5 = esValue[implSymbol]).setEndBefore.apply(_esValue$implSymbol5, args);\n      }\n    }, {\n      key: \"setEndAfter\",\n      value: function setEndAfter(node) {\n        var _esValue$implSymbol6;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setEndAfter' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'setEndAfter' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'setEndAfter' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol6 = esValue[implSymbol]).setEndAfter.apply(_esValue$implSymbol6, args);\n      }\n    }, {\n      key: \"collapse\",\n      value: function collapse() {\n        var _esValue$implSymbol7;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'collapse' called on an object that is not a valid instance of Range.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"boolean\"](curArg, {\n              context: \"Failed to execute 'collapse' on 'Range': parameter 1\"\n            });\n          } else {\n            curArg = false;\n          }\n\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol7 = esValue[implSymbol]).collapse.apply(_esValue$implSymbol7, args);\n      }\n    }, {\n      key: \"selectNode\",\n      value: function selectNode(node) {\n        var _esValue$implSymbol8;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'selectNode' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'selectNode' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'selectNode' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol8 = esValue[implSymbol]).selectNode.apply(_esValue$implSymbol8, args);\n      }\n    }, {\n      key: \"selectNodeContents\",\n      value: function selectNodeContents(node) {\n        var _esValue$implSymbol9;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'selectNodeContents' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'selectNodeContents' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'selectNodeContents' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol9 = esValue[implSymbol]).selectNodeContents.apply(_esValue$implSymbol9, args);\n      }\n    }, {\n      key: \"compareBoundaryPoints\",\n      value: function compareBoundaryPoints(how, sourceRange) {\n        var _esValue$implSymbol10;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'compareBoundaryPoints' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'compareBoundaryPoints' on 'Range': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"unsigned short\"](curArg, {\n            context: \"Failed to execute 'compareBoundaryPoints' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg3 = arguments[1];\n          _curArg3 = exports.convert(_curArg3, {\n            context: \"Failed to execute 'compareBoundaryPoints' on 'Range': parameter 2\"\n          });\n          args.push(_curArg3);\n        }\n        return (_esValue$implSymbol10 = esValue[implSymbol]).compareBoundaryPoints.apply(_esValue$implSymbol10, args);\n      }\n    }, {\n      key: \"deleteContents\",\n      value: function deleteContents() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'deleteContents' called on an object that is not a valid instance of Range.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].deleteContents();\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"extractContents\",\n      value: function extractContents() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'extractContents' called on an object that is not a valid instance of Range.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return utils.tryWrapperForImpl(esValue[implSymbol].extractContents());\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"cloneContents\",\n      value: function cloneContents() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'cloneContents' called on an object that is not a valid instance of Range.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return utils.tryWrapperForImpl(esValue[implSymbol].cloneContents());\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"insertNode\",\n      value: function insertNode(node) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'insertNode' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'insertNode' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'insertNode' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol11;\n\n          return (_esValue$implSymbol11 = esValue[implSymbol]).insertNode.apply(_esValue$implSymbol11, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"surroundContents\",\n      value: function surroundContents(newParent) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'surroundContents' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'surroundContents' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'surroundContents' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol12;\n\n          return (_esValue$implSymbol12 = esValue[implSymbol]).surroundContents.apply(_esValue$implSymbol12, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"cloneRange\",\n      value: function cloneRange() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'cloneRange' called on an object that is not a valid instance of Range.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol].cloneRange());\n      }\n    }, {\n      key: \"detach\",\n      value: function detach() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'detach' called on an object that is not a valid instance of Range.\");\n        }\n\n        return esValue[implSymbol].detach();\n      }\n    }, {\n      key: \"isPointInRange\",\n      value: function isPointInRange(node, offset) {\n        var _esValue$implSymbol13;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'isPointInRange' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'isPointInRange' on 'Range': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'isPointInRange' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg4 = arguments[1];\n          _curArg4 = conversions[\"unsigned long\"](_curArg4, {\n            context: \"Failed to execute 'isPointInRange' on 'Range': parameter 2\"\n          });\n          args.push(_curArg4);\n        }\n        return (_esValue$implSymbol13 = esValue[implSymbol]).isPointInRange.apply(_esValue$implSymbol13, args);\n      }\n    }, {\n      key: \"comparePoint\",\n      value: function comparePoint(node, offset) {\n        var _esValue$implSymbol14;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'comparePoint' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'comparePoint' on 'Range': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'comparePoint' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg5 = arguments[1];\n          _curArg5 = conversions[\"unsigned long\"](_curArg5, {\n            context: \"Failed to execute 'comparePoint' on 'Range': parameter 2\"\n          });\n          args.push(_curArg5);\n        }\n        return (_esValue$implSymbol14 = esValue[implSymbol]).comparePoint.apply(_esValue$implSymbol14, args);\n      }\n    }, {\n      key: \"intersectsNode\",\n      value: function intersectsNode(node) {\n        var _esValue$implSymbol15;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'intersectsNode' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'intersectsNode' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'intersectsNode' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol15 = esValue[implSymbol]).intersectsNode.apply(_esValue$implSymbol15, args);\n      }\n    }, {\n      key: \"toString\",\n      value: function toString() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'toString' called on an object that is not a valid instance of Range.\");\n        }\n\n        return esValue[implSymbol].toString();\n      }\n    }, {\n      key: \"createContextualFragment\",\n      value: function createContextualFragment(fragment) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createContextualFragment' called on an object that is not a valid instance of Range.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createContextualFragment' on 'Range': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createContextualFragment' on 'Range': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol16;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol16 = esValue[implSymbol]).createContextualFragment.apply(_esValue$implSymbol16, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"commonAncestorContainer\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get commonAncestorContainer' called on an object that is not a valid instance of Range.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"commonAncestorContainer\"]);\n      }\n    }]);\n\n    return Range;\n  }(globalObject.AbstractRange);\n\n  Object.defineProperties(Range.prototype, (_Object$definePropert = {\n    setStart: {\n      enumerable: true\n    },\n    setEnd: {\n      enumerable: true\n    },\n    setStartBefore: {\n      enumerable: true\n    },\n    setStartAfter: {\n      enumerable: true\n    },\n    setEndBefore: {\n      enumerable: true\n    },\n    setEndAfter: {\n      enumerable: true\n    },\n    collapse: {\n      enumerable: true\n    },\n    selectNode: {\n      enumerable: true\n    },\n    selectNodeContents: {\n      enumerable: true\n    },\n    compareBoundaryPoints: {\n      enumerable: true\n    },\n    deleteContents: {\n      enumerable: true\n    },\n    extractContents: {\n      enumerable: true\n    },\n    cloneContents: {\n      enumerable: true\n    },\n    insertNode: {\n      enumerable: true\n    },\n    surroundContents: {\n      enumerable: true\n    },\n    cloneRange: {\n      enumerable: true\n    },\n    detach: {\n      enumerable: true\n    },\n    isPointInRange: {\n      enumerable: true\n    },\n    comparePoint: {\n      enumerable: true\n    },\n    intersectsNode: {\n      enumerable: true\n    },\n    toString: {\n      enumerable: true\n    },\n    createContextualFragment: {\n      enumerable: true\n    },\n    commonAncestorContainer: {\n      enumerable: true\n    }\n  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n    value: \"Range\",\n    configurable: true\n  }), _defineProperty(_Object$definePropert, \"START_TO_START\", {\n    value: 0,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"START_TO_END\", {\n    value: 1,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"END_TO_END\", {\n    value: 2,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"END_TO_START\", {\n    value: 3,\n    enumerable: true\n  }), _Object$definePropert));\n  Object.defineProperties(Range, {\n    START_TO_START: {\n      value: 0,\n      enumerable: true\n    },\n    START_TO_END: {\n      value: 1,\n      enumerable: true\n    },\n    END_TO_END: {\n      value: 2,\n      enumerable: true\n    },\n    END_TO_START: {\n      value: 3,\n      enumerable: true\n    }\n  });\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = Range;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Range\n  });\n};\n\nvar Impl = require(\"../range/Range-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
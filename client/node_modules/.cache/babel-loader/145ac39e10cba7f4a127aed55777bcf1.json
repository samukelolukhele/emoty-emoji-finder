{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"./utils.js\"),\n    asciiLowercase = _require.asciiLowercase,\n    solelyContainsHTTPTokenCodePoints = _require.solelyContainsHTTPTokenCodePoints,\n    soleyContainsHTTPQuotedStringTokenCodePoints = _require.soleyContainsHTTPQuotedStringTokenCodePoints;\n\nmodule.exports = /*#__PURE__*/function (_Symbol$iterator) {\n  function MIMETypeParameters(map) {\n    _classCallCheck(this, MIMETypeParameters);\n\n    this._map = map;\n  }\n\n  _createClass(MIMETypeParameters, [{\n    key: \"size\",\n    get: function get() {\n      return this._map.size;\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      name = asciiLowercase(String(name));\n      return this._map.get(name);\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      name = asciiLowercase(String(name));\n      return this._map.has(name);\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      name = asciiLowercase(String(name));\n      value = String(value);\n\n      if (!solelyContainsHTTPTokenCodePoints(name)) {\n        throw new Error(\"Invalid MIME type parameter name \\\"\".concat(name, \"\\\": only HTTP token code points are valid.\"));\n      }\n\n      if (!soleyContainsHTTPQuotedStringTokenCodePoints(value)) {\n        throw new Error(\"Invalid MIME type parameter value \\\"\".concat(value, \"\\\": only HTTP quoted-string token code points are \") + \"valid.\");\n      }\n\n      return this._map.set(name, value);\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._map.clear();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      name = asciiLowercase(String(name));\n      return this._map.delete(name);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(callbackFn, thisArg) {\n      this._map.forEach(callbackFn, thisArg);\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._map.keys();\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      return this._map.values();\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      return this._map.entries();\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      return this._map[Symbol.iterator]();\n    }\n  }]);\n\n  return MIMETypeParameters;\n}(Symbol.iterator);","map":null,"metadata":{},"sourceType":"script"}
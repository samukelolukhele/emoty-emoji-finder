{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar EventHandlerNonNull = require(\"./EventHandlerNonNull.js\");\n\nvar OnBeforeUnloadEventHandlerNonNull = require(\"./OnBeforeUnloadEventHandlerNonNull.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar SVGGraphicsElement = require(\"./SVGGraphicsElement.js\");\n\nvar interfaceName = \"SVGSVGElement\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'SVGSVGElement'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"SVGSVGElement\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor SVGSVGElement is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  SVGGraphicsElement._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.SVGGraphicsElement === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate SVGSVGElement before SVGGraphicsElement\");\n  }\n\n  var SVGSVGElement = /*#__PURE__*/function (_globalObject$SVGGrap) {\n    _inherits(SVGSVGElement, _globalObject$SVGGrap);\n\n    var _super = _createSuper(SVGSVGElement);\n\n    function SVGSVGElement() {\n      var _this;\n\n      _classCallCheck(this, SVGSVGElement);\n\n      throw new TypeError(\"Illegal constructor\");\n      return _possibleConstructorReturn(_this);\n    }\n\n    _createClass(SVGSVGElement, [{\n      key: \"createSVGNumber\",\n      value: function createSVGNumber() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createSVGNumber' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol].createSVGNumber());\n      }\n    }, {\n      key: \"getElementById\",\n      value: function getElementById(elementId) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getElementById' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'getElementById' on 'SVGSVGElement': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getElementById' on 'SVGSVGElement': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getElementById.apply(_esValue$implSymbol, args));\n      }\n    }, {\n      key: \"suspendRedraw\",\n      value: function suspendRedraw(maxWaitMilliseconds) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'suspendRedraw' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'suspendRedraw' on 'SVGSVGElement': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"unsigned long\"](curArg, {\n            context: \"Failed to execute 'suspendRedraw' on 'SVGSVGElement': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).suspendRedraw.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"unsuspendRedraw\",\n      value: function unsuspendRedraw(suspendHandleID) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'unsuspendRedraw' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'unsuspendRedraw' on 'SVGSVGElement': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"unsigned long\"](curArg, {\n            context: \"Failed to execute 'unsuspendRedraw' on 'SVGSVGElement': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).unsuspendRedraw.apply(_esValue$implSymbol3, args);\n      }\n    }, {\n      key: \"unsuspendRedrawAll\",\n      value: function unsuspendRedrawAll() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'unsuspendRedrawAll' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return esValue[implSymbol].unsuspendRedrawAll();\n      }\n    }, {\n      key: \"forceRedraw\",\n      value: function forceRedraw() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'forceRedraw' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return esValue[implSymbol].forceRedraw();\n      }\n    }, {\n      key: \"onafterprint\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onafterprint' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onafterprint\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onafterprint' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onafterprint' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onafterprint\"] = V;\n      }\n    }, {\n      key: \"onbeforeprint\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onbeforeprint' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onbeforeprint\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onbeforeprint' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onbeforeprint' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onbeforeprint\"] = V;\n      }\n    }, {\n      key: \"onbeforeunload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onbeforeunload' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onbeforeunload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onbeforeunload' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = OnBeforeUnloadEventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onbeforeunload' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onbeforeunload\"] = V;\n      }\n    }, {\n      key: \"onhashchange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onhashchange' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onhashchange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onhashchange' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onhashchange' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onhashchange\"] = V;\n      }\n    }, {\n      key: \"onlanguagechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onlanguagechange' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onlanguagechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onlanguagechange' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onlanguagechange' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onlanguagechange\"] = V;\n      }\n    }, {\n      key: \"onmessage\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmessage' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmessage\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmessage' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmessage' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmessage\"] = V;\n      }\n    }, {\n      key: \"onmessageerror\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmessageerror' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmessageerror\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmessageerror' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmessageerror' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmessageerror\"] = V;\n      }\n    }, {\n      key: \"onoffline\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onoffline' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onoffline\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onoffline' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onoffline' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onoffline\"] = V;\n      }\n    }, {\n      key: \"ononline\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ononline' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ononline\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ononline' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ononline' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ononline\"] = V;\n      }\n    }, {\n      key: \"onpagehide\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onpagehide' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpagehide\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onpagehide' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onpagehide' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpagehide\"] = V;\n      }\n    }, {\n      key: \"onpageshow\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onpageshow' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpageshow\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onpageshow' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onpageshow' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpageshow\"] = V;\n      }\n    }, {\n      key: \"onpopstate\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onpopstate' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpopstate\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onpopstate' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onpopstate' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpopstate\"] = V;\n      }\n    }, {\n      key: \"onrejectionhandled\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onrejectionhandled' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onrejectionhandled\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onrejectionhandled' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onrejectionhandled' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onrejectionhandled\"] = V;\n      }\n    }, {\n      key: \"onstorage\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onstorage' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onstorage\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onstorage' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onstorage' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onstorage\"] = V;\n      }\n    }, {\n      key: \"onunhandledrejection\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onunhandledrejection' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onunhandledrejection\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onunhandledrejection' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onunhandledrejection' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onunhandledrejection\"] = V;\n      }\n    }, {\n      key: \"onunload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onunload' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onunload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onunload' called on an object that is not a valid instance of SVGSVGElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onunload' property on 'SVGSVGElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onunload\"] = V;\n      }\n    }]);\n\n    return SVGSVGElement;\n  }(globalObject.SVGGraphicsElement);\n\n  Object.defineProperties(SVGSVGElement.prototype, _defineProperty({\n    createSVGNumber: {\n      enumerable: true\n    },\n    getElementById: {\n      enumerable: true\n    },\n    suspendRedraw: {\n      enumerable: true\n    },\n    unsuspendRedraw: {\n      enumerable: true\n    },\n    unsuspendRedrawAll: {\n      enumerable: true\n    },\n    forceRedraw: {\n      enumerable: true\n    },\n    onafterprint: {\n      enumerable: true\n    },\n    onbeforeprint: {\n      enumerable: true\n    },\n    onbeforeunload: {\n      enumerable: true\n    },\n    onhashchange: {\n      enumerable: true\n    },\n    onlanguagechange: {\n      enumerable: true\n    },\n    onmessage: {\n      enumerable: true\n    },\n    onmessageerror: {\n      enumerable: true\n    },\n    onoffline: {\n      enumerable: true\n    },\n    ononline: {\n      enumerable: true\n    },\n    onpagehide: {\n      enumerable: true\n    },\n    onpageshow: {\n      enumerable: true\n    },\n    onpopstate: {\n      enumerable: true\n    },\n    onrejectionhandled: {\n      enumerable: true\n    },\n    onstorage: {\n      enumerable: true\n    },\n    onunhandledrejection: {\n      enumerable: true\n    },\n    onunload: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"SVGSVGElement\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = SVGSVGElement;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: SVGSVGElement\n  });\n};\n\nvar Impl = require(\"../nodes/SVGSVGElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
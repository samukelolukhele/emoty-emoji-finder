{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar ErrorEvent = require(\"../generated/ErrorEvent\");\n\nvar EventHandlerNonNull = require(\"../generated/EventHandlerNonNull.js\");\n\nvar OnBeforeUnloadEventHandlerNonNull = require(\"../generated/OnBeforeUnloadEventHandlerNonNull.js\");\n\nvar OnErrorEventHandlerNonNull = require(\"../generated/OnErrorEventHandlerNonNull.js\");\n\nvar reportException = require(\"./runtime-script-errors\");\n\nexports.appendHandler = function (el, eventName) {\n  // tryImplForWrapper() is currently required due to use in Window.js\n  idlUtils.tryImplForWrapper(el).addEventListener(eventName, function (event) {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    var callback = exports.getCurrentEventHandlerValue(el, eventName);\n\n    if (callback === null) {\n      return;\n    }\n\n    var specialError = ErrorEvent.isImpl(event) && event.type === \"error\" && event.currentTarget.constructor.name === \"Window\";\n    var returnValue = null; // https://heycam.github.io/webidl/#es-invoking-callback-functions\n\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(event.currentTarget, event.message, event.filename, event.lineno, event.colno, event.error);\n      } else {\n        returnValue = callback.call(event.currentTarget, event);\n      }\n    } // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n\n\n    if (event.type === \"beforeunload\") {\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n}; // \"Simple\" in this case means \"no content attributes involved\"\n\n\nexports.setupForSimpleEventAccessors = function (prototype, events) {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n\n      exports.appendHandler(this, event);\n    }\n\n    this._eventHandlers[event] = handler;\n  };\n\n  var _iterator = _createForOfIteratorHelper(events),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var event = _step.value;\n      exports.createEventAccessor(prototype, event);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}; // https://html.spec.whatwg.org/multipage/webappapis.html#getting-the-current-value-of-the-event-handler\n\n\nexports.getCurrentEventHandlerValue = function (target, event) {\n  var value = target._getEventHandlerFor(event);\n\n  if (!value) {\n    return null;\n  }\n\n  if (value.body !== undefined) {\n    var element, document, fn;\n\n    if (target.constructor.name === \"Window\") {\n      element = null;\n      document = idlUtils.implForWrapper(target.document);\n    } else {\n      element = target;\n      document = element.ownerDocument;\n    }\n\n    var body = value.body;\n    var formOwner = element !== null && element.form ? element.form : null;\n    var window = target.constructor.name === \"Window\" && target._document ? target : document.defaultView;\n\n    try {\n      // eslint-disable-next-line no-new-func\n      Function(body); // properly error out on syntax errors\n      // Note: this won't execute body; that would require `Function(body)()`.\n    } catch (e) {\n      if (window) {\n        reportException(window, e);\n      }\n\n      target._setEventHandlerFor(event, null);\n\n      return null;\n    } // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n\n    var createFunction = document.defaultView.Function;\n\n    if (event === \"error\" && element === null) {\n      var sourceURL = document ? \"\\n//# sourceURL=\".concat(document.URL) : \"\";\n      fn = createFunction(\"with (arguments[0]) { return function onerror(event, source, lineno, colno, error) {\\n\".concat(body, \"\\n}; }\").concat(sourceURL))(window);\n      fn = OnErrorEventHandlerNonNull.convert(fn);\n    } else {\n      var calls = [];\n\n      if (element !== null) {\n        calls.push(idlUtils.wrapperForImpl(document));\n      }\n\n      if (formOwner !== null) {\n        calls.push(idlUtils.wrapperForImpl(formOwner));\n      }\n\n      if (element !== null) {\n        calls.push(idlUtils.wrapperForImpl(element));\n      }\n\n      var wrapperBody = \"with (arguments[0]) { return function on\".concat(event, \"(event) {\\n\").concat(body, \"\\n}; }\"); // eslint-disable-next-line no-unused-vars\n\n      for (var _i = 0, _calls = calls; _i < _calls.length; _i++) {\n        var call = _calls[_i];\n        wrapperBody = \"with (arguments[0]) { return function () {\\n\".concat(wrapperBody, \"\\n}; }\");\n      }\n\n      if (document) {\n        wrapperBody += \"\\n//# sourceURL=\".concat(document.URL);\n      }\n\n      fn = createFunction(wrapperBody)(window);\n\n      for (var _i2 = 0, _calls2 = calls; _i2 < _calls2.length; _i2++) {\n        var _call = _calls2[_i2];\n        fn = fn(_call);\n      }\n\n      if (event === \"beforeunload\") {\n        fn = OnBeforeUnloadEventHandlerNonNull.convert(fn);\n      } else {\n        fn = EventHandlerNonNull.convert(fn);\n      }\n    }\n\n    target._setEventHandlerFor(event, fn);\n  }\n\n  return target._getEventHandlerFor(event);\n}; // https://html.spec.whatwg.org/multipage/webappapis.html#event-handler-idl-attributes\n// TODO: Consider replacing this with `[ReflectEvent]`\n\n\nexports.createEventAccessor = function (obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get: function get() {\n      return exports.getCurrentEventHandlerValue(this, event);\n    },\n    set: function set(val) {\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}
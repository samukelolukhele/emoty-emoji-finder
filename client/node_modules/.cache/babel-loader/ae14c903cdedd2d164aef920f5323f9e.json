{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _require = require(\"./internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"./namespaces\"),\n    HTML_NS = _require2.HTML_NS; // All these operate on and return impls, not wrappers!\n\n\nexports.closest = function (e, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === namespace) {\n      return e;\n    }\n\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.childrenByLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace;\n    }\n  });\n};\n\nexports.descendantsByLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return node._localName === localName && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\n\nexports.childrenByLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.childrenToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace;\n    }\n  });\n};\n\nexports.descendantsByLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  return domSymbolTree.treeToArray(parent, {\n    filter: function filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === namespace && node !== parent;\n    }\n  });\n};\n\nexports.firstChildWithLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.childrenIterator(parent);\n\n  var _iterator = _createForOfIteratorHelper(iterator),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n\n      if (child._localName === localName && child._namespaceURI === namespace) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n};\n\nexports.firstChildWithLocalNames = function (parent, localNamesSet) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.childrenIterator(parent);\n\n  var _iterator2 = _createForOfIteratorHelper(iterator),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var child = _step2.value;\n\n      if (localNamesSet.has(child._localName) && child._namespaceURI === namespace) {\n        return child;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return null;\n};\n\nexports.firstDescendantWithLocalName = function (parent, localName) {\n  var namespace = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : HTML_NS;\n  var iterator = domSymbolTree.treeIterator(parent);\n\n  var _iterator3 = _createForOfIteratorHelper(iterator),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var descendant = _step3.value;\n\n      if (descendant._localName === localName && descendant._namespaceURI === namespace) {\n        return descendant;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar _require = require(\"../helpers/strings\"),\n    parseFloatingPointNumber = _require.parseFloatingPointNumber;\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require2.getLabelsForLabelable;\n\nvar HTMLMeterElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLMeterElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLMeterElementImpl);\n\n  function HTMLMeterElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLMeterElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this._labels = null;\n    return _this;\n  } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-minimum\n\n\n  _createClass(HTMLMeterElementImpl, [{\n    key: \"_minimumValue\",\n    get: function get() {\n      var min = this.getAttributeNS(null, \"min\");\n\n      if (min !== null) {\n        var parsed = parseFloatingPointNumber(min);\n\n        if (parsed !== null) {\n          return parsed;\n        }\n      }\n\n      return 0;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-maximum\n\n  }, {\n    key: \"_maximumValue\",\n    get: function get() {\n      var candidate = 1.0;\n      var max = this.getAttributeNS(null, \"max\");\n\n      if (max !== null) {\n        var parsed = parseFloatingPointNumber(max);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      var minimumValue = this._minimumValue;\n      return candidate >= minimumValue ? candidate : minimumValue;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-actual\n\n  }, {\n    key: \"_actualValue\",\n    get: function get() {\n      var candidate = 0;\n      var value = this.getAttributeNS(null, \"value\");\n\n      if (value !== null) {\n        var parsed = parseFloatingPointNumber(value);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      var minimumValue = this._minimumValue;\n\n      if (candidate < minimumValue) {\n        return minimumValue;\n      }\n\n      var maximumValue = this._maximumValue;\n      return candidate > maximumValue ? maximumValue : candidate;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-low\n\n  }, {\n    key: \"_lowBoundary\",\n    get: function get() {\n      var minimumValue = this._minimumValue;\n      var candidate = minimumValue;\n      var low = this.getAttributeNS(null, \"low\");\n\n      if (low !== null) {\n        var parsed = parseFloatingPointNumber(low);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      if (candidate < minimumValue) {\n        return minimumValue;\n      }\n\n      var maximumValue = this._maximumValue;\n      return candidate > maximumValue ? maximumValue : candidate;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-high\n\n  }, {\n    key: \"_highBoundary\",\n    get: function get() {\n      var maximumValue = this._maximumValue;\n      var candidate = maximumValue;\n      var high = this.getAttributeNS(null, \"high\");\n\n      if (high !== null) {\n        var parsed = parseFloatingPointNumber(high);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      var lowBoundary = this._lowBoundary;\n\n      if (candidate < lowBoundary) {\n        return lowBoundary;\n      }\n\n      return candidate > maximumValue ? maximumValue : candidate;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-meter-optimum\n\n  }, {\n    key: \"_optimumPoint\",\n    get: function get() {\n      var minimumValue = this._minimumValue;\n      var maximumValue = this._maximumValue;\n      var candidate = (minimumValue + maximumValue) / 2;\n      var optimum = this.getAttributeNS(null, \"optimum\");\n\n      if (optimum !== null) {\n        var parsed = parseFloatingPointNumber(optimum);\n\n        if (parsed !== null) {\n          candidate = parsed;\n        }\n      }\n\n      if (candidate < minimumValue) {\n        return minimumValue;\n      }\n\n      return candidate > maximumValue ? maximumValue : candidate;\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._actualValue;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"value\", String(val));\n    }\n  }, {\n    key: \"min\",\n    get: function get() {\n      return this._minimumValue;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"min\", String(val));\n    }\n  }, {\n    key: \"max\",\n    get: function get() {\n      return this._maximumValue;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"max\", String(val));\n    }\n  }, {\n    key: \"low\",\n    get: function get() {\n      return this._lowBoundary;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"low\", String(val));\n    }\n  }, {\n    key: \"high\",\n    get: function get() {\n      return this._highBoundary;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"high\", String(val));\n    }\n  }, {\n    key: \"optimum\",\n    get: function get() {\n      return this._optimumPoint;\n    },\n    set: function set(val) {\n      this.setAttributeNS(null, \"optimum\", String(val));\n    }\n  }]);\n\n  return HTMLMeterElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLMeterElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require = require(\"../helpers/strings\"),\n    stripAndCollapseASCIIWhitespace = _require.stripAndCollapseASCIIWhitespace;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/namespaces\"),\n    HTML_NS = _require3.HTML_NS,\n    SVG_NS = _require3.SVG_NS;\n\nvar _require4 = require(\"../helpers/traversal\"),\n    closest = _require4.closest;\n\nvar _require5 = require(\"../helpers/form-controls\"),\n    formOwner = _require5.formOwner;\n\nvar HTMLOptionElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLOptionElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLOptionElementImpl);\n\n  function HTMLOptionElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLOptionElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData); // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n\n    _this._selectedness = false;\n    _this._dirtyness = false;\n    return _this;\n  }\n\n  _createClass(HTMLOptionElementImpl, [{\n    key: \"_removeOtherSelectedness\",\n    value: function _removeOtherSelectedness() {\n      // Remove the selectedness flag from all other options in this select\n      var select = this._selectNode;\n\n      if (select && !select.hasAttributeNS(null, \"multiple\")) {\n        var _iterator = _createForOfIteratorHelper(select.options),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var option = _step.value;\n\n            if (option !== this) {\n              option._selectedness = false;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n  }, {\n    key: \"_askForAReset\",\n    value: function _askForAReset() {\n      var select = this._selectNode;\n\n      if (select) {\n        select._askedForAReset();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (!this._dirtyness && name === \"selected\") {\n        this._selectedness = this.hasAttributeNS(null, \"selected\");\n\n        if (this._selectedness) {\n          this._removeOtherSelectedness();\n        }\n\n        this._askForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLOptionElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n    }\n  }, {\n    key: \"_selectNode\",\n    get: function get() {\n      var select = domSymbolTree.parent(this);\n\n      if (!select) {\n        return null;\n      }\n\n      if (select.nodeName.toUpperCase() !== \"SELECT\") {\n        select = domSymbolTree.parent(select);\n\n        if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n          return null;\n        }\n      }\n\n      return select;\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return formOwner(this);\n    }\n  }, {\n    key: \"text\",\n    get: function get() {\n      return stripAndCollapseASCIIWhitespace(childTextContentExcludingDescendantsOfScript(this));\n    },\n    set: function set(value) {\n      this.textContent = value;\n    } // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-value\n\n  }, {\n    key: \"_getValue\",\n    value: function _getValue() {\n      if (this.hasAttributeNS(null, \"value\")) {\n        return this.getAttributeNS(null, \"value\");\n      }\n\n      return this.text;\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      return this._getValue();\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"value\", value);\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      var select = closest(this, \"select\");\n\n      if (select === null) {\n        return 0;\n      }\n\n      return select.options.indexOf(this);\n    }\n  }, {\n    key: \"selected\",\n    get: function get() {\n      return this._selectedness;\n    },\n    set: function set(s) {\n      this._dirtyness = true;\n      this._selectedness = Boolean(s);\n\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n\n      this._askForAReset();\n\n      this._modified();\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      if (this.hasAttributeNS(null, \"label\")) {\n        return this.getAttributeNS(null, \"label\");\n      }\n\n      return this.text;\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"label\", value);\n    }\n  }]);\n\n  return HTMLOptionElementImpl;\n}(HTMLElementImpl);\n\nfunction childTextContentExcludingDescendantsOfScript(root) {\n  var text = \"\";\n\n  var _iterator2 = _createForOfIteratorHelper(domSymbolTree.childrenIterator(root)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var child = _step2.value;\n\n      if (child._localName === \"script\" && (child._namespaceURI === HTML_NS || child._namespaceURI === SVG_NS)) {\n        continue;\n      }\n\n      if (child.nodeType === NODE_TYPE.TEXT_NODE || child.nodeType === NODE_TYPE.CDATA_SECTION_NODE) {\n        text += child.nodeValue;\n      } else {\n        text += childTextContentExcludingDescendantsOfScript(child);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return text;\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
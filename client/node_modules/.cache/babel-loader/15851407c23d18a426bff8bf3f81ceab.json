{"ast":null,"code":"\"use strict\";\n/* eslint-disable no-new-func */\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _objectSpread = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _slicedToArray = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar acorn = require(\"acorn\");\n\nvar findGlobals = require(\"acorn-globals\");\n\nvar escodegen = require(\"escodegen\");\n\nvar jsGlobals = require(\"./browser/js-globals.json\"); // We can't use the default browserify vm shim because it doesn't work in a web worker.\n// \"eval\" is skipped because it's set to a function that calls `runInContext`:\n\n\nvar jsGlobalEntriesToInstall = Object.entries(jsGlobals).filter(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 1),\n      name = _ref2[0];\n\n  return name !== \"eval\" && name in global;\n});\n\nexports.createContext = function (sandbox) {\n  // TODO: This should probably use a symbol\n  Object.defineProperty(sandbox, \"__isVMShimContext\", {\n    value: true,\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n\n  var _iterator = _createForOfIteratorHelper(jsGlobalEntriesToInstall),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          globalName = _step$value[0],\n          globalPropDesc = _step$value[1];\n\n      var propDesc = _objectSpread(_objectSpread({}, globalPropDesc), {}, {\n        value: global[globalName]\n      });\n\n      Object.defineProperty(sandbox, globalName, propDesc);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  Object.defineProperty(sandbox, \"eval\", {\n    value: function value(code) {\n      return exports.runInContext(code, sandbox);\n    },\n    writable: true,\n    configurable: true,\n    enumerable: false\n  });\n};\n\nexports.isContext = function (sandbox) {\n  return sandbox.__isVMShimContext;\n};\n\nexports.runInContext = function (code, contextifiedSandbox, options) {\n  if (code === \"this\") {\n    // Special case for during window creation.\n    return contextifiedSandbox;\n  }\n\n  if (options === undefined) {\n    options = {};\n  }\n\n  var comments = [];\n  var tokens = [];\n  var ast = acorn.parse(code, {\n    allowReturnOutsideFunction: true,\n    ranges: true,\n    // collect comments in Esprima's format\n    onComment: comments,\n    // collect token ranges\n    onToken: tokens\n  }); // make sure we keep comments\n\n  escodegen.attachComments(ast, comments, tokens);\n  var globals = findGlobals(ast);\n\n  for (var i = 0; i < globals.length; ++i) {\n    if (globals[i].name === \"window\" || globals[i].name === \"this\") {\n      continue;\n    }\n\n    var nodes = globals[i].nodes;\n\n    for (var j = 0; j < nodes.length; ++j) {\n      var _nodes$j = nodes[j],\n          type = _nodes$j.type,\n          name = _nodes$j.name;\n      nodes[j].type = \"MemberExpression\";\n      nodes[j].property = {\n        name: name,\n        type: type\n      };\n      nodes[j].computed = false;\n      nodes[j].object = {\n        name: \"window\",\n        type: \"Identifier\"\n      };\n    }\n  }\n\n  var lastNode = ast.body[ast.body.length - 1];\n\n  if (lastNode.type === \"ExpressionStatement\") {\n    lastNode.type = \"ReturnStatement\";\n    lastNode.argument = lastNode.expression;\n    delete lastNode.expression;\n  }\n\n  var rewrittenCode = escodegen.generate(ast, {\n    comment: true\n  });\n  var suffix = options.filename !== undefined ? \"\\n//# sourceURL=\" + options.filename : \"\";\n  return Function(\"window\", rewrittenCode + suffix).bind(contextifiedSandbox)(contextifiedSandbox);\n};\n\nexports.Script = /*#__PURE__*/function () {\n  function VMShimScript(code, options) {\n    _classCallCheck(this, VMShimScript);\n\n    this._code = code;\n    this._options = options;\n  }\n\n  _createClass(VMShimScript, [{\n    key: \"runInContext\",\n    value: function runInContext(sandbox, options) {\n      return exports.runInContext(this._code, sandbox, _objectSpread(_objectSpread({}, this._options), options));\n    }\n  }]);\n\n  return VMShimScript;\n}();","map":null,"metadata":{},"sourceType":"script"}
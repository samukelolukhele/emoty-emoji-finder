{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar HTMLConstructor_helpers_html_constructor = require(\"../helpers/html-constructor.js\").HTMLConstructor;\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar interfaceName = \"HTMLTableCellElement\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTableCellElement'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"HTMLTableCellElement\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor HTMLTableCellElement is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  HTMLElement._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.HTMLElement === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate HTMLTableCellElement before HTMLElement\");\n  }\n\n  var HTMLTableCellElement = /*#__PURE__*/function (_globalObject$HTMLEle) {\n    _inherits(HTMLTableCellElement, _globalObject$HTMLEle);\n\n    var _super = _createSuper(HTMLTableCellElement);\n\n    function HTMLTableCellElement() {\n      var _this;\n\n      _classCallCheck(this, HTMLTableCellElement);\n\n      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLTableCellElement ? this.constructor : void 0));\n    }\n\n    _createClass(HTMLTableCellElement, [{\n      key: \"colSpan\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get colSpan' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"colSpan\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set colSpan' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'colSpan' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"colSpan\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"rowSpan\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get rowSpan' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"rowSpan\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set rowSpan' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'rowSpan' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"rowSpan\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"headers\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get headers' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"headers\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set headers' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'headers' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"headers\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"cellIndex\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get cellIndex' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        return esValue[implSymbol][\"cellIndex\"];\n      }\n    }, {\n      key: \"scope\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get scope' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"scope\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set scope' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'scope' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"scope\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"abbr\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get abbr' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"abbr\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set abbr' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'abbr' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"abbr\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"align\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get align' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"align\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set align' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'align' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"align\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"axis\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get axis' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"axis\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set axis' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'axis' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"axis\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"height\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get height' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"height\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set height' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'height' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"height\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"width\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get width' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"width\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set width' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'width' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"width\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"ch\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ch' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"char\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ch' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'ch' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"char\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"chOff\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get chOff' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"charoff\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set chOff' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'chOff' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"charoff\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"noWrap\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get noWrap' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].hasAttributeNS(null, \"nowrap\");\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set noWrap' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'noWrap' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          if (V) {\n            esValue[implSymbol].setAttributeNS(null, \"nowrap\", \"\");\n          } else {\n            esValue[implSymbol].removeAttributeNS(null, \"nowrap\");\n          }\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"vAlign\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get vAlign' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"valign\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set vAlign' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'vAlign' property on 'HTMLTableCellElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"valign\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"bgColor\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get bgColor' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"bgcolor\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set bgColor' called on an object that is not a valid instance of HTMLTableCellElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'bgColor' property on 'HTMLTableCellElement': The provided value\",\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"bgcolor\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }]);\n\n    return HTMLTableCellElement;\n  }(globalObject.HTMLElement);\n\n  Object.defineProperties(HTMLTableCellElement.prototype, _defineProperty({\n    colSpan: {\n      enumerable: true\n    },\n    rowSpan: {\n      enumerable: true\n    },\n    headers: {\n      enumerable: true\n    },\n    cellIndex: {\n      enumerable: true\n    },\n    scope: {\n      enumerable: true\n    },\n    abbr: {\n      enumerable: true\n    },\n    align: {\n      enumerable: true\n    },\n    axis: {\n      enumerable: true\n    },\n    height: {\n      enumerable: true\n    },\n    width: {\n      enumerable: true\n    },\n    ch: {\n      enumerable: true\n    },\n    chOff: {\n      enumerable: true\n    },\n    noWrap: {\n      enumerable: true\n    },\n    vAlign: {\n      enumerable: true\n    },\n    bgColor: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"HTMLTableCellElement\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = HTMLTableCellElement;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: HTMLTableCellElement\n  });\n};\n\nvar Impl = require(\"../nodes/HTMLTableCellElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
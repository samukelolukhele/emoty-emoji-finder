{"ast":null,"code":"\"use strict\"; // An iterable WeakSet implementation inspired by the iterable WeakMap example code in the WeakRefs specification:\n// https://github.com/tc39/proposal-weakrefs#iterable-weakmaps\n\nvar _regeneratorRuntime = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function (_Symbol$iterator) {\n  function IterableWeakSet() {\n    _classCallCheck(this, IterableWeakSet);\n\n    this._refSet = new Set();\n    this._refMap = new WeakMap();\n    this._finalizationRegistry = new FinalizationRegistry(function (_ref) {\n      var ref = _ref.ref,\n          set = _ref.set;\n      return set.delete(ref);\n    });\n  }\n\n  _createClass(IterableWeakSet, [{\n    key: \"add\",\n    value: function add(value) {\n      if (!this._refMap.has(value)) {\n        var ref = new WeakRef(value);\n\n        this._refMap.set(value, ref);\n\n        this._refSet.add(ref);\n\n        this._finalizationRegistry.register(value, {\n          ref: ref,\n          set: this._refSet\n        }, ref);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(value) {\n      var ref = this._refMap.get(value);\n\n      if (!ref) {\n        return false;\n      }\n\n      this._refMap.delete(value);\n\n      this._refSet.delete(ref);\n\n      this._finalizationRegistry.unregister(ref);\n\n      return true;\n    }\n  }, {\n    key: \"has\",\n    value: function has(value) {\n      return this._refMap.has(value);\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator, _step, ref, value;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this._refSet);\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 12;\n                break;\n              }\n\n              ref = _step.value;\n              value = ref.deref();\n\n              if (!(value === undefined)) {\n                _context.next = 8;\n                break;\n              }\n\n              return _context.abrupt(\"continue\", 10);\n\n            case 8:\n              _context.next = 10;\n              return value;\n\n            case 10:\n              _context.next = 3;\n              break;\n\n            case 12:\n              _context.next = 17;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t0);\n\n            case 17:\n              _context.prev = 17;\n\n              _iterator.f();\n\n              return _context.finish(17);\n\n            case 20:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 14, 17, 20]]);\n    })\n  }]);\n\n  return IterableWeakSet;\n}(Symbol.iterator);","map":null,"metadata":{},"sourceType":"script"}
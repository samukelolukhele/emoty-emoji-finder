{"ast":null,"code":"\"use strict\";\n\nvar FocusEvent = require(\"../generated/FocusEvent.js\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"./form-controls.js\"),\n    isDisabled = _require.isDisabled;\n\nvar _require2 = require(\"./traversal\"),\n    firstChildWithLocalName = _require2.firstChildWithLocalName;\n\nvar _require3 = require(\"./events\"),\n    createAnEvent = _require3.createAnEvent;\n\nvar _require4 = require(\"./namespaces\"),\n    HTML_NS = _require4.HTML_NS,\n    SVG_NS = _require4.SVG_NS;\n\nvar _require5 = require(\"./svg/render\"),\n    isRenderedElement = _require5.isRenderedElement;\n\nvar focusableFormElements = new Set([\"input\", \"select\", \"textarea\", \"button\"]); // https://html.spec.whatwg.org/multipage/interaction.html#focusable-area, but also some of\n// https://html.spec.whatwg.org/multipage/interaction.html#focusing-steps and some of\n// https://svgwg.org/svg2-draft/interact.html#TermFocusable\n\nexports.isFocusableAreaElement = function (elImpl) {\n  // We implemented most of the suggested focusable elements found here:\n  // https://html.spec.whatwg.org/multipage/interaction.html#tabindex-value\n  // However, some suggested elements are not focusable in web browsers, as detailed here:\n  // https://github.com/whatwg/html/issues/5490\n  if (elImpl._namespaceURI === HTML_NS) {\n    if (!elImpl._ownerDocument._defaultView) {\n      return false;\n    }\n\n    if (!elImpl.isConnected) {\n      return false;\n    }\n\n    if (!Number.isNaN(parseInt(elImpl.getAttributeNS(null, \"tabindex\")))) {\n      return true;\n    }\n\n    if (elImpl._localName === \"iframe\") {\n      return true;\n    }\n\n    if (elImpl._localName === \"a\" && elImpl.hasAttributeNS(null, \"href\")) {\n      return true;\n    }\n\n    if (elImpl._localName === \"summary\" && elImpl.parentNode && elImpl.parentNode._localName === \"details\" && elImpl === firstChildWithLocalName(elImpl.parentNode, \"summary\")) {\n      return true;\n    }\n\n    if (focusableFormElements.has(elImpl._localName) && !isDisabled(elImpl)) {\n      if (elImpl._localName === \"input\" && elImpl.type === \"hidden\") {\n        return false;\n      }\n\n      return true;\n    }\n\n    if (elImpl.hasAttributeNS(null, \"contenteditable\")) {\n      return true;\n    }\n\n    return false; // This does not check for a designMode Document as specified in\n    // https://html.spec.whatwg.org/multipage/interaction.html#editing-host because the designMode\n    // attribute is not implemented.\n  }\n\n  if (elImpl._namespaceURI === SVG_NS) {\n    if (!Number.isNaN(parseInt(elImpl.getAttributeNS(null, \"tabindex\"))) && isRenderedElement(elImpl)) {\n      return true;\n    }\n\n    if (elImpl._localName === \"a\" && elImpl.hasAttributeNS(null, \"href\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  return false;\n}; // https://html.spec.whatwg.org/multipage/interaction.html#fire-a-focus-event plus the steps of\n// https://html.spec.whatwg.org/multipage/interaction.html#focus-update-steps that adjust Documents to Windows\n// It's extended with the bubbles option to also handle focusin/focusout, which are \"defined\" in\n// https://w3c.github.io/uievents/#event-type-focusin. See https://github.com/whatwg/html/issues/3514.\n\n\nexports.fireFocusEventWithTargetAdjustment = function (name, target, relatedTarget) {\n  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref$bubbles = _ref.bubbles,\n      bubbles = _ref$bubbles === void 0 ? false : _ref$bubbles;\n\n  if (target === null) {\n    // E.g. firing blur with nothing previously focused.\n    return;\n  }\n\n  var event = createAnEvent(name, target._globalObject, FocusEvent, {\n    bubbles: bubbles,\n    composed: true,\n    relatedTarget: relatedTarget,\n    view: target._ownerDocument._defaultView,\n    detail: 0\n  });\n\n  if (target._defaultView) {\n    target = idlUtils.implForWrapper(target._defaultView);\n  }\n\n  target._dispatch(event);\n};","map":null,"metadata":{},"sourceType":"script"}
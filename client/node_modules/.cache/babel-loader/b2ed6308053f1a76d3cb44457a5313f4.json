{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar nodeTypes = require(\"../node-type\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree; // Serialization only requires a subset of the tree adapter interface.\n// Tree traversing\n\n\nexports.getFirstChild = function (node) {\n  return node.firstChild;\n};\n\nexports.getChildNodes = function (node) {\n  return node.childNodesForSerializing || domSymbolTree.childrenToArray(node);\n};\n\nexports.getParentNode = function (node) {\n  return node.parentNode;\n};\n\nexports.getAttrList = function (element) {\n  var attributeList = _toConsumableArray(element._attributeList);\n\n  if (element._isValue && attributeList.every(function (attr) {\n    return attr.name !== \"is\";\n  })) {\n    attributeList.unshift({\n      name: \"is\",\n      namespace: null,\n      prefix: null,\n      value: element._isValue\n    });\n  }\n\n  return attributeList;\n}; // Node data\n\n\nexports.getTagName = function (element) {\n  return element._qualifiedName;\n}; // https://github.com/inikulin/parse5/issues/231\n\n\nexports.getNamespaceURI = function (element) {\n  return element.namespaceURI;\n};\n\nexports.getTextNodeContent = exports.getCommentNodeContent = function (node) {\n  return node.data;\n};\n\nexports.getDocumentTypeNodeName = function (node) {\n  return node.name;\n};\n\nexports.getDocumentTypeNodePublicId = function (node) {\n  return node.publicId;\n};\n\nexports.getDocumentTypeNodeSystemId = function (node) {\n  return node.systemId;\n};\n\nexports.getTemplateContent = function (templateElement) {\n  return templateElement._templateContents;\n};\n\nexports.getDocumentMode = function (document) {\n  return document._mode;\n}; // Node types\n\n\nexports.isTextNode = function (node) {\n  return node.nodeType === nodeTypes.TEXT_NODE;\n};\n\nexports.isCommentNode = function (node) {\n  return node.nodeType === nodeTypes.COMMENT_NODE;\n};\n\nexports.isDocumentTypeNode = function (node) {\n  return node.nodeType === nodeTypes.DOCUMENT_TYPE_NODE;\n};\n\nexports.isElementNode = function (node) {\n  return node.nodeType === nodeTypes.ELEMENT_NODE;\n}; // Source code location\n\n\nexports.setNodeSourceCodeLocation = function (node, location) {\n  node.sourceCodeLocation = location;\n};\n\nexports.getNodeSourceCodeLocation = function (node) {\n  return node.sourceCodeLocation;\n};\n\nexports.updateNodeSourceCodeLocation = function (node, endLocation) {\n  Object.assign(node.sourceCodeLocation, endLocation);\n};","map":null,"metadata":{},"sourceType":"script"}
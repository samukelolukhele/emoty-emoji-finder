{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\n\nvar CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require2 = require(\"../../utils\"),\n    mixin = _require2.mixin; // https://dom.spec.whatwg.org/#text\n\n\nvar TextImpl = /*#__PURE__*/function (_CharacterDataImpl) {\n  _inherits(TextImpl, _CharacterDataImpl);\n\n  var _super = _createSuper(TextImpl);\n\n  function TextImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, TextImpl);\n\n    _this = _super.call(this, globalObject, args, _objectSpread({\n      data: args[0],\n      ownerDocument: idlUtils.implForWrapper(globalObject._document)\n    }, privateData));\n\n    _this._initSlotableMixin();\n\n    _this.nodeType = NODE_TYPE.TEXT_NODE;\n    return _this;\n  } // https://dom.spec.whatwg.org/#dom-text-splittext\n  // https://dom.spec.whatwg.org/#concept-text-split\n\n\n  _createClass(TextImpl, [{\n    key: \"splitText\",\n    value: function splitText(offset) {\n      var length = this.length;\n\n      if (offset > length) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      var count = length - offset;\n      var newData = this.substringData(offset, count);\n\n      var newNode = this._ownerDocument.createTextNode(newData);\n\n      var parent = domSymbolTree.parent(this);\n\n      if (parent !== null) {\n        parent._insert(newNode, this.nextSibling);\n\n        var _iterator = _createForOfIteratorHelper(this._referencedRanges),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var range = _step.value;\n            var _start = range._start,\n                _end = range._end;\n\n            if (_start.node === this && _start.offset > offset) {\n              range._setLiveRangeStart(newNode, _start.offset - offset);\n            }\n\n            if (_end.node === this && _end.offset > offset) {\n              range._setLiveRangeEnd(newNode, _end.offset - offset);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        var nodeIndex = domSymbolTree.index(this);\n\n        var _iterator2 = _createForOfIteratorHelper(parent._referencedRanges),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _range = _step2.value;\n            var _start2 = _range._start,\n                _end2 = _range._end;\n\n            if (_start2.node === parent && _start2.offset === nodeIndex + 1) {\n              _range._setLiveRangeStart(parent, _start2.offset + 1);\n            }\n\n            if (_end2.node === parent && _end2.offset === nodeIndex + 1) {\n              _range._setLiveRangeEnd(parent, _end2.offset + 1);\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n\n      this.replaceData(offset, count, \"\");\n      return newNode;\n    } // https://dom.spec.whatwg.org/#dom-text-wholetext\n\n  }, {\n    key: \"wholeText\",\n    get: function get() {\n      var wholeText = this.textContent;\n      var next;\n      var current = this;\n\n      while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText = next.textContent + wholeText;\n        current = next;\n      }\n\n      current = this;\n\n      while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n        wholeText += next.textContent;\n        current = next;\n      }\n\n      return wholeText;\n    }\n  }]);\n\n  return TextImpl;\n}(CharacterDataImpl);\n\nmixin(TextImpl.prototype, SlotableMixinImpl.prototype);\nmodule.exports = {\n  implementation: TextImpl\n};","map":null,"metadata":{},"sourceType":"script"}
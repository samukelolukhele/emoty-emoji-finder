{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/traversal\"),\n    closest = _require.closest;\n\nvar _require2 = require(\"../helpers/form-controls\"),\n    isDisabled = _require2.isDisabled,\n    isSubmittable = _require2.isSubmittable,\n    isButton = _require2.isButton;\n\nvar Blob = require(\"../generated/Blob.js\");\n\nvar File = require(\"../generated/File.js\");\n\nvar conversions = require(\"webidl-conversions\");\n\nexports.implementation = /*#__PURE__*/function (_Symbol$iterator) {\n  function FormDataImpl(globalObject, args) {\n    _classCallCheck(this, FormDataImpl);\n\n    this._globalObject = globalObject;\n    this._entries = [];\n\n    if (args[0] !== undefined) {\n      this._entries = constructTheEntryList(args[0]);\n    }\n  }\n\n  _createClass(FormDataImpl, [{\n    key: \"append\",\n    value: function append(name, value, filename) {\n      var entry = createAnEntry(name, value, filename);\n\n      this._entries.push(entry);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      this._entries = this._entries.filter(function (entry) {\n        return entry.name !== name;\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      var foundEntry = this._entries.find(function (entry) {\n        return entry.name === name;\n      });\n\n      return foundEntry !== undefined ? idlUtils.tryWrapperForImpl(foundEntry.value) : null;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      return this._entries.filter(function (entry) {\n        return entry.name === name;\n      }).map(function (entry) {\n        return idlUtils.tryWrapperForImpl(entry.value);\n      });\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      return this._entries.findIndex(function (entry) {\n        return entry.name === name;\n      }) !== -1;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value, filename) {\n      var entry = createAnEntry(name, value, filename);\n\n      var foundIndex = this._entries.findIndex(function (e) {\n        return e.name === name;\n      });\n\n      if (foundIndex !== -1) {\n        this._entries[foundIndex] = entry;\n        this._entries = this._entries.filter(function (e, i) {\n          return e.name !== name || i === foundIndex;\n        });\n      } else {\n        this._entries.push(entry);\n      }\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator, _step, entry;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator = _createForOfIteratorHelper(this._entries);\n              _context.prev = 1;\n\n              _iterator.s();\n\n            case 3:\n              if ((_step = _iterator.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              entry = _step.value;\n              _context.next = 7;\n              return [entry.name, idlUtils.tryWrapperForImpl(entry.value)];\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 11, 14, 17]]);\n    })\n  }]);\n\n  return FormDataImpl;\n}(Symbol.iterator);\n\nfunction createAnEntry(name, value, filename) {\n  var entry = {\n    name: name\n  }; // https://github.com/whatwg/xhr/issues/75\n\n  if (Blob.isImpl(value) && !File.isImpl(value)) {\n    var oldValue = value;\n    value = File.createImpl(value._globalObject, [[], \"blob\", {\n      type: oldValue.type\n    }]); // \"representing the same bytes\"\n\n    value._buffer = oldValue._buffer;\n  }\n\n  if (File.isImpl(value) && filename !== undefined) {\n    var _oldValue = value;\n    value = File.createImpl(value._globalObject, [[], filename, // spec makes no mention of `lastModified`; assume it is inherited\n    // (Chrome's behavior)\n    {\n      type: _oldValue.type,\n      lastModified: _oldValue.lastModified\n    }]); // \"representing the same bytes\"\n\n    value._buffer = _oldValue._buffer;\n  }\n\n  entry.value = value;\n  return entry;\n}\n\nfunction constructTheEntryList(form, submitter) {\n  // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#constructing-the-form-data-set\n  // TODO: handle encoding\n  // TODO: handling \"constructing entry list\"\n  var controls = form.elements.filter(isSubmittable); // submittable is a subset of listed\n\n  var entryList = [];\n\n  var _iterator2 = _createForOfIteratorHelper(controls),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var field = _step2.value;\n\n      if (closest(field, \"datalist\") !== null) {\n        continue;\n      }\n\n      if (isDisabled(field)) {\n        continue;\n      }\n\n      if (isButton(field) && field !== submitter) {\n        continue;\n      }\n\n      if (field.type === \"checkbox\" && field._checkedness === false) {\n        continue;\n      }\n\n      if (field.type === \"radio\" && field._checkedness === false) {\n        continue;\n      }\n\n      if (field.localName === \"object\") {\n        // in jsdom, no objects are \"using a plugin\"\n        continue;\n      } // TODO: Handle <input type=\"image\">\n      // TODO: handle form-associated custom elements.\n\n\n      var name = field.getAttributeNS(null, \"name\");\n\n      if (name === null || name === \"\") {\n        continue;\n      }\n\n      if (field.localName === \"select\") {\n        var _iterator3 = _createForOfIteratorHelper(field.options),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var option = _step3.value;\n\n            if (option._selectedness === true && !isDisabled(field)) {\n              appendAnEntry(entryList, name, option._getValue());\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n      } else if (field.localName === \"input\" && (field.type === \"checkbox\" || field.type === \"radio\")) {\n        var _value = field.hasAttributeNS(null, \"value\") ? field.getAttributeNS(null, \"value\") : \"on\";\n\n        appendAnEntry(entryList, name, _value);\n      } else if (field.type === \"file\") {\n        if (field.files.length === 0) {\n          var _value2 = File.createImpl(form._globalObject, [[], \"\", {\n            type: \"application/octet-stream\"\n          }]);\n\n          appendAnEntry(entryList, name, _value2);\n        } else {\n          for (var i = 0; i < field.files.length; ++i) {\n            appendAnEntry(entryList, name, field.files.item(i));\n          }\n        }\n      } else {\n        appendAnEntry(entryList, name, field._getValue());\n      }\n\n      var dirname = field.getAttributeNS(null, \"dirname\");\n\n      if (dirname !== null && dirname !== \"\") {\n        var dir = \"ltr\"; // jsdom does not (yet?) implement actual directionality\n\n        appendAnEntry(entryList, dirname, dir);\n      }\n    } // TODO: formdata event\n\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return entryList;\n}\n\nfunction appendAnEntry(entryList, name, value) {\n  name = conversions.USVString(name);\n\n  if (!File.isImpl(value)) {\n    value = conversions.USVString(value);\n  }\n\n  var entry = createAnEntry(name, value);\n  entryList.push(entry);\n}","map":null,"metadata":{},"sourceType":"script"}
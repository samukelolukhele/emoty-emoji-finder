{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar Blob = require(\"../generated/Blob\");\n\nvar _require = require(\"../generated/utils\"),\n    isArrayBuffer = _require.isArrayBuffer;\n\nfunction convertLineEndingsToNative(s) {\n  // jsdom always pretends to be *nix, for consistency.\n  // See also https://github.com/jsdom/jsdom/issues/2396.\n  return s.replace(/\\r\\n|\\r|\\n/g, \"\\n\");\n}\n\nexports.implementation = /*#__PURE__*/function () {\n  function BlobImpl(globalObject, args) {\n    _classCallCheck(this, BlobImpl);\n\n    var parts = args[0];\n    var properties = args[1];\n    var buffers = [];\n\n    if (parts !== undefined) {\n      var _iterator = _createForOfIteratorHelper(parts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var part = _step.value;\n          var buffer = void 0;\n\n          if (isArrayBuffer(part)) {\n            buffer = Buffer.from(part);\n          } else if (ArrayBuffer.isView(part)) {\n            buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n          } else if (Blob.isImpl(part)) {\n            buffer = part._buffer;\n          } else {\n            var s = part;\n\n            if (properties.endings === \"native\") {\n              s = convertLineEndingsToNative(part);\n            }\n\n            buffer = Buffer.from(s);\n          }\n\n          buffers.push(buffer);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n    this._globalObject = globalObject;\n    this.type = properties.type;\n\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  _createClass(BlobImpl, [{\n    key: \"size\",\n    get: function get() {\n      return this._buffer.length;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(start, end, contentType) {\n      var size = this.size;\n      var relativeStart, relativeEnd, relativeContentType;\n\n      if (start === undefined) {\n        relativeStart = 0;\n      } else if (start < 0) {\n        relativeStart = Math.max(size + start, 0);\n      } else {\n        relativeStart = Math.min(start, size);\n      }\n\n      if (end === undefined) {\n        relativeEnd = size;\n      } else if (end < 0) {\n        relativeEnd = Math.max(size + end, 0);\n      } else {\n        relativeEnd = Math.min(end, size);\n      }\n\n      if (contentType === undefined) {\n        relativeContentType = \"\";\n      } else {\n        // sanitization (lower case and invalid char check) is done in the\n        // constructor\n        relativeContentType = contentType;\n      }\n\n      var span = Math.max(relativeEnd - relativeStart, 0);\n      var buffer = this._buffer;\n      var slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n      var blob = Blob.createImpl(this._globalObject, [[], {\n        type: relativeContentType\n      }], {});\n      blob._buffer = slicedBuffer;\n      return blob;\n    }\n  }]);\n\n  return BlobImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}
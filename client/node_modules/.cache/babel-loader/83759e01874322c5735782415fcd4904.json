{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar ElementCreationOptions = require(\"./ElementCreationOptions.js\");\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar Node = require(\"./Node.js\");\n\nvar NodeFilter = require(\"./NodeFilter.js\");\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar EventHandlerNonNull = require(\"./EventHandlerNonNull.js\");\n\nvar OnErrorEventHandlerNonNull = require(\"./OnErrorEventHandlerNonNull.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"Document\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'Document'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"Document\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Document is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  Node._internalSetup(wrapper, globalObject);\n\n  Object.defineProperties(wrapper, Object.getOwnPropertyDescriptors({\n    get location() {\n      var esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"'get location' called on an object that is not a valid instance of Document.\");\n      }\n\n      return utils.tryWrapperForImpl(esValue[implSymbol][\"location\"]);\n    },\n\n    set location(V) {\n      var esValue = this !== null && this !== undefined ? this : globalObject;\n\n      if (!exports.is(esValue)) {\n        throw new TypeError(\"'set location' called on an object that is not a valid instance of Document.\");\n      }\n\n      var Q = esValue[\"location\"];\n\n      if (!utils.isObject(Q)) {\n        throw new TypeError(\"Property 'location' is not an object\");\n      }\n\n      Reflect.set(Q, \"href\", V);\n    }\n\n  }));\n  Object.defineProperties(wrapper, {\n    location: {\n      configurable: false\n    }\n  });\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  var _Object$definePropert;\n\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.Node === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate Document before Node\");\n  }\n\n  var Document = /*#__PURE__*/function (_globalObject$Node) {\n    _inherits(Document, _globalObject$Node);\n\n    var _super = _createSuper(Document);\n\n    function Document() {\n      var _this;\n\n      _classCallCheck(this, Document);\n\n      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof Document ? this.constructor : void 0).prototype), globalObject, undefined));\n    }\n\n    _createClass(Document, [{\n      key: \"getElementsByTagName\",\n      value: function getElementsByTagName(qualifiedName) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getElementsByTagName' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'getElementsByTagName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getElementsByTagName' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).getElementsByTagName.apply(_esValue$implSymbol, args));\n      }\n    }, {\n      key: \"getElementsByTagNameNS\",\n      value: function getElementsByTagNameNS(namespace, localName) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getElementsByTagNameNS' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'getElementsByTagNameNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 1\"\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg = arguments[1];\n          _curArg = conversions[\"DOMString\"](_curArg, {\n            context: \"Failed to execute 'getElementsByTagNameNS' on 'Document': parameter 2\"\n          });\n          args.push(_curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol2 = esValue[implSymbol]).getElementsByTagNameNS.apply(_esValue$implSymbol2, args));\n      }\n    }, {\n      key: \"getElementsByClassName\",\n      value: function getElementsByClassName(classNames) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getElementsByClassName' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'getElementsByClassName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getElementsByClassName' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol3 = esValue[implSymbol]).getElementsByClassName.apply(_esValue$implSymbol3, args));\n      }\n    }, {\n      key: \"createElement\",\n      value: function createElement(localName) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createElement' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createElement' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createElement' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg2 = arguments[1];\n\n          if (_curArg2 !== undefined) {\n            if (_curArg2 === null || _curArg2 === undefined) {\n              _curArg2 = ElementCreationOptions.convert(_curArg2, {\n                context: \"Failed to execute 'createElement' on 'Document': parameter 2\"\n              });\n            } else if (utils.isObject(_curArg2)) {\n              _curArg2 = ElementCreationOptions.convert(_curArg2, {\n                context: \"Failed to execute 'createElement' on 'Document': parameter 2\" + \" dictionary\"\n              });\n            } else {\n              _curArg2 = conversions[\"DOMString\"](_curArg2, {\n                context: \"Failed to execute 'createElement' on 'Document': parameter 2\"\n              });\n            }\n          }\n\n          args.push(_curArg2);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol4;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol4 = esValue[implSymbol]).createElement.apply(_esValue$implSymbol4, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"createElementNS\",\n      value: function createElementNS(namespace, qualifiedName) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createElementNS' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'createElementNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'createElementNS' on 'Document': parameter 1\"\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg3 = arguments[1];\n          _curArg3 = conversions[\"DOMString\"](_curArg3, {\n            context: \"Failed to execute 'createElementNS' on 'Document': parameter 2\"\n          });\n          args.push(_curArg3);\n        }\n        {\n          var _curArg4 = arguments[2];\n\n          if (_curArg4 !== undefined) {\n            if (_curArg4 === null || _curArg4 === undefined) {\n              _curArg4 = ElementCreationOptions.convert(_curArg4, {\n                context: \"Failed to execute 'createElementNS' on 'Document': parameter 3\"\n              });\n            } else if (utils.isObject(_curArg4)) {\n              _curArg4 = ElementCreationOptions.convert(_curArg4, {\n                context: \"Failed to execute 'createElementNS' on 'Document': parameter 3\" + \" dictionary\"\n              });\n            } else {\n              _curArg4 = conversions[\"DOMString\"](_curArg4, {\n                context: \"Failed to execute 'createElementNS' on 'Document': parameter 3\"\n              });\n            }\n          }\n\n          args.push(_curArg4);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol5;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol5 = esValue[implSymbol]).createElementNS.apply(_esValue$implSymbol5, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"createDocumentFragment\",\n      value: function createDocumentFragment() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createDocumentFragment' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol].createDocumentFragment());\n      }\n    }, {\n      key: \"createTextNode\",\n      value: function createTextNode(data) {\n        var _esValue$implSymbol6;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createTextNode' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createTextNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createTextNode' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol6 = esValue[implSymbol]).createTextNode.apply(_esValue$implSymbol6, args));\n      }\n    }, {\n      key: \"createCDATASection\",\n      value: function createCDATASection(data) {\n        var _esValue$implSymbol7;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createCDATASection' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createCDATASection' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createCDATASection' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol7 = esValue[implSymbol]).createCDATASection.apply(_esValue$implSymbol7, args));\n      }\n    }, {\n      key: \"createComment\",\n      value: function createComment(data) {\n        var _esValue$implSymbol8;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createComment' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createComment' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createComment' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol8 = esValue[implSymbol]).createComment.apply(_esValue$implSymbol8, args));\n      }\n    }, {\n      key: \"createProcessingInstruction\",\n      value: function createProcessingInstruction(target, data) {\n        var _esValue$implSymbol9;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createProcessingInstruction' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'createProcessingInstruction' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createProcessingInstruction' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg5 = arguments[1];\n          _curArg5 = conversions[\"DOMString\"](_curArg5, {\n            context: \"Failed to execute 'createProcessingInstruction' on 'Document': parameter 2\"\n          });\n          args.push(_curArg5);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol9 = esValue[implSymbol]).createProcessingInstruction.apply(_esValue$implSymbol9, args));\n      }\n    }, {\n      key: \"importNode\",\n      value: function importNode(node) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'importNode' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'importNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'importNode' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg6 = arguments[1];\n\n          if (_curArg6 !== undefined) {\n            _curArg6 = conversions[\"boolean\"](_curArg6, {\n              context: \"Failed to execute 'importNode' on 'Document': parameter 2\"\n            });\n          } else {\n            _curArg6 = false;\n          }\n\n          args.push(_curArg6);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol10;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol10 = esValue[implSymbol]).importNode.apply(_esValue$implSymbol10, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"adoptNode\",\n      value: function adoptNode(node) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'adoptNode' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'adoptNode' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'adoptNode' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol11;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol11 = esValue[implSymbol]).adoptNode.apply(_esValue$implSymbol11, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"createAttribute\",\n      value: function createAttribute(localName) {\n        var _esValue$implSymbol12;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createAttribute' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createAttribute' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createAttribute' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol12 = esValue[implSymbol]).createAttribute.apply(_esValue$implSymbol12, args));\n      }\n    }, {\n      key: \"createAttributeNS\",\n      value: function createAttributeNS(namespace, qualifiedName) {\n        var _esValue$implSymbol13;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createAttributeNS' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'createAttributeNS' on 'Document': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg === null || curArg === undefined) {\n            curArg = null;\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'createAttributeNS' on 'Document': parameter 1\"\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg7 = arguments[1];\n          _curArg7 = conversions[\"DOMString\"](_curArg7, {\n            context: \"Failed to execute 'createAttributeNS' on 'Document': parameter 2\"\n          });\n          args.push(_curArg7);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol13 = esValue[implSymbol]).createAttributeNS.apply(_esValue$implSymbol13, args));\n      }\n    }, {\n      key: \"createEvent\",\n      value: function createEvent(interface_) {\n        var _esValue$implSymbol14;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createEvent' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createEvent' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'createEvent' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol14 = esValue[implSymbol]).createEvent.apply(_esValue$implSymbol14, args));\n      }\n    }, {\n      key: \"createRange\",\n      value: function createRange() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createRange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol].createRange());\n      }\n    }, {\n      key: \"createNodeIterator\",\n      value: function createNodeIterator(root) {\n        var _esValue$implSymbol15;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createNodeIterator' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createNodeIterator' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg8 = arguments[1];\n\n          if (_curArg8 !== undefined) {\n            _curArg8 = conversions[\"unsigned long\"](_curArg8, {\n              context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 2\"\n            });\n          } else {\n            _curArg8 = 0xffffffff;\n          }\n\n          args.push(_curArg8);\n        }\n        {\n          var _curArg9 = arguments[2];\n\n          if (_curArg9 !== undefined) {\n            if (_curArg9 === null || _curArg9 === undefined) {\n              _curArg9 = null;\n            } else {\n              _curArg9 = NodeFilter.convert(_curArg9, {\n                context: \"Failed to execute 'createNodeIterator' on 'Document': parameter 3\"\n              });\n            }\n          } else {\n            _curArg9 = null;\n          }\n\n          args.push(_curArg9);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol15 = esValue[implSymbol]).createNodeIterator.apply(_esValue$implSymbol15, args));\n      }\n    }, {\n      key: \"createTreeWalker\",\n      value: function createTreeWalker(root) {\n        var _esValue$implSymbol16;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'createTreeWalker' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'createTreeWalker' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = Node.convert(curArg, {\n            context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg10 = arguments[1];\n\n          if (_curArg10 !== undefined) {\n            _curArg10 = conversions[\"unsigned long\"](_curArg10, {\n              context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 2\"\n            });\n          } else {\n            _curArg10 = 0xffffffff;\n          }\n\n          args.push(_curArg10);\n        }\n        {\n          var _curArg11 = arguments[2];\n\n          if (_curArg11 !== undefined) {\n            if (_curArg11 === null || _curArg11 === undefined) {\n              _curArg11 = null;\n            } else {\n              _curArg11 = NodeFilter.convert(_curArg11, {\n                context: \"Failed to execute 'createTreeWalker' on 'Document': parameter 3\"\n              });\n            }\n          } else {\n            _curArg11 = null;\n          }\n\n          args.push(_curArg11);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol16 = esValue[implSymbol]).createTreeWalker.apply(_esValue$implSymbol16, args));\n      }\n    }, {\n      key: \"getElementsByName\",\n      value: function getElementsByName(elementName) {\n        var _esValue$implSymbol17;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getElementsByName' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'getElementsByName' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getElementsByName' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol17 = esValue[implSymbol]).getElementsByName.apply(_esValue$implSymbol17, args));\n      }\n    }, {\n      key: \"open\",\n      value: function open() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'open' called on an object that is not a valid instance of Document.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'open' on 'Document': parameter 1\"\n            });\n          } else {\n            curArg = \"text/html\";\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg12 = arguments[1];\n\n          if (_curArg12 !== undefined) {\n            _curArg12 = conversions[\"DOMString\"](_curArg12, {\n              context: \"Failed to execute 'open' on 'Document': parameter 2\"\n            });\n          } else {\n            _curArg12 = \"\";\n          }\n\n          args.push(_curArg12);\n        }\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol18;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol18 = esValue[implSymbol]).open.apply(_esValue$implSymbol18, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'close' called on an object that is not a valid instance of Document.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].close();\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"write\",\n      value: function write() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'write' called on an object that is not a valid instance of Document.\");\n        }\n\n        var args = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          var curArg = arguments[i];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'write' on 'Document': parameter \" + (i + 1)\n          });\n          args.push(curArg);\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol19;\n\n          return (_esValue$implSymbol19 = esValue[implSymbol]).write.apply(_esValue$implSymbol19, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"writeln\",\n      value: function writeln() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'writeln' called on an object that is not a valid instance of Document.\");\n        }\n\n        var args = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          var curArg = arguments[i];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'writeln' on 'Document': parameter \" + (i + 1)\n          });\n          args.push(curArg);\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol20;\n\n          return (_esValue$implSymbol20 = esValue[implSymbol]).writeln.apply(_esValue$implSymbol20, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"hasFocus\",\n      value: function hasFocus() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'hasFocus' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol].hasFocus();\n      }\n    }, {\n      key: \"clear\",\n      value: function clear() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'clear' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol].clear();\n      }\n    }, {\n      key: \"captureEvents\",\n      value: function captureEvents() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'captureEvents' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol].captureEvents();\n      }\n    }, {\n      key: \"releaseEvents\",\n      value: function releaseEvents() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'releaseEvents' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol].releaseEvents();\n      }\n    }, {\n      key: \"getSelection\",\n      value: function getSelection() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getSelection' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol].getSelection());\n      }\n    }, {\n      key: \"getElementById\",\n      value: function getElementById(elementId) {\n        var _esValue$implSymbol21;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getElementById' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'getElementById' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'getElementById' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol21 = esValue[implSymbol]).getElementById.apply(_esValue$implSymbol21, args));\n      }\n    }, {\n      key: \"prepend\",\n      value: function prepend() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'prepend' called on an object that is not a valid instance of Document.\");\n        }\n\n        var args = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          var curArg = arguments[i];\n\n          if (Node.is(curArg)) {\n            curArg = utils.implForWrapper(curArg);\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'prepend' on 'Document': parameter \" + (i + 1)\n            });\n          }\n\n          args.push(curArg);\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol22;\n\n          return (_esValue$implSymbol22 = esValue[implSymbol]).prepend.apply(_esValue$implSymbol22, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"append\",\n      value: function append() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'append' called on an object that is not a valid instance of Document.\");\n        }\n\n        var args = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          var curArg = arguments[i];\n\n          if (Node.is(curArg)) {\n            curArg = utils.implForWrapper(curArg);\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'append' on 'Document': parameter \" + (i + 1)\n            });\n          }\n\n          args.push(curArg);\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol23;\n\n          return (_esValue$implSymbol23 = esValue[implSymbol]).append.apply(_esValue$implSymbol23, args);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"replaceChildren\",\n      value: function replaceChildren() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'replaceChildren' called on an object that is not a valid instance of Document.\");\n        }\n\n        var args = [];\n\n        for (var i = 0; i < arguments.length; i++) {\n          var curArg = arguments[i];\n\n          if (Node.is(curArg)) {\n            curArg = utils.implForWrapper(curArg);\n          } else {\n            curArg = conversions[\"DOMString\"](curArg, {\n              context: \"Failed to execute 'replaceChildren' on 'Document': parameter \" + (i + 1)\n            });\n          }\n\n          args.push(curArg);\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var _esValue$implSymbol24;\n\n          return utils.tryWrapperForImpl((_esValue$implSymbol24 = esValue[implSymbol]).replaceChildren.apply(_esValue$implSymbol24, args));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"querySelector\",\n      value: function querySelector(selectors) {\n        var _esValue$implSymbol25;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'querySelector' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'querySelector' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'querySelector' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol25 = esValue[implSymbol]).querySelector.apply(_esValue$implSymbol25, args));\n      }\n    }, {\n      key: \"querySelectorAll\",\n      value: function querySelectorAll(selectors) {\n        var _esValue$implSymbol26;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'querySelectorAll' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'querySelectorAll' on 'Document': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'querySelectorAll' on 'Document': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol26 = esValue[implSymbol]).querySelectorAll.apply(_esValue$implSymbol26, args));\n      }\n    }, {\n      key: \"implementation\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get implementation' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"implementation\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"implementation\"]);\n        });\n      }\n    }, {\n      key: \"URL\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get URL' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"URL\"];\n      }\n    }, {\n      key: \"documentURI\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get documentURI' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"documentURI\"];\n      }\n    }, {\n      key: \"compatMode\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get compatMode' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"compatMode\"];\n      }\n    }, {\n      key: \"characterSet\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get characterSet' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"characterSet\"];\n      }\n    }, {\n      key: \"charset\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get charset' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"charset\"];\n      }\n    }, {\n      key: \"inputEncoding\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get inputEncoding' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"inputEncoding\"];\n      }\n    }, {\n      key: \"contentType\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get contentType' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"contentType\"];\n      }\n    }, {\n      key: \"doctype\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get doctype' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"doctype\"]);\n      }\n    }, {\n      key: \"documentElement\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get documentElement' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"documentElement\"]);\n      }\n    }, {\n      key: \"referrer\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get referrer' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"referrer\"];\n      }\n    }, {\n      key: \"cookie\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get cookie' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"cookie\"];\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set cookie' called on an object that is not a valid instance of Document.\");\n        }\n\n        V = conversions[\"USVString\"](V, {\n          context: \"Failed to set the 'cookie' property on 'Document': The provided value\"\n        });\n        esValue[implSymbol][\"cookie\"] = V;\n      }\n    }, {\n      key: \"lastModified\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get lastModified' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"lastModified\"];\n      }\n    }, {\n      key: \"readyState\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get readyState' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"readyState\"]);\n      }\n    }, {\n      key: \"title\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get title' called on an object that is not a valid instance of Document.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"title\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set title' called on an object that is not a valid instance of Document.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'title' property on 'Document': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"title\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"dir\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get dir' called on an object that is not a valid instance of Document.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"dir\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set dir' called on an object that is not a valid instance of Document.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'dir' property on 'Document': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"dir\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"body\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get body' called on an object that is not a valid instance of Document.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"body\"]);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set body' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (V === null || V === undefined) {\n          V = null;\n        } else {\n          V = HTMLElement.convert(V, {\n            context: \"Failed to set the 'body' property on 'Document': The provided value\"\n          });\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"body\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"head\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get head' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"head\"]);\n      }\n    }, {\n      key: \"images\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get images' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"images\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"images\"]);\n        });\n      }\n    }, {\n      key: \"embeds\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get embeds' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"embeds\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"embeds\"]);\n        });\n      }\n    }, {\n      key: \"plugins\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get plugins' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"plugins\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"plugins\"]);\n        });\n      }\n    }, {\n      key: \"links\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get links' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"links\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"links\"]);\n        });\n      }\n    }, {\n      key: \"forms\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get forms' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"forms\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"forms\"]);\n        });\n      }\n    }, {\n      key: \"scripts\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get scripts' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"scripts\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"scripts\"]);\n        });\n      }\n    }, {\n      key: \"currentScript\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get currentScript' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"currentScript\"]);\n      }\n    }, {\n      key: \"defaultView\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get defaultView' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"defaultView\"]);\n      }\n    }, {\n      key: \"onreadystatechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onreadystatechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onreadystatechange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onreadystatechange\"] = V;\n      }\n    }, {\n      key: \"anchors\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get anchors' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"anchors\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"anchors\"]);\n        });\n      }\n    }, {\n      key: \"applets\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get applets' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"applets\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"applets\"]);\n        });\n      }\n    }, {\n      key: \"styleSheets\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get styleSheets' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"styleSheets\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"styleSheets\"]);\n        });\n      }\n    }, {\n      key: \"hidden\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get hidden' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"hidden\"];\n      }\n    }, {\n      key: \"visibilityState\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get visibilityState' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"visibilityState\"]);\n      }\n    }, {\n      key: \"onvisibilitychange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onvisibilitychange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onvisibilitychange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onvisibilitychange' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onvisibilitychange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onvisibilitychange\"] = V;\n      }\n    }, {\n      key: \"onabort\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onabort' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onabort\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onabort' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onabort' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onabort\"] = V;\n      }\n    }, {\n      key: \"onauxclick\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onauxclick' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onauxclick\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onauxclick' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onauxclick' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onauxclick\"] = V;\n      }\n    }, {\n      key: \"onblur\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onblur' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onblur\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onblur' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onblur' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onblur\"] = V;\n      }\n    }, {\n      key: \"oncancel\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncancel' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncancel\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncancel' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncancel' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncancel\"] = V;\n      }\n    }, {\n      key: \"oncanplay\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncanplay' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncanplay\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncanplay' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncanplay' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncanplay\"] = V;\n      }\n    }, {\n      key: \"oncanplaythrough\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncanplaythrough' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncanplaythrough\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncanplaythrough' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncanplaythrough' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncanplaythrough\"] = V;\n      }\n    }, {\n      key: \"onchange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onchange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onchange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onchange' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onchange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onchange\"] = V;\n      }\n    }, {\n      key: \"onclick\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onclick' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onclick\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onclick' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onclick' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onclick\"] = V;\n      }\n    }, {\n      key: \"onclose\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onclose' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onclose\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onclose' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onclose' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onclose\"] = V;\n      }\n    }, {\n      key: \"oncontextmenu\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncontextmenu' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncontextmenu\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncontextmenu' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncontextmenu' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncontextmenu\"] = V;\n      }\n    }, {\n      key: \"oncuechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncuechange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncuechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncuechange' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncuechange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncuechange\"] = V;\n      }\n    }, {\n      key: \"ondblclick\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondblclick' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondblclick\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondblclick' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondblclick' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondblclick\"] = V;\n      }\n    }, {\n      key: \"ondrag\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondrag' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondrag\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondrag' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondrag' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondrag\"] = V;\n      }\n    }, {\n      key: \"ondragend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragend' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragend' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragend' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragend\"] = V;\n      }\n    }, {\n      key: \"ondragenter\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragenter' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragenter\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragenter' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragenter' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragenter\"] = V;\n      }\n    }, {\n      key: \"ondragleave\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragleave' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragleave\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragleave' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragleave' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragleave\"] = V;\n      }\n    }, {\n      key: \"ondragover\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragover' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragover\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragover' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragover' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragover\"] = V;\n      }\n    }, {\n      key: \"ondragstart\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragstart' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragstart\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragstart' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragstart' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragstart\"] = V;\n      }\n    }, {\n      key: \"ondrop\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondrop' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondrop\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondrop' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondrop' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondrop\"] = V;\n      }\n    }, {\n      key: \"ondurationchange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondurationchange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondurationchange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondurationchange' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondurationchange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondurationchange\"] = V;\n      }\n    }, {\n      key: \"onemptied\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onemptied' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onemptied\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onemptied' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onemptied' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onemptied\"] = V;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onended' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onended\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onended' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onended' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onended\"] = V;\n      }\n    }, {\n      key: \"onerror\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onerror' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onerror\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onerror' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = OnErrorEventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onerror' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onerror\"] = V;\n      }\n    }, {\n      key: \"onfocus\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onfocus' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onfocus\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onfocus' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onfocus' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onfocus\"] = V;\n      }\n    }, {\n      key: \"oninput\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oninput' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oninput\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oninput' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oninput' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oninput\"] = V;\n      }\n    }, {\n      key: \"oninvalid\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oninvalid' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oninvalid\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oninvalid' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oninvalid' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oninvalid\"] = V;\n      }\n    }, {\n      key: \"onkeydown\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onkeydown' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onkeydown\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onkeydown' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onkeydown' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onkeydown\"] = V;\n      }\n    }, {\n      key: \"onkeypress\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onkeypress' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onkeypress\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onkeypress' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onkeypress' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onkeypress\"] = V;\n      }\n    }, {\n      key: \"onkeyup\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onkeyup' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onkeyup\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onkeyup' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onkeyup' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onkeyup\"] = V;\n      }\n    }, {\n      key: \"onload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onload' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onload' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onload' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onload\"] = V;\n      }\n    }, {\n      key: \"onloadeddata\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadeddata' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadeddata\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadeddata' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadeddata' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadeddata\"] = V;\n      }\n    }, {\n      key: \"onloadedmetadata\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadedmetadata' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadedmetadata\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadedmetadata' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadedmetadata' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadedmetadata\"] = V;\n      }\n    }, {\n      key: \"onloadend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadend' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadend' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadend' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadend\"] = V;\n      }\n    }, {\n      key: \"onloadstart\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadstart' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadstart\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadstart' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadstart' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadstart\"] = V;\n      }\n    }, {\n      key: \"onmousedown\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmousedown' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmousedown\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmousedown' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmousedown' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmousedown\"] = V;\n      }\n    }, {\n      key: \"onmouseenter\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseenter\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseenter' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseenter\"] = V;\n      }\n    }, {\n      key: \"onmouseleave\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseleave\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseleave' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseleave\"] = V;\n      }\n    }, {\n      key: \"onmousemove\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmousemove' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmousemove\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmousemove' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmousemove' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmousemove\"] = V;\n      }\n    }, {\n      key: \"onmouseout\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmouseout' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseout\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmouseout' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseout' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseout\"] = V;\n      }\n    }, {\n      key: \"onmouseover\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmouseover' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseover\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmouseover' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseover' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseover\"] = V;\n      }\n    }, {\n      key: \"onmouseup\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmouseup' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseup\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmouseup' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseup' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseup\"] = V;\n      }\n    }, {\n      key: \"onwheel\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onwheel' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onwheel\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onwheel' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onwheel' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onwheel\"] = V;\n      }\n    }, {\n      key: \"onpause\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onpause' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpause\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onpause' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onpause' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpause\"] = V;\n      }\n    }, {\n      key: \"onplay\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onplay' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onplay\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onplay' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onplay' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onplay\"] = V;\n      }\n    }, {\n      key: \"onplaying\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onplaying' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onplaying\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onplaying' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onplaying' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onplaying\"] = V;\n      }\n    }, {\n      key: \"onprogress\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onprogress' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onprogress\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onprogress' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onprogress' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onprogress\"] = V;\n      }\n    }, {\n      key: \"onratechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onratechange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onratechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onratechange' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onratechange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onratechange\"] = V;\n      }\n    }, {\n      key: \"onreset\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onreset' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onreset\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onreset' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onreset' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onreset\"] = V;\n      }\n    }, {\n      key: \"onresize\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onresize' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onresize\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onresize' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onresize' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onresize\"] = V;\n      }\n    }, {\n      key: \"onscroll\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onscroll' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onscroll\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onscroll' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onscroll' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onscroll\"] = V;\n      }\n    }, {\n      key: \"onsecuritypolicyviolation\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onsecuritypolicyviolation' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onsecuritypolicyviolation\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onsecuritypolicyviolation' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onsecuritypolicyviolation' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onsecuritypolicyviolation\"] = V;\n      }\n    }, {\n      key: \"onseeked\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onseeked' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onseeked\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onseeked' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onseeked' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onseeked\"] = V;\n      }\n    }, {\n      key: \"onseeking\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onseeking' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onseeking\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onseeking' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onseeking' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onseeking\"] = V;\n      }\n    }, {\n      key: \"onselect\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onselect' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onselect\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onselect' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onselect' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onselect\"] = V;\n      }\n    }, {\n      key: \"onstalled\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onstalled' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onstalled\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onstalled' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onstalled' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onstalled\"] = V;\n      }\n    }, {\n      key: \"onsubmit\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onsubmit' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onsubmit\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onsubmit' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onsubmit' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onsubmit\"] = V;\n      }\n    }, {\n      key: \"onsuspend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onsuspend' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onsuspend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onsuspend' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onsuspend' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onsuspend\"] = V;\n      }\n    }, {\n      key: \"ontimeupdate\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ontimeupdate' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ontimeupdate\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ontimeupdate' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ontimeupdate' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ontimeupdate\"] = V;\n      }\n    }, {\n      key: \"ontoggle\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ontoggle' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ontoggle\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ontoggle' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ontoggle' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ontoggle\"] = V;\n      }\n    }, {\n      key: \"onvolumechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onvolumechange' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onvolumechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onvolumechange' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onvolumechange' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onvolumechange\"] = V;\n      }\n    }, {\n      key: \"onwaiting\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onwaiting' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onwaiting\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onwaiting' called on an object that is not a valid instance of Document.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onwaiting' property on 'Document': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onwaiting\"] = V;\n      }\n    }, {\n      key: \"activeElement\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get activeElement' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"activeElement\"]);\n      }\n    }, {\n      key: \"children\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get children' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.getSameObject(this, \"children\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"children\"]);\n        });\n      }\n    }, {\n      key: \"firstElementChild\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get firstElementChild' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"firstElementChild\"]);\n      }\n    }, {\n      key: \"lastElementChild\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get lastElementChild' called on an object that is not a valid instance of Document.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"lastElementChild\"]);\n      }\n    }, {\n      key: \"childElementCount\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get childElementCount' called on an object that is not a valid instance of Document.\");\n        }\n\n        return esValue[implSymbol][\"childElementCount\"];\n      }\n    }]);\n\n    return Document;\n  }(globalObject.Node);\n\n  Object.defineProperties(Document.prototype, (_Object$definePropert = {\n    getElementsByTagName: {\n      enumerable: true\n    },\n    getElementsByTagNameNS: {\n      enumerable: true\n    },\n    getElementsByClassName: {\n      enumerable: true\n    },\n    createElement: {\n      enumerable: true\n    },\n    createElementNS: {\n      enumerable: true\n    },\n    createDocumentFragment: {\n      enumerable: true\n    },\n    createTextNode: {\n      enumerable: true\n    },\n    createCDATASection: {\n      enumerable: true\n    },\n    createComment: {\n      enumerable: true\n    },\n    createProcessingInstruction: {\n      enumerable: true\n    },\n    importNode: {\n      enumerable: true\n    },\n    adoptNode: {\n      enumerable: true\n    },\n    createAttribute: {\n      enumerable: true\n    },\n    createAttributeNS: {\n      enumerable: true\n    },\n    createEvent: {\n      enumerable: true\n    },\n    createRange: {\n      enumerable: true\n    },\n    createNodeIterator: {\n      enumerable: true\n    },\n    createTreeWalker: {\n      enumerable: true\n    },\n    getElementsByName: {\n      enumerable: true\n    },\n    open: {\n      enumerable: true\n    },\n    close: {\n      enumerable: true\n    },\n    write: {\n      enumerable: true\n    },\n    writeln: {\n      enumerable: true\n    },\n    hasFocus: {\n      enumerable: true\n    },\n    clear: {\n      enumerable: true\n    },\n    captureEvents: {\n      enumerable: true\n    },\n    releaseEvents: {\n      enumerable: true\n    },\n    getSelection: {\n      enumerable: true\n    },\n    getElementById: {\n      enumerable: true\n    },\n    prepend: {\n      enumerable: true\n    },\n    append: {\n      enumerable: true\n    },\n    replaceChildren: {\n      enumerable: true\n    },\n    querySelector: {\n      enumerable: true\n    },\n    querySelectorAll: {\n      enumerable: true\n    },\n    implementation: {\n      enumerable: true\n    },\n    URL: {\n      enumerable: true\n    },\n    documentURI: {\n      enumerable: true\n    },\n    compatMode: {\n      enumerable: true\n    },\n    characterSet: {\n      enumerable: true\n    },\n    charset: {\n      enumerable: true\n    },\n    inputEncoding: {\n      enumerable: true\n    },\n    contentType: {\n      enumerable: true\n    },\n    doctype: {\n      enumerable: true\n    },\n    documentElement: {\n      enumerable: true\n    },\n    referrer: {\n      enumerable: true\n    },\n    cookie: {\n      enumerable: true\n    },\n    lastModified: {\n      enumerable: true\n    },\n    readyState: {\n      enumerable: true\n    },\n    title: {\n      enumerable: true\n    },\n    dir: {\n      enumerable: true\n    },\n    body: {\n      enumerable: true\n    },\n    head: {\n      enumerable: true\n    },\n    images: {\n      enumerable: true\n    },\n    embeds: {\n      enumerable: true\n    },\n    plugins: {\n      enumerable: true\n    },\n    links: {\n      enumerable: true\n    },\n    forms: {\n      enumerable: true\n    },\n    scripts: {\n      enumerable: true\n    },\n    currentScript: {\n      enumerable: true\n    },\n    defaultView: {\n      enumerable: true\n    },\n    onreadystatechange: {\n      enumerable: true\n    },\n    anchors: {\n      enumerable: true\n    },\n    applets: {\n      enumerable: true\n    },\n    styleSheets: {\n      enumerable: true\n    },\n    hidden: {\n      enumerable: true\n    },\n    visibilityState: {\n      enumerable: true\n    },\n    onvisibilitychange: {\n      enumerable: true\n    },\n    onabort: {\n      enumerable: true\n    },\n    onauxclick: {\n      enumerable: true\n    },\n    onblur: {\n      enumerable: true\n    },\n    oncancel: {\n      enumerable: true\n    },\n    oncanplay: {\n      enumerable: true\n    },\n    oncanplaythrough: {\n      enumerable: true\n    },\n    onchange: {\n      enumerable: true\n    },\n    onclick: {\n      enumerable: true\n    },\n    onclose: {\n      enumerable: true\n    },\n    oncontextmenu: {\n      enumerable: true\n    },\n    oncuechange: {\n      enumerable: true\n    },\n    ondblclick: {\n      enumerable: true\n    },\n    ondrag: {\n      enumerable: true\n    },\n    ondragend: {\n      enumerable: true\n    },\n    ondragenter: {\n      enumerable: true\n    },\n    ondragleave: {\n      enumerable: true\n    },\n    ondragover: {\n      enumerable: true\n    },\n    ondragstart: {\n      enumerable: true\n    },\n    ondrop: {\n      enumerable: true\n    },\n    ondurationchange: {\n      enumerable: true\n    },\n    onemptied: {\n      enumerable: true\n    },\n    onended: {\n      enumerable: true\n    },\n    onerror: {\n      enumerable: true\n    },\n    onfocus: {\n      enumerable: true\n    },\n    oninput: {\n      enumerable: true\n    },\n    oninvalid: {\n      enumerable: true\n    },\n    onkeydown: {\n      enumerable: true\n    },\n    onkeypress: {\n      enumerable: true\n    },\n    onkeyup: {\n      enumerable: true\n    },\n    onload: {\n      enumerable: true\n    },\n    onloadeddata: {\n      enumerable: true\n    },\n    onloadedmetadata: {\n      enumerable: true\n    },\n    onloadend: {\n      enumerable: true\n    },\n    onloadstart: {\n      enumerable: true\n    },\n    onmousedown: {\n      enumerable: true\n    },\n    onmouseenter: {\n      enumerable: true\n    },\n    onmouseleave: {\n      enumerable: true\n    },\n    onmousemove: {\n      enumerable: true\n    },\n    onmouseout: {\n      enumerable: true\n    },\n    onmouseover: {\n      enumerable: true\n    },\n    onmouseup: {\n      enumerable: true\n    },\n    onwheel: {\n      enumerable: true\n    },\n    onpause: {\n      enumerable: true\n    },\n    onplay: {\n      enumerable: true\n    },\n    onplaying: {\n      enumerable: true\n    },\n    onprogress: {\n      enumerable: true\n    },\n    onratechange: {\n      enumerable: true\n    },\n    onreset: {\n      enumerable: true\n    },\n    onresize: {\n      enumerable: true\n    },\n    onscroll: {\n      enumerable: true\n    },\n    onsecuritypolicyviolation: {\n      enumerable: true\n    },\n    onseeked: {\n      enumerable: true\n    },\n    onseeking: {\n      enumerable: true\n    },\n    onselect: {\n      enumerable: true\n    },\n    onstalled: {\n      enumerable: true\n    },\n    onsubmit: {\n      enumerable: true\n    },\n    onsuspend: {\n      enumerable: true\n    },\n    ontimeupdate: {\n      enumerable: true\n    },\n    ontoggle: {\n      enumerable: true\n    },\n    onvolumechange: {\n      enumerable: true\n    },\n    onwaiting: {\n      enumerable: true\n    },\n    activeElement: {\n      enumerable: true\n    },\n    children: {\n      enumerable: true\n    },\n    firstElementChild: {\n      enumerable: true\n    },\n    lastElementChild: {\n      enumerable: true\n    },\n    childElementCount: {\n      enumerable: true\n    }\n  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n    value: \"Document\",\n    configurable: true\n  }), _defineProperty(_Object$definePropert, Symbol.unscopables, {\n    value: {\n      prepend: true,\n      append: true,\n      replaceChildren: true,\n      __proto__: null\n    },\n    configurable: true\n  }), _Object$definePropert));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = Document;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Document\n  });\n};\n\nvar Impl = require(\"../nodes/Document-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
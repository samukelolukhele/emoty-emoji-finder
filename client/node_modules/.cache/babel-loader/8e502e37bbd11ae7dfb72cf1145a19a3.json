{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar TouchEventInit = require(\"./TouchEventInit.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar UIEvent = require(\"./UIEvent.js\");\n\nvar interfaceName = \"TouchEvent\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'TouchEvent'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"TouchEvent\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor TouchEvent is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  UIEvent._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.UIEvent === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate TouchEvent before UIEvent\");\n  }\n\n  var TouchEvent = /*#__PURE__*/function (_globalObject$UIEvent) {\n    _inherits(TouchEvent, _globalObject$UIEvent);\n\n    var _super = _createSuper(TouchEvent);\n\n    function TouchEvent(type) {\n      var _this;\n\n      _classCallCheck(this, TouchEvent);\n\n      if (arguments.length < 1) {\n        throw new TypeError(\"Failed to construct 'TouchEvent': 1 argument required, but only \" + arguments.length + \" present.\");\n      }\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n        curArg = conversions[\"DOMString\"](curArg, {\n          context: \"Failed to construct 'TouchEvent': parameter 1\"\n        });\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n        _curArg = TouchEventInit.convert(_curArg, {\n          context: \"Failed to construct 'TouchEvent': parameter 2\"\n        });\n        args.push(_curArg);\n      }\n      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof TouchEvent ? this.constructor : void 0).prototype), globalObject, args));\n    }\n\n    _createClass(TouchEvent, [{\n      key: \"touches\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get touches' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"touches\"]);\n      }\n    }, {\n      key: \"targetTouches\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get targetTouches' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"targetTouches\"]);\n      }\n    }, {\n      key: \"changedTouches\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get changedTouches' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"changedTouches\"]);\n      }\n    }, {\n      key: \"altKey\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get altKey' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return esValue[implSymbol][\"altKey\"];\n      }\n    }, {\n      key: \"metaKey\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get metaKey' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return esValue[implSymbol][\"metaKey\"];\n      }\n    }, {\n      key: \"ctrlKey\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ctrlKey' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return esValue[implSymbol][\"ctrlKey\"];\n      }\n    }, {\n      key: \"shiftKey\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get shiftKey' called on an object that is not a valid instance of TouchEvent.\");\n        }\n\n        return esValue[implSymbol][\"shiftKey\"];\n      }\n    }]);\n\n    return TouchEvent;\n  }(globalObject.UIEvent);\n\n  Object.defineProperties(TouchEvent.prototype, _defineProperty({\n    touches: {\n      enumerable: true\n    },\n    targetTouches: {\n      enumerable: true\n    },\n    changedTouches: {\n      enumerable: true\n    },\n    altKey: {\n      enumerable: true\n    },\n    metaKey: {\n      enumerable: true\n    },\n    ctrlKey: {\n      enumerable: true\n    },\n    shiftKey: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"TouchEvent\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = TouchEvent;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: TouchEvent\n  });\n};\n\nvar Impl = require(\"../events/TouchEvent-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
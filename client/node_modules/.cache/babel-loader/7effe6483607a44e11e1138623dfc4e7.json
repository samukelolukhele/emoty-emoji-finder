{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/regenerator\");\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"./header-types\"),\n    isForbidden = _require.isForbidden,\n    isForbiddenResponse = _require.isForbiddenResponse,\n    isPrivilegedNoCORSRequest = _require.isPrivilegedNoCORSRequest,\n    isNoCORSSafelistedRequest = _require.isNoCORSSafelistedRequest,\n    isCORSWhitelisted = _require.isCORSWhitelisted;\n\nvar HeaderList = require(\"./header-list\");\n\nfunction assertName(name) {\n  if (!name.match(/^[!#$%&'*+\\-.^`|~\\w]+$/)) {\n    throw new TypeError(\"name is invalid\");\n  }\n}\n\nfunction assertValue(value) {\n  if (value.match(/[\\0\\r\\n]/)) {\n    throw new TypeError(\"value is invalid\");\n  }\n}\n\nvar HeadersImpl = /*#__PURE__*/function (_Symbol$iterator) {\n  function HeadersImpl(globalObject, args) {\n    _classCallCheck(this, HeadersImpl);\n\n    this.guard = \"none\";\n    this.headersList = new HeaderList();\n\n    if (args[0]) {\n      this._fill(args[0]);\n    }\n  }\n\n  _createClass(HeadersImpl, [{\n    key: \"_fill\",\n    value: function _fill(init) {\n      if (Array.isArray(init)) {\n        var _iterator = _createForOfIteratorHelper(init),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var header = _step.value;\n\n            if (header.length !== 2) {\n              throw new TypeError(\"init is invalid\");\n            }\n\n            this.append(header[0], header[1]);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else {\n        for (var _i = 0, _Object$keys = Object.keys(init); _i < _Object$keys.length; _i++) {\n          var key = _Object$keys[_i];\n          this.append(key, init[key]);\n        }\n      }\n    }\n  }, {\n    key: \"has\",\n    value: function has(name) {\n      assertName(name);\n      return this.headersList.contains(name);\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      assertName(name);\n      return this.headersList.get(name);\n    }\n  }, {\n    key: \"_removePrivilegedNoCORSHeaders\",\n    value: function _removePrivilegedNoCORSHeaders() {\n      this.headersList.delete(\"range\");\n    }\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      value = value.trim();\n      assertName(name);\n      assertValue(value);\n\n      switch (this.guard) {\n        case \"immutable\":\n          throw new TypeError(\"Headers is immutable\");\n\n        case \"request\":\n          if (isForbidden(name)) {\n            return;\n          }\n\n          break;\n\n        case \"request-no-cors\":\n          {\n            var temporaryValue = this.get(name);\n\n            if (temporaryValue === null) {\n              temporaryValue = value;\n            } else {\n              temporaryValue += \", \".concat(value);\n            }\n\n            if (!isCORSWhitelisted(name, value)) {\n              return;\n            }\n\n            break;\n          }\n\n        case \"response\":\n          if (isForbiddenResponse(name)) {\n            return;\n          }\n\n          break;\n      }\n\n      this.headersList.append(name, value);\n\n      this._removePrivilegedNoCORSHeaders();\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      value = value.trim();\n      assertName(name);\n      assertValue(value);\n\n      switch (this.guard) {\n        case \"immutable\":\n          throw new TypeError(\"Headers is immutable\");\n\n        case \"request\":\n          if (isForbidden(name)) {\n            return;\n          }\n\n          break;\n\n        case \"request-no-cors\":\n          {\n            if (!isCORSWhitelisted(name, value)) {\n              return;\n            }\n\n            break;\n          }\n\n        case \"response\":\n          if (isForbiddenResponse(name)) {\n            return;\n          }\n\n          break;\n      }\n\n      this.headersList.set(name, value);\n\n      this._removePrivilegedNoCORSHeaders();\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      assertName(name);\n\n      switch (this.guard) {\n        case \"immutable\":\n          throw new TypeError(\"Headers is immutable\");\n\n        case \"request\":\n          if (isForbidden(name)) {\n            return;\n          }\n\n          break;\n\n        case \"request-no-cors\":\n          {\n            if (!isNoCORSSafelistedRequest(name) && !isPrivilegedNoCORSRequest(name)) {\n              return;\n            }\n\n            break;\n          }\n\n        case \"response\":\n          if (isForbiddenResponse(name)) {\n            return;\n          }\n\n          break;\n      }\n\n      this.headersList.delete(name);\n\n      this._removePrivilegedNoCORSHeaders();\n    }\n  }, {\n    key: _Symbol$iterator,\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function value() {\n      var _iterator2, _step2, header;\n\n      return _regeneratorRuntime.wrap(function value$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this.headersList.sortAndCombine());\n              _context.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context.next = 9;\n                break;\n              }\n\n              header = _step2.value;\n              _context.next = 7;\n              return header;\n\n            case 7:\n              _context.next = 3;\n              break;\n\n            case 9:\n              _context.next = 14;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n\n              _iterator2.e(_context.t0);\n\n            case 14:\n              _context.prev = 14;\n\n              _iterator2.f();\n\n              return _context.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, value, this, [[1, 11, 14, 17]]);\n    })\n  }]);\n\n  return HeadersImpl;\n}(Symbol.iterator);\n\nexports.implementation = HeadersImpl;","map":null,"metadata":{},"sourceType":"script"}
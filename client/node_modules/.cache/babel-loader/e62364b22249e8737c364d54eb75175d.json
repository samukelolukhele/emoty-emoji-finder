{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar xnv = require(\"xml-name-validator\");\n\nvar _require = require(\"./constants\"),\n    NAMESPACES = _require.NAMESPACES;\n\nfunction generatePrefix(map, newNamespace, prefixIndex) {\n  var generatedPrefix = \"ns\" + prefixIndex;\n  map[newNamespace] = [generatedPrefix];\n  return generatedPrefix;\n}\n\nfunction preferredPrefixString(map, ns, preferredPrefix) {\n  var candidateList = map[ns];\n\n  if (!candidateList) {\n    return null;\n  }\n\n  if (candidateList.includes(preferredPrefix)) {\n    return preferredPrefix;\n  }\n\n  return candidateList[candidateList.length - 1];\n}\n\nfunction serializeAttributeValue(value\n/* , requireWellFormed*/\n) {\n  if (value === null) {\n    return \"\";\n  } // TODO: Check well-formedness\n\n\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\t/g, \"&#x9;\").replace(/\\n/g, \"&#xA;\").replace(/\\r/g, \"&#xD;\");\n}\n\nfunction serializeAttributes(element, map, localPrefixes, ignoreNamespaceDefAttr, requireWellFormed, refs) {\n  var result = \"\";\n  var namespaceLocalnames = Object.create(null);\n\n  var _iterator = _createForOfIteratorHelper(element.attributes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var attr = _step.value;\n\n      if (requireWellFormed && namespaceLocalnames[attr.namespaceURI] && namespaceLocalnames[attr.namespaceURI].has(attr.localName)) {\n        throw new Error(\"Found duplicated attribute\");\n      }\n\n      if (!namespaceLocalnames[attr.namespaceURI]) {\n        namespaceLocalnames[attr.namespaceURI] = new Set();\n      }\n\n      namespaceLocalnames[attr.namespaceURI].add(attr.localName);\n      var attributeNamespace = attr.namespaceURI;\n      var candidatePrefix = null;\n\n      if (attributeNamespace !== null) {\n        candidatePrefix = preferredPrefixString(map, attributeNamespace, attr.prefix);\n\n        if (attributeNamespace === NAMESPACES.XMLNS) {\n          if (attr.value === NAMESPACES.XML || attr.prefix === null && ignoreNamespaceDefAttr || attr.prefix !== null && localPrefixes[attr.localName] !== attr.value && map[attr.value].includes(attr.localName)) {\n            continue;\n          }\n\n          if (requireWellFormed && attr.value === NAMESPACES.XMLNS) {\n            throw new Error(\"The XMLNS namespace is reserved and cannot be applied as an element's namespace via XML parsing\");\n          }\n\n          if (requireWellFormed && attr.value === \"\") {\n            throw new Error(\"Namespace prefix declarations cannot be used to undeclare a namespace\");\n          }\n\n          if (attr.prefix === \"xmlns\") {\n            candidatePrefix = \"xmlns\";\n          }\n        } else if (candidatePrefix === null) {\n          candidatePrefix = generatePrefix(map, attributeNamespace, refs.prefixIndex++);\n          result += \" xmlns:\".concat(candidatePrefix, \"=\\\"\").concat(serializeAttributeValue(attributeNamespace, requireWellFormed), \"\\\"\");\n        }\n      }\n\n      result += \" \";\n\n      if (candidatePrefix !== null) {\n        result += candidatePrefix + \":\";\n      }\n\n      if (requireWellFormed && (attr.localName.includes(\":\") || !xnv.name(attr.localName) || attr.localName === \"xmlns\" && attributeNamespace === null)) {\n        throw new Error(\"Invalid attribute localName value\");\n      }\n\n      result += \"\".concat(attr.localName, \"=\\\"\").concat(serializeAttributeValue(attr.value, requireWellFormed), \"\\\"\");\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return result;\n}\n\nmodule.exports.preferredPrefixString = preferredPrefixString;\nmodule.exports.generatePrefix = generatePrefix;\nmodule.exports.serializeAttributeValue = serializeAttributeValue;\nmodule.exports.serializeAttributes = serializeAttributes;","map":null,"metadata":{},"sourceType":"script"}
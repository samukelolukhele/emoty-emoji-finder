{"ast":null,"code":"\"use strict\";\n\nexports.removeLeadingAndTrailingHTTPWhitespace = function (string) {\n  return string.replace(/^[\\t\\n\\r ]+/, \"\").replace(/[\\t\\n\\r ]+$/, \"\");\n};\n\nexports.removeTrailingHTTPWhitespace = function (string) {\n  return string.replace(/[\\t\\n\\r ]+$/, \"\");\n};\n\nexports.isHTTPWhitespaceChar = function (char) {\n  return char === \" \" || char === \"\\t\" || char === \"\\n\" || char === \"\\r\";\n};\n\nexports.solelyContainsHTTPTokenCodePoints = function (string) {\n  return /^[!#-'\\*\\+\\x2D\\.0-9A-Z\\^-z\\|~]*$/.test(string);\n};\n\nexports.soleyContainsHTTPQuotedStringTokenCodePoints = function (string) {\n  return /^[\\t -~\\x80-\\xFF]*$/.test(string);\n};\n\nexports.asciiLowercase = function (string) {\n  return string.replace(/[A-Z]/g, function (l) {\n    return l.toLowerCase();\n  });\n}; // This variant only implements it with the extract-value flag set.\n\n\nexports.collectAnHTTPQuotedString = function (input, position) {\n  var value = \"\";\n  position++;\n\n  while (true) {\n    while (position < input.length && input[position] !== \"\\\"\" && input[position] !== \"\\\\\") {\n      value += input[position];\n      ++position;\n    }\n\n    if (position >= input.length) {\n      break;\n    }\n\n    var quoteOrBackslash = input[position];\n    ++position;\n\n    if (quoteOrBackslash === \"\\\\\") {\n      if (position >= input.length) {\n        value += \"\\\\\";\n        break;\n      }\n\n      value += input[position];\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return [value, position];\n};","map":null,"metadata":{},"sourceType":"script"}
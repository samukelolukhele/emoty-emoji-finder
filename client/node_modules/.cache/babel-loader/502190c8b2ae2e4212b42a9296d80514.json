{"ast":null,"code":"\"use strict\";\n/**\n * Provides some utility functions for somewhat efficiently modifying a\n * collection of headers.\n *\n * Note that this class only operates on ByteStrings (which is also why we use\n * toLowerCase internally).\n */\n\nvar _toConsumableArray = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar HeaderList = /*#__PURE__*/function () {\n  function HeaderList() {\n    _classCallCheck(this, HeaderList);\n\n    this.headers = new Map();\n  }\n\n  _createClass(HeaderList, [{\n    key: \"append\",\n    value: function append(name, value) {\n      var existing = this.headers.get(name.toLowerCase());\n\n      if (existing) {\n        name = existing[0].name;\n        existing.push({\n          name: name,\n          value: value\n        });\n      } else {\n        this.headers.set(name.toLowerCase(), [{\n          name: name,\n          value: value\n        }]);\n      }\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(name) {\n      return this.headers.has(name.toLowerCase());\n    }\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      name = name.toLowerCase();\n      var values = this.headers.get(name);\n\n      if (!values) {\n        return null;\n      }\n\n      return values.map(function (h) {\n        return h.value;\n      }).join(\", \");\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(name) {\n      this.headers.delete(name.toLowerCase());\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      var lowerName = name.toLowerCase();\n      this.headers.delete(lowerName);\n      this.headers.set(lowerName, [{\n        name: name,\n        value: value\n      }]);\n    }\n  }, {\n    key: \"sortAndCombine\",\n    value: function sortAndCombine() {\n      var _this = this;\n\n      var names = _toConsumableArray(this.headers.keys()).sort();\n\n      return names.map(function (n) {\n        return [n, _this.get(n)];\n      });\n    }\n  }]);\n\n  return HeaderList;\n}();\n\nmodule.exports = HeaderList;","map":null,"metadata":{},"sourceType":"script"}
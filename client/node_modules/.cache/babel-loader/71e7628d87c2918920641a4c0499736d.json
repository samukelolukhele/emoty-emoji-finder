{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _toConsumableArray = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _require = require(\"./strings\"),\n    isValidFloatingPointNumber = _require.isValidFloatingPointNumber,\n    isValidSimpleColor = _require.isValidSimpleColor,\n    parseFloatingPointNumber = _require.parseFloatingPointNumber,\n    stripLeadingAndTrailingASCIIWhitespace = _require.stripLeadingAndTrailingASCIIWhitespace,\n    stripNewlines = _require.stripNewlines,\n    splitOnCommas = _require.splitOnCommas;\n\nvar _require2 = require(\"./dates-and-times\"),\n    isValidDateString = _require2.isValidDateString,\n    isValidMonthString = _require2.isValidMonthString,\n    isValidTimeString = _require2.isValidTimeString,\n    isValidWeekString = _require2.isValidWeekString,\n    parseLocalDateAndTimeString = _require2.parseLocalDateAndTimeString,\n    serializeNormalizedDateAndTime = _require2.serializeNormalizedDateAndTime;\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar NodeList = require(\"../generated/NodeList\");\n\nvar _require3 = require(\"./internal-constants\"),\n    domSymbolTree = _require3.domSymbolTree;\n\nvar _require4 = require(\"./traversal\"),\n    closest = _require4.closest,\n    firstChildWithLocalName = _require4.firstChildWithLocalName;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require5 = require(\"./namespaces\"),\n    HTML_NS = _require5.HTML_NS; // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled\n\n\nexports.isDisabled = function (formControl) {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" || formControl.localName === \"textarea\") {\n    if (formControl.hasAttributeNS(null, \"disabled\")) {\n      return true;\n    }\n  }\n\n  var e = formControl.parentNode;\n\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttributeNS(null, \"disabled\")) {\n      var firstLegendElementChild = firstChildWithLocalName(e, \"legend\");\n\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n\n    e = e.parentNode;\n  }\n\n  return false;\n}; // https://html.spec.whatwg.org/multipage/forms.html#category-listed\n\n\nvar listedElements = new Set([\"button\", \"fieldset\", \"input\", \"object\", \"output\", \"select\", \"textarea\"]);\n\nexports.isListed = function (formControl) {\n  return listedElements.has(formControl._localName) && formControl.namespaceURI === HTML_NS;\n}; // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n\n\nvar submittableElements = new Set([\"button\", \"input\", \"object\", \"select\", \"textarea\"]);\n\nexports.isSubmittable = function (formControl) {\n  return submittableElements.has(formControl._localName) && formControl.namespaceURI === HTML_NS;\n}; // https://html.spec.whatwg.org/multipage/forms.html#concept-submit-button\n\n\nvar submitButtonInputTypes = new Set([\"submit\", \"image\"]);\n\nexports.isSubmitButton = function (formControl) {\n  return (formControl._localName === \"input\" && submitButtonInputTypes.has(formControl.type) || formControl._localName === \"button\" && formControl.type === \"submit\") && formControl.namespaceURI === HTML_NS;\n}; // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n\n\nvar buttonInputTypes = new Set([].concat(_toConsumableArray(submitButtonInputTypes), [\"reset\", \"button\"]));\n\nexports.isButton = function (formControl) {\n  return (formControl._localName === \"input\" && buttonInputTypes.has(formControl.type) || formControl._localName === \"button\") && formControl.namespaceURI === HTML_NS;\n}; // https://html.spec.whatwg.org/multipage/dom.html#interactive-content-2\n\n\nexports.isInteractiveContent = function (node) {\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  if (node.namespaceURI !== HTML_NS) {\n    return false;\n  }\n\n  if (node.hasAttributeNS(null, \"tabindex\")) {\n    return true;\n  }\n\n  switch (node.localName) {\n    case \"a\":\n      return node.hasAttributeNS(null, \"href\");\n\n    case \"audio\":\n    case \"video\":\n      return node.hasAttributeNS(null, \"controls\");\n\n    case \"img\":\n    case \"object\":\n      return node.hasAttributeNS(null, \"usemap\");\n\n    case \"input\":\n      return node.type !== \"hidden\";\n\n    case \"button\":\n    case \"details\":\n    case \"embed\":\n    case \"iframe\":\n    case \"label\":\n    case \"select\":\n    case \"textarea\":\n      return true;\n  }\n\n  return false;\n}; // https://html.spec.whatwg.org/multipage/forms.html#category-label\n\n\nexports.isLabelable = function (node) {\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  if (node.namespaceURI !== HTML_NS) {\n    return false;\n  }\n\n  switch (node.localName) {\n    case \"button\":\n    case \"meter\":\n    case \"output\":\n    case \"progress\":\n    case \"select\":\n    case \"textarea\":\n      return true;\n\n    case \"input\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = function (labelable) {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n\n  if (!labelable._labels) {\n    var root = labelable.getRootNode({});\n    labelable._labels = NodeList.create(root._globalObject, [], {\n      element: root,\n      query: function query() {\n        var nodes = [];\n\n        var _iterator = _createForOfIteratorHelper(domSymbolTree.treeIterator(root)),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var descendant = _step.value;\n\n            if (descendant.control === labelable) {\n              nodes.push(descendant);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return nodes;\n      }\n    });\n  }\n\n  return labelable._labels;\n}; // https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\n\n\nexports.isValidEmailAddress = function (emailAddress) {\n  var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" + \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" + \"[a-zA-Z0-9])?)*$\"); // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(function (value) {\n      return emailAddressRegExp.test(value);\n    });\n  }\n\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = function (url) {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = function (input, val) {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"datetime-local\":\n      {\n        // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n        var dateAndTime = parseLocalDateAndTimeString(val);\n        val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n        break;\n      }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttributeNS(null, \"multiple\")) {\n        val = val.split(\",\").map(function (token) {\n          return stripLeadingAndTrailingASCIIWhitespace(token);\n        }).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || parseFloatingPointNumber(val) === null) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || parseFloatingPointNumber(val) === null) {\n        var minimum = input._minimum;\n        var maximum = input._maximum;\n        var defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = \"\".concat(defaultValue);\n      } else if (val < input._minimum) {\n        val = \"\".concat(input._minimum);\n      } else if (val > input._maximum) {\n        val = \"\".concat(input._maximum);\n      }\n\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n\n  }\n\n  return val;\n}; // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#form-owner\n// TODO: The spec describes an imperative process for assigning/resetting an element's form\n// owner based on activities involving form-associated elements. This simpler implementation\n// instead calculates the current form owner only when the property is accessed. This is not\n// sufficient to pass all the web platform tests, but is good enough for most purposes. We\n// should eventually update it to use the correct version, though. See\n// https://github.com/whatwg/html/issues/4050 for some discussion.\n\n\nexports.formOwner = function (formControl) {\n  var formAttr = formControl.getAttributeNS(null, \"form\");\n\n  if (formAttr === \"\") {\n    return null;\n  }\n\n  if (formAttr === null) {\n    return closest(formControl, \"form\");\n  }\n\n  var root = formControl.getRootNode({});\n  var firstElementWithId;\n\n  var _iterator2 = _createForOfIteratorHelper(domSymbolTree.treeIterator(root)),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var descendant = _step2.value;\n\n      if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttributeNS(null, \"id\") === formAttr) {\n        firstElementWithId = descendant;\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  if (firstElementWithId && firstElementWithId.namespaceURI === HTML_NS && firstElementWithId.localName === \"form\") {\n    return firstElementWithId;\n  }\n\n  return null;\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar HTMLConstructor_helpers_html_constructor = require(\"../helpers/html-constructor.js\").HTMLConstructor;\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar EventHandlerNonNull = require(\"./EventHandlerNonNull.js\");\n\nvar OnErrorEventHandlerNonNull = require(\"./OnErrorEventHandlerNonNull.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar Element = require(\"./Element.js\");\n\nvar interfaceName = \"HTMLElement\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'HTMLElement'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"HTMLElement\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor HTMLElement is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  Element._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.Element === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate HTMLElement before Element\");\n  }\n\n  var HTMLElement = /*#__PURE__*/function (_globalObject$Element) {\n    _inherits(HTMLElement, _globalObject$Element);\n\n    var _super = _createSuper(HTMLElement);\n\n    function HTMLElement() {\n      var _this;\n\n      _classCallCheck(this, HTMLElement);\n\n      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLElement ? this.constructor : void 0));\n    }\n\n    _createClass(HTMLElement, [{\n      key: \"click\",\n      value: function click() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'click' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol].click();\n      }\n    }, {\n      key: \"focus\",\n      value: function focus() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'focus' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol].focus();\n      }\n    }, {\n      key: \"blur\",\n      value: function blur() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'blur' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol].blur();\n      }\n    }, {\n      key: \"title\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get title' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"title\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set title' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'title' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"title\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"lang\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get lang' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"lang\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set lang' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'lang' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"lang\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"translate\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get translate' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"translate\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set translate' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'translate' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"translate\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"dir\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get dir' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"dir\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set dir' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'dir' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"dir\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"hidden\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get hidden' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].hasAttributeNS(null, \"hidden\");\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set hidden' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'hidden' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          if (V) {\n            esValue[implSymbol].setAttributeNS(null, \"hidden\", \"\");\n          } else {\n            esValue[implSymbol].removeAttributeNS(null, \"hidden\");\n          }\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"accessKey\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get accessKey' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"accesskey\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set accessKey' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'accessKey' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"accesskey\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"draggable\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get draggable' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"draggable\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set draggable' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'draggable' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"draggable\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"offsetParent\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get offsetParent' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"offsetParent\"]);\n      }\n    }, {\n      key: \"offsetTop\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get offsetTop' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol][\"offsetTop\"];\n      }\n    }, {\n      key: \"offsetLeft\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get offsetLeft' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol][\"offsetLeft\"];\n      }\n    }, {\n      key: \"offsetWidth\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get offsetWidth' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol][\"offsetWidth\"];\n      }\n    }, {\n      key: \"offsetHeight\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get offsetHeight' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return esValue[implSymbol][\"offsetHeight\"];\n      }\n    }, {\n      key: \"style\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get style' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.getSameObject(this, \"style\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"style\"]);\n        });\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set style' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        var Q = esValue[\"style\"];\n\n        if (!utils.isObject(Q)) {\n          throw new TypeError(\"Property 'style' is not an object\");\n        }\n\n        Reflect.set(Q, \"cssText\", V);\n      }\n    }, {\n      key: \"onabort\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onabort' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onabort\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onabort' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onabort' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onabort\"] = V;\n      }\n    }, {\n      key: \"onauxclick\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onauxclick' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onauxclick\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onauxclick' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onauxclick' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onauxclick\"] = V;\n      }\n    }, {\n      key: \"onblur\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onblur' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onblur\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onblur' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onblur' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onblur\"] = V;\n      }\n    }, {\n      key: \"oncancel\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncancel' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncancel\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncancel' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncancel' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncancel\"] = V;\n      }\n    }, {\n      key: \"oncanplay\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncanplay' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncanplay\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncanplay' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncanplay' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncanplay\"] = V;\n      }\n    }, {\n      key: \"oncanplaythrough\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncanplaythrough' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncanplaythrough\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncanplaythrough' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncanplaythrough' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncanplaythrough\"] = V;\n      }\n    }, {\n      key: \"onchange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onchange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onchange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onchange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onchange' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onchange\"] = V;\n      }\n    }, {\n      key: \"onclick\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onclick' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onclick\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onclick' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onclick' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onclick\"] = V;\n      }\n    }, {\n      key: \"onclose\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onclose' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onclose\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onclose' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onclose' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onclose\"] = V;\n      }\n    }, {\n      key: \"oncontextmenu\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncontextmenu' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncontextmenu\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncontextmenu' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncontextmenu' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncontextmenu\"] = V;\n      }\n    }, {\n      key: \"oncuechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oncuechange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oncuechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oncuechange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oncuechange' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oncuechange\"] = V;\n      }\n    }, {\n      key: \"ondblclick\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondblclick' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondblclick\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondblclick' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondblclick' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondblclick\"] = V;\n      }\n    }, {\n      key: \"ondrag\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondrag' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondrag\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondrag' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondrag' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondrag\"] = V;\n      }\n    }, {\n      key: \"ondragend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragend' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragend' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragend' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragend\"] = V;\n      }\n    }, {\n      key: \"ondragenter\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragenter' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragenter\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragenter' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragenter' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragenter\"] = V;\n      }\n    }, {\n      key: \"ondragleave\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragleave' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragleave\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragleave' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragleave' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragleave\"] = V;\n      }\n    }, {\n      key: \"ondragover\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragover' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragover\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragover' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragover' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragover\"] = V;\n      }\n    }, {\n      key: \"ondragstart\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondragstart' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondragstart\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondragstart' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondragstart' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondragstart\"] = V;\n      }\n    }, {\n      key: \"ondrop\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondrop' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondrop\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondrop' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondrop' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondrop\"] = V;\n      }\n    }, {\n      key: \"ondurationchange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ondurationchange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ondurationchange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ondurationchange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ondurationchange' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ondurationchange\"] = V;\n      }\n    }, {\n      key: \"onemptied\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onemptied' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onemptied\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onemptied' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onemptied' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onemptied\"] = V;\n      }\n    }, {\n      key: \"onended\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onended' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onended\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onended' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onended' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onended\"] = V;\n      }\n    }, {\n      key: \"onerror\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onerror' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onerror\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onerror' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = OnErrorEventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onerror' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onerror\"] = V;\n      }\n    }, {\n      key: \"onfocus\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onfocus' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onfocus\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onfocus' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onfocus' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onfocus\"] = V;\n      }\n    }, {\n      key: \"oninput\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oninput' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oninput\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oninput' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oninput' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oninput\"] = V;\n      }\n    }, {\n      key: \"oninvalid\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get oninvalid' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"oninvalid\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set oninvalid' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'oninvalid' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"oninvalid\"] = V;\n      }\n    }, {\n      key: \"onkeydown\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onkeydown' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onkeydown\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onkeydown' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onkeydown' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onkeydown\"] = V;\n      }\n    }, {\n      key: \"onkeypress\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onkeypress' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onkeypress\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onkeypress' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onkeypress' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onkeypress\"] = V;\n      }\n    }, {\n      key: \"onkeyup\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onkeyup' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onkeyup\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onkeyup' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onkeyup' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onkeyup\"] = V;\n      }\n    }, {\n      key: \"onload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onload' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onload' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onload' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onload\"] = V;\n      }\n    }, {\n      key: \"onloadeddata\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadeddata' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadeddata\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadeddata' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadeddata' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadeddata\"] = V;\n      }\n    }, {\n      key: \"onloadedmetadata\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadedmetadata' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadedmetadata\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadedmetadata' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadedmetadata' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadedmetadata\"] = V;\n      }\n    }, {\n      key: \"onloadend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadend' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadend' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadend' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadend\"] = V;\n      }\n    }, {\n      key: \"onloadstart\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadstart' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadstart\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadstart' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadstart' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadstart\"] = V;\n      }\n    }, {\n      key: \"onmousedown\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmousedown' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmousedown\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmousedown' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmousedown' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmousedown\"] = V;\n      }\n    }, {\n      key: \"onmouseenter\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseenter\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseenter' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseenter\"] = V;\n      }\n    }, {\n      key: \"onmouseleave\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseleave\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          return;\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseleave' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseleave\"] = V;\n      }\n    }, {\n      key: \"onmousemove\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmousemove' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmousemove\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmousemove' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmousemove' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmousemove\"] = V;\n      }\n    }, {\n      key: \"onmouseout\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmouseout' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseout\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmouseout' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseout' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseout\"] = V;\n      }\n    }, {\n      key: \"onmouseover\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmouseover' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseover\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmouseover' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseover' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseover\"] = V;\n      }\n    }, {\n      key: \"onmouseup\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onmouseup' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onmouseup\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onmouseup' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onmouseup' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onmouseup\"] = V;\n      }\n    }, {\n      key: \"onwheel\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onwheel' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onwheel\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onwheel' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onwheel' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onwheel\"] = V;\n      }\n    }, {\n      key: \"onpause\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onpause' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onpause\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onpause' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onpause' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onpause\"] = V;\n      }\n    }, {\n      key: \"onplay\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onplay' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onplay\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onplay' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onplay' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onplay\"] = V;\n      }\n    }, {\n      key: \"onplaying\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onplaying' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onplaying\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onplaying' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onplaying' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onplaying\"] = V;\n      }\n    }, {\n      key: \"onprogress\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onprogress' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onprogress\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onprogress' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onprogress' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onprogress\"] = V;\n      }\n    }, {\n      key: \"onratechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onratechange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onratechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onratechange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onratechange' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onratechange\"] = V;\n      }\n    }, {\n      key: \"onreset\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onreset' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onreset\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onreset' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onreset' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onreset\"] = V;\n      }\n    }, {\n      key: \"onresize\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onresize' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onresize\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onresize' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onresize' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onresize\"] = V;\n      }\n    }, {\n      key: \"onscroll\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onscroll' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onscroll\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onscroll' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onscroll' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onscroll\"] = V;\n      }\n    }, {\n      key: \"onsecuritypolicyviolation\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onsecuritypolicyviolation' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onsecuritypolicyviolation\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onsecuritypolicyviolation' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onsecuritypolicyviolation' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onsecuritypolicyviolation\"] = V;\n      }\n    }, {\n      key: \"onseeked\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onseeked' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onseeked\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onseeked' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onseeked' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onseeked\"] = V;\n      }\n    }, {\n      key: \"onseeking\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onseeking' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onseeking\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onseeking' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onseeking' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onseeking\"] = V;\n      }\n    }, {\n      key: \"onselect\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onselect' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onselect\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onselect' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onselect' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onselect\"] = V;\n      }\n    }, {\n      key: \"onstalled\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onstalled' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onstalled\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onstalled' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onstalled' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onstalled\"] = V;\n      }\n    }, {\n      key: \"onsubmit\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onsubmit' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onsubmit\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onsubmit' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onsubmit' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onsubmit\"] = V;\n      }\n    }, {\n      key: \"onsuspend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onsuspend' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onsuspend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onsuspend' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onsuspend' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onsuspend\"] = V;\n      }\n    }, {\n      key: \"ontimeupdate\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ontimeupdate' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ontimeupdate\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ontimeupdate' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ontimeupdate' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ontimeupdate\"] = V;\n      }\n    }, {\n      key: \"ontoggle\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ontoggle' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ontoggle\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ontoggle' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ontoggle' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ontoggle\"] = V;\n      }\n    }, {\n      key: \"onvolumechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onvolumechange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onvolumechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onvolumechange' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onvolumechange' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onvolumechange\"] = V;\n      }\n    }, {\n      key: \"onwaiting\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onwaiting' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onwaiting\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onwaiting' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onwaiting' property on 'HTMLElement': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onwaiting\"] = V;\n      }\n    }, {\n      key: \"dataset\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get dataset' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        return utils.getSameObject(this, \"dataset\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"dataset\"]);\n        });\n      }\n    }, {\n      key: \"nonce\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get nonce' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        var value = esValue[implSymbol].getAttributeNS(null, \"nonce\");\n        return value === null ? \"\" : value;\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set nonce' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'nonce' property on 'HTMLElement': The provided value\"\n        });\n        esValue[implSymbol].setAttributeNS(null, \"nonce\", V);\n      }\n    }, {\n      key: \"tabIndex\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get tabIndex' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"tabIndex\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set tabIndex' called on an object that is not a valid instance of HTMLElement.\");\n        }\n\n        V = conversions[\"long\"](V, {\n          context: \"Failed to set the 'tabIndex' property on 'HTMLElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"tabIndex\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }]);\n\n    return HTMLElement;\n  }(globalObject.Element);\n\n  Object.defineProperties(HTMLElement.prototype, _defineProperty({\n    click: {\n      enumerable: true\n    },\n    focus: {\n      enumerable: true\n    },\n    blur: {\n      enumerable: true\n    },\n    title: {\n      enumerable: true\n    },\n    lang: {\n      enumerable: true\n    },\n    translate: {\n      enumerable: true\n    },\n    dir: {\n      enumerable: true\n    },\n    hidden: {\n      enumerable: true\n    },\n    accessKey: {\n      enumerable: true\n    },\n    draggable: {\n      enumerable: true\n    },\n    offsetParent: {\n      enumerable: true\n    },\n    offsetTop: {\n      enumerable: true\n    },\n    offsetLeft: {\n      enumerable: true\n    },\n    offsetWidth: {\n      enumerable: true\n    },\n    offsetHeight: {\n      enumerable: true\n    },\n    style: {\n      enumerable: true\n    },\n    onabort: {\n      enumerable: true\n    },\n    onauxclick: {\n      enumerable: true\n    },\n    onblur: {\n      enumerable: true\n    },\n    oncancel: {\n      enumerable: true\n    },\n    oncanplay: {\n      enumerable: true\n    },\n    oncanplaythrough: {\n      enumerable: true\n    },\n    onchange: {\n      enumerable: true\n    },\n    onclick: {\n      enumerable: true\n    },\n    onclose: {\n      enumerable: true\n    },\n    oncontextmenu: {\n      enumerable: true\n    },\n    oncuechange: {\n      enumerable: true\n    },\n    ondblclick: {\n      enumerable: true\n    },\n    ondrag: {\n      enumerable: true\n    },\n    ondragend: {\n      enumerable: true\n    },\n    ondragenter: {\n      enumerable: true\n    },\n    ondragleave: {\n      enumerable: true\n    },\n    ondragover: {\n      enumerable: true\n    },\n    ondragstart: {\n      enumerable: true\n    },\n    ondrop: {\n      enumerable: true\n    },\n    ondurationchange: {\n      enumerable: true\n    },\n    onemptied: {\n      enumerable: true\n    },\n    onended: {\n      enumerable: true\n    },\n    onerror: {\n      enumerable: true\n    },\n    onfocus: {\n      enumerable: true\n    },\n    oninput: {\n      enumerable: true\n    },\n    oninvalid: {\n      enumerable: true\n    },\n    onkeydown: {\n      enumerable: true\n    },\n    onkeypress: {\n      enumerable: true\n    },\n    onkeyup: {\n      enumerable: true\n    },\n    onload: {\n      enumerable: true\n    },\n    onloadeddata: {\n      enumerable: true\n    },\n    onloadedmetadata: {\n      enumerable: true\n    },\n    onloadend: {\n      enumerable: true\n    },\n    onloadstart: {\n      enumerable: true\n    },\n    onmousedown: {\n      enumerable: true\n    },\n    onmouseenter: {\n      enumerable: true\n    },\n    onmouseleave: {\n      enumerable: true\n    },\n    onmousemove: {\n      enumerable: true\n    },\n    onmouseout: {\n      enumerable: true\n    },\n    onmouseover: {\n      enumerable: true\n    },\n    onmouseup: {\n      enumerable: true\n    },\n    onwheel: {\n      enumerable: true\n    },\n    onpause: {\n      enumerable: true\n    },\n    onplay: {\n      enumerable: true\n    },\n    onplaying: {\n      enumerable: true\n    },\n    onprogress: {\n      enumerable: true\n    },\n    onratechange: {\n      enumerable: true\n    },\n    onreset: {\n      enumerable: true\n    },\n    onresize: {\n      enumerable: true\n    },\n    onscroll: {\n      enumerable: true\n    },\n    onsecuritypolicyviolation: {\n      enumerable: true\n    },\n    onseeked: {\n      enumerable: true\n    },\n    onseeking: {\n      enumerable: true\n    },\n    onselect: {\n      enumerable: true\n    },\n    onstalled: {\n      enumerable: true\n    },\n    onsubmit: {\n      enumerable: true\n    },\n    onsuspend: {\n      enumerable: true\n    },\n    ontimeupdate: {\n      enumerable: true\n    },\n    ontoggle: {\n      enumerable: true\n    },\n    onvolumechange: {\n      enumerable: true\n    },\n    onwaiting: {\n      enumerable: true\n    },\n    dataset: {\n      enumerable: true\n    },\n    nonce: {\n      enumerable: true\n    },\n    tabIndex: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"HTMLElement\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = HTMLElement;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: HTMLElement\n  });\n};\n\nvar Impl = require(\"../nodes/HTMLElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
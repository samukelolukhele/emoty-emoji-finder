{"ast":null,"code":"\"use strict\";\n/**\n * Queue for all the resources to be download except async scripts.\n * Async scripts have their own queue AsyncResourceQueue.\n */\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nmodule.exports = /*#__PURE__*/function () {\n  function ResourceQueue() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        paused = _ref.paused,\n        asyncQueue = _ref.asyncQueue;\n\n    _classCallCheck(this, ResourceQueue);\n\n    this.paused = Boolean(paused);\n    this._asyncQueue = asyncQueue;\n  }\n\n  _createClass(ResourceQueue, [{\n    key: \"getLastScript\",\n    value: function getLastScript() {\n      var head = this.tail;\n\n      while (head) {\n        if (head.isScript) {\n          return head;\n        }\n\n        head = head.prev;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_moreScripts\",\n    value: function _moreScripts() {\n      var found = false;\n      var head = this.tail;\n\n      while (head && !found) {\n        found = head.isScript;\n        head = head.prev;\n      }\n\n      return found;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify() {\n      if (this._listener) {\n        this._listener();\n      }\n    }\n  }, {\n    key: \"setListener\",\n    value: function setListener(listener) {\n      this._listener = listener;\n    }\n  }, {\n    key: \"push\",\n    value: function push(request, onLoad, onError, keepLast, element) {\n      var isScript = element ? element.localName === \"script\" : false;\n\n      if (!request) {\n        if (isScript && !this._moreScripts()) {\n          return onLoad();\n        }\n\n        request = Promise.resolve();\n      }\n\n      var q = this;\n      var item = {\n        isScript: isScript,\n        err: null,\n        element: element,\n        fired: false,\n        data: null,\n        keepLast: keepLast,\n        prev: q.tail,\n        check: function check() {\n          var _this = this;\n\n          if (!q.paused && !this.prev && this.fired) {\n            var promise;\n\n            if (this.err && onError) {\n              promise = onError(this.err);\n            }\n\n            if (!this.err && onLoad) {\n              promise = onLoad(this.data);\n            }\n\n            Promise.resolve(promise).then(function () {\n              if (_this.next) {\n                _this.next.prev = null;\n\n                _this.next.check();\n              } else {\n                // q.tail===this\n                q.tail = null;\n\n                q._notify();\n              }\n\n              _this.finished = true;\n\n              if (q._asyncQueue) {\n                q._asyncQueue.notifyItem(_this);\n              }\n            });\n          }\n        }\n      };\n\n      if (q.tail) {\n        if (q.tail.keepLast) {\n          // if the tail is the load event in document and we receive a new element to load\n          // we should add this new request before the load event.\n          if (q.tail.prev) {\n            q.tail.prev.next = item;\n          }\n\n          item.prev = q.tail.prev;\n          q.tail.prev = item;\n          item.next = q.tail;\n        } else {\n          q.tail.next = item;\n          q.tail = item;\n        }\n      } else {\n        q.tail = item;\n      }\n\n      return request.then(function (data) {\n        item.fired = 1;\n        item.data = data;\n        item.check();\n      }).catch(function (err) {\n        item.fired = true;\n        item.err = err;\n        item.check();\n      });\n    }\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      if (!this.paused) {\n        return;\n      }\n\n      this.paused = false;\n      var head = this.tail;\n\n      while (head && head.prev) {\n        head = head.prev;\n      }\n\n      if (head) {\n        head.check();\n      }\n    }\n  }]);\n\n  return ResourceQueue;\n}();","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require.domSymbolTree;\n\nvar _require2 = require(\"../helpers/node\"),\n    nodeRoot = _require2.nodeRoot,\n    isFollowing = _require2.isFollowing,\n    isInclusiveAncestor = _require2.isInclusiveAncestor; // Returns 0 if equal, +1 for after and -1 for before\n// https://dom.spec.whatwg.org/#concept-range-bp-after\n\n\nfunction compareBoundaryPointsPosition(bpA, bpB) {\n  var nodeA = bpA.node,\n      offsetA = bpA.offset;\n  var nodeB = bpB.node,\n      offsetB = bpB.offset;\n\n  if (nodeRoot(nodeA) !== nodeRoot(nodeB)) {\n    throw new Error(\"Internal Error: Boundary points should have the same root!\");\n  }\n\n  if (nodeA === nodeB) {\n    if (offsetA === offsetB) {\n      return 0;\n    } else if (offsetA < offsetB) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (isFollowing(nodeA, nodeB)) {\n    return compareBoundaryPointsPosition(bpB, bpA) === -1 ? 1 : -1;\n  }\n\n  if (isInclusiveAncestor(nodeA, nodeB)) {\n    var child = nodeB;\n\n    while (domSymbolTree.parent(child) !== nodeA) {\n      child = domSymbolTree.parent(child);\n    }\n\n    if (domSymbolTree.index(child) < offsetA) {\n      return 1;\n    }\n  }\n\n  return -1;\n}\n\nmodule.exports = {\n  compareBoundaryPointsPosition: compareBoundaryPointsPosition\n};","map":null,"metadata":{},"sourceType":"script"}
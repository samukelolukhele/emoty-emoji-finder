{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"../namespaces\"),\n    SVG_NS = _require.SVG_NS; // https://svgwg.org/svg2-draft/render.html#TermNeverRenderedElement\n\n\nvar neverRenderedElements = new Set([\"clipPath\", \"defs\", \"desc\", \"linearGradient\", \"marker\", \"mask\", \"metadata\", \"pattern\", \"radialGradient\", \"script\", \"style\", \"title\", \"symbol\"]); // https://svgwg.org/svg2-draft/render.html#Rendered-vs-NonRendered\n\nexports.isRenderedElement = function (elImpl) {\n  if (neverRenderedElements.has(elImpl._localName)) {\n    return false;\n  } // This does not check for elements excluded because of conditional processing attributes or ‘switch’ structures,\n  // because conditional processing is not implemented.\n  // https://svgwg.org/svg2-draft/struct.html#ConditionalProcessing\n  // This does not check for computed style of display being none, since that is not yet implemented for HTML\n  // focusability either (and there are no tests yet).\n\n\n  if (!elImpl.isConnected) {\n    return false;\n  } // The spec is unclear about how to deal with non-SVG parents, so we only perform this check for SVG-namespace\n  // parents.\n\n\n  if (elImpl.parentElement && elImpl.parentElement._namespaceURI === SVG_NS && !exports.isRenderedElement(elImpl.parentNode)) {\n    return false;\n  }\n\n  return true;\n};","map":null,"metadata":{},"sourceType":"script"}
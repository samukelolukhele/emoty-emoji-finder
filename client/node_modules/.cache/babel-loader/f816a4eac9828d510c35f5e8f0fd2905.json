{"ast":null,"code":"\"use strict\"; // Returns \"Type(value) is Object\" in ES terminology.\n\nvar _slicedToArray = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/wrapAsyncGenerator\");\n\nfunction isObject(value) {\n  return typeof value === \"object\" && value !== null || typeof value === \"function\";\n}\n\nvar hasOwn = Function.prototype.call.bind(Object.prototype.hasOwnProperty);\nvar wrapperSymbol = Symbol(\"wrapper\");\nvar implSymbol = Symbol(\"impl\");\nvar sameObjectCaches = Symbol(\"SameObject caches\");\nvar ctorRegistrySymbol = Symbol.for(\"[webidl2js]  constructor registry\");\n\nfunction getSameObject(wrapper, prop, creator) {\n  if (!wrapper[sameObjectCaches]) {\n    wrapper[sameObjectCaches] = Object.create(null);\n  }\n\n  if (prop in wrapper[sameObjectCaches]) {\n    return wrapper[sameObjectCaches][prop];\n  }\n\n  wrapper[sameObjectCaches][prop] = creator();\n  return wrapper[sameObjectCaches][prop];\n}\n\nfunction wrapperForImpl(impl) {\n  return impl ? impl[wrapperSymbol] : null;\n}\n\nfunction implForWrapper(wrapper) {\n  return wrapper ? wrapper[implSymbol] : null;\n}\n\nfunction tryWrapperForImpl(impl) {\n  var wrapper = wrapperForImpl(impl);\n  return wrapper ? wrapper : impl;\n}\n\nfunction tryImplForWrapper(wrapper) {\n  var impl = implForWrapper(wrapper);\n  return impl ? impl : wrapper;\n}\n\nvar iterInternalSymbol = Symbol(\"internal\");\nvar IteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));\nvar AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf( /*#__PURE__*/_wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}))).prototype);\n\nfunction isArrayIndexPropName(P) {\n  if (typeof P !== \"string\") {\n    return false;\n  }\n\n  var i = P >>> 0;\n\n  if (i === Math.pow(2, 32) - 1) {\n    return false;\n  }\n\n  var s = \"\".concat(i);\n\n  if (P !== s) {\n    return false;\n  }\n\n  return true;\n}\n\nvar byteLengthGetter = Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, \"byteLength\").get;\n\nfunction isArrayBuffer(value) {\n  try {\n    byteLengthGetter.call(value);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction iteratorResult(_ref2, kind) {\n  var _ref3 = _slicedToArray(_ref2, 2),\n      key = _ref3[0],\n      value = _ref3[1];\n\n  var result;\n\n  switch (kind) {\n    case \"key\":\n      result = key;\n      break;\n\n    case \"value\":\n      result = value;\n      break;\n\n    case \"key+value\":\n      result = [key, value];\n      break;\n  }\n\n  return {\n    value: result,\n    done: false\n  };\n}\n\nvar supportsPropertyIndex = Symbol(\"supports property index\");\nvar supportedPropertyIndices = Symbol(\"supported property indices\");\nvar supportsPropertyName = Symbol(\"supports property name\");\nvar supportedPropertyNames = Symbol(\"supported property names\");\nvar indexedGet = Symbol(\"indexed property get\");\nvar indexedSetNew = Symbol(\"indexed property set new\");\nvar indexedSetExisting = Symbol(\"indexed property set existing\");\nvar namedGet = Symbol(\"named property get\");\nvar namedSetNew = Symbol(\"named property set new\");\nvar namedSetExisting = Symbol(\"named property set existing\");\nvar namedDelete = Symbol(\"named property delete\");\nvar asyncIteratorNext = Symbol(\"async iterator get the next iteration result\");\nvar asyncIteratorReturn = Symbol(\"async iterator return steps\");\nvar asyncIteratorInit = Symbol(\"async iterator initialization steps\");\nvar asyncIteratorEOI = Symbol(\"async iterator end of iteration\");\nmodule.exports = exports = {\n  isObject: isObject,\n  hasOwn: hasOwn,\n  wrapperSymbol: wrapperSymbol,\n  implSymbol: implSymbol,\n  getSameObject: getSameObject,\n  ctorRegistrySymbol: ctorRegistrySymbol,\n  wrapperForImpl: wrapperForImpl,\n  implForWrapper: implForWrapper,\n  tryWrapperForImpl: tryWrapperForImpl,\n  tryImplForWrapper: tryImplForWrapper,\n  iterInternalSymbol: iterInternalSymbol,\n  IteratorPrototype: IteratorPrototype,\n  AsyncIteratorPrototype: AsyncIteratorPrototype,\n  isArrayBuffer: isArrayBuffer,\n  isArrayIndexPropName: isArrayIndexPropName,\n  supportsPropertyIndex: supportsPropertyIndex,\n  supportedPropertyIndices: supportedPropertyIndices,\n  supportsPropertyName: supportsPropertyName,\n  supportedPropertyNames: supportedPropertyNames,\n  indexedGet: indexedGet,\n  indexedSetNew: indexedSetNew,\n  indexedSetExisting: indexedSetExisting,\n  namedGet: namedGet,\n  namedSetNew: namedSetNew,\n  namedSetExisting: namedSetExisting,\n  namedDelete: namedDelete,\n  asyncIteratorNext: asyncIteratorNext,\n  asyncIteratorReturn: asyncIteratorReturn,\n  asyncIteratorInit: asyncIteratorInit,\n  asyncIteratorEOI: asyncIteratorEOI,\n  iteratorResult: iteratorResult\n};","map":null,"metadata":{},"sourceType":"script"}
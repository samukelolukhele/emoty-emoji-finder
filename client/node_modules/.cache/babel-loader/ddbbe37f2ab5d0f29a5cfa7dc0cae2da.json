{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"../helpers/namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nexports.implementation = /*#__PURE__*/function (_idlUtils$supportedPr, _idlUtils$supportedPr2, _Symbol$iterator) {\n  function HTMLCollectionImpl(globalObject, args, privateData) {\n    _classCallCheck(this, HTMLCollectionImpl);\n\n    this._list = [];\n    this._version = -1;\n    this._element = privateData.element;\n    this._query = privateData.query;\n    this._globalObject = globalObject;\n\n    this._update();\n  }\n\n  _createClass(HTMLCollectionImpl, [{\n    key: \"length\",\n    get: function get() {\n      this._update();\n\n      return this._list.length;\n    }\n  }, {\n    key: \"item\",\n    value: function item(index) {\n      this._update();\n\n      return this._list[index] || null;\n    }\n  }, {\n    key: \"namedItem\",\n    value: function namedItem(key) {\n      if (key === \"\") {\n        return null;\n      }\n\n      this._update();\n\n      var _iterator = _createForOfIteratorHelper(this._list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var element = _step.value;\n\n          if (element.getAttributeNS(null, \"id\") === key) {\n            return element;\n          }\n\n          if (element._namespaceURI === HTML_NS) {\n            var name = element.getAttributeNS(null, \"name\");\n\n            if (name === key) {\n              return element;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      if (this._version < this._element._version) {\n        var snapshot = this._query();\n\n        for (var i = 0; i < snapshot.length; i++) {\n          this._list[i] = snapshot[i];\n        }\n\n        this._list.length = snapshot.length;\n        this._version = this._element._version;\n      }\n    }\n  }, {\n    key: _idlUtils$supportedPr,\n    get: function get() {\n      this._update();\n\n      return this._list.keys();\n    }\n  }, {\n    key: _idlUtils$supportedPr2,\n    get: function get() {\n      this._update();\n\n      var result = new Set();\n\n      var _iterator2 = _createForOfIteratorHelper(this._list),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var element = _step2.value;\n          var id = element.getAttributeNS(null, \"id\");\n\n          if (id) {\n            result.add(id);\n          }\n\n          if (element._namespaceURI === HTML_NS) {\n            var name = element.getAttributeNS(null, \"name\");\n\n            if (name) {\n              result.add(name);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return result;\n    } // Inherit some useful functions from Array.\n\n  }, {\n    key: _Symbol$iterator,\n    value: function value() {\n      this._update();\n\n      return this._list[Symbol.iterator]();\n    }\n  }, {\n    key: \"entries\",\n    value: function entries() {\n      this._update();\n\n      return this._list.entries();\n    }\n  }, {\n    key: \"filter\",\n    value: function filter() {\n      var _this$_list;\n\n      this._update();\n\n      return (_this$_list = this._list).filter.apply(_this$_list, arguments);\n    }\n  }, {\n    key: \"map\",\n    value: function map() {\n      var _this$_list2;\n\n      this._update();\n\n      return (_this$_list2 = this._list).map.apply(_this$_list2, arguments);\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf() {\n      var _this$_list3;\n\n      this._update();\n\n      return (_this$_list3 = this._list).indexOf.apply(_this$_list3, arguments);\n    }\n  }]);\n\n  return HTMLCollectionImpl;\n}(idlUtils.supportedPropertyIndices, idlUtils.supportedPropertyNames, Symbol.iterator);","map":null,"metadata":{},"sourceType":"script"}
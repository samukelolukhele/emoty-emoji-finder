{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _toConsumableArray = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar FileList = require(\"../generated/FileList\");\n\nvar Decimal = require(\"decimal.js\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree,\n    cloningSteps = _require2.cloningSteps;\n\nvar _require3 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require3.getLabelsForLabelable,\n    formOwner = _require3.formOwner;\n\nvar _require4 = require(\"../helpers/events\"),\n    fireAnEvent = _require4.fireAnEvent;\n\nvar _require5 = require(\"../helpers/form-controls\"),\n    isDisabled = _require5.isDisabled,\n    isValidEmailAddress = _require5.isValidEmailAddress,\n    isValidAbsoluteURL = _require5.isValidAbsoluteURL,\n    sanitizeValueByType = _require5.sanitizeValueByType;\n\nvar _require6 = require(\"../helpers/strings\"),\n    asciiCaseInsensitiveMatch = _require6.asciiCaseInsensitiveMatch,\n    asciiLowercase = _require6.asciiLowercase,\n    parseFloatingPointNumber = _require6.parseFloatingPointNumber,\n    splitOnCommas = _require6.splitOnCommas;\n\nvar _require7 = require(\"../helpers/dates-and-times\"),\n    isDate = _require7.isDate;\n\nvar _require8 = require(\"../helpers/number-and-date-inputs\"),\n    convertStringToNumberByType = _require8.convertStringToNumberByType,\n    convertStringToDateByType = _require8.convertStringToDateByType,\n    serializeDateByType = _require8.serializeDateByType,\n    convertNumberToStringByType = _require8.convertNumberToStringByType;\n\nvar filesSymbol = Symbol(\"files\"); // https://html.spec.whatwg.org/multipage/input.html#attr-input-type\n\nvar inputAllowedTypes = new Set([\"hidden\", \"text\", \"search\", \"tel\", \"url\", \"email\", \"password\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\", \"color\", \"checkbox\", \"radio\", \"file\", \"submit\", \"image\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#concept-input-apply\n\nvar variableLengthSelectionAllowedTypes = new Set([\"text\", \"search\", \"url\", \"tel\", \"password\"]);\nvar numericTypes = new Set([\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"range\"]);\nvar applicableTypesForIDLMember = {\n  valueAsDate: new Set([\"date\", \"month\", \"week\", \"time\"]),\n  valueAsNumber: numericTypes,\n  select: new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", \"password\", \"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\", \"color\", \"file\"]),\n  selectionStart: variableLengthSelectionAllowedTypes,\n  selectionEnd: variableLengthSelectionAllowedTypes,\n  selectionDirection: variableLengthSelectionAllowedTypes,\n  setRangeText: variableLengthSelectionAllowedTypes,\n  setSelectionRange: variableLengthSelectionAllowedTypes,\n  stepDown: numericTypes,\n  stepUp: numericTypes\n};\nvar lengthPatternSizeTypes = new Set([\"text\", \"search\", \"url\", \"tel\", \"email\", \"password\"]);\nvar readonlyTypes = new Set([].concat(_toConsumableArray(lengthPatternSizeTypes), [\"date\", \"month\", \"week\", \"time\", \"datetime-local\", \"number\"]));\nvar applicableTypesForContentAttribute = {\n  list: new Set([\"text\", \"search\", \"url\", \"tel\", \"email\"].concat(_toConsumableArray(numericTypes), [\"color\"])),\n  max: numericTypes,\n  maxlength: lengthPatternSizeTypes,\n  min: numericTypes,\n  minlength: lengthPatternSizeTypes,\n  multiple: new Set([\"email\", \"file\"]),\n  pattern: lengthPatternSizeTypes,\n  readonly: readonlyTypes,\n  required: new Set([].concat(_toConsumableArray(readonlyTypes), [\"checkbox\", \"radio\", \"file\"])),\n  step: numericTypes\n};\nvar valueAttributeDefaultMode = new Set([\"hidden\", \"submit\", \"image\", \"reset\", \"button\"]);\nvar valueAttributeDefaultOnMode = new Set([\"checkbox\", \"radio\"]);\n\nfunction valueAttributeMode(type) {\n  if (valueAttributeDefaultMode.has(type)) {\n    return \"default\";\n  }\n\n  if (valueAttributeDefaultOnMode.has(type)) {\n    return \"default/on\";\n  }\n\n  if (type === \"file\") {\n    return \"filename\";\n  }\n\n  return \"value\";\n}\n\nfunction getTypeFromAttribute(typeAttribute) {\n  if (typeof typeAttribute !== \"string\") {\n    return \"text\";\n  }\n\n  var type = asciiLowercase(typeAttribute);\n  return inputAllowedTypes.has(type) ? type : \"text\";\n}\n\nvar HTMLInputElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLInputElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLInputElementImpl);\n\n  function HTMLInputElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLInputElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this._selectionStart = _this._selectionEnd = 0;\n    _this._selectionDirection = \"none\";\n    _this._value = \"\";\n    _this._dirtyValue = false;\n    _this._checkedness = false;\n    _this._dirtyCheckedness = false;\n    _this._preCheckedRadioState = null;\n    _this._legacyActivationBehaviorPreviousIndeterminateState = false;\n    _this.indeterminate = false;\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    _this._hasActivationBehavior = true;\n    return _this;\n  } // https://html.spec.whatwg.org/multipage/input.html#concept-input-value-string-number\n\n\n  _createClass(HTMLInputElementImpl, [{\n    key: \"_convertStringToNumber\",\n    get: function get() {\n      return convertStringToNumberByType[this.type];\n    }\n  }, {\n    key: \"_convertNumberToString\",\n    get: function get() {\n      return convertNumberToStringByType[this.type];\n    }\n  }, {\n    key: \"_convertDateToString\",\n    get: function get() {\n      return serializeDateByType[this.type];\n    }\n  }, {\n    key: \"_convertStringToDate\",\n    get: function get() {\n      return convertStringToDateByType[this.type];\n    }\n  }, {\n    key: \"_isStepAligned\",\n    value: function _isStepAligned(v) {\n      return new Decimal(v).minus(this._stepBase).modulo(this._allowedValueStep).isZero();\n    } // Returns a Decimal.\n\n  }, {\n    key: \"_stepAlign\",\n    value: function _stepAlign(v, roundUp) {\n      var allowedValueStep = this._allowedValueStep;\n      var stepBase = this._stepBase;\n      return new Decimal(v).minus(stepBase).toNearest(allowedValueStep, roundUp ? Decimal.ROUND_UP : Decimal.ROUND_DOWN).add(stepBase);\n    } // For <input>, https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-value\n    // is a simple value that is gotten and set, not computed.\n\n  }, {\n    key: \"_getValue\",\n    value: function _getValue() {\n      return this._value;\n    }\n  }, {\n    key: \"_legacyPreActivationBehavior\",\n    value: function _legacyPreActivationBehavior() {\n      if (this.type === \"checkbox\") {\n        this.checked = !this.checked;\n        this._legacyActivationBehaviorPreviousIndeterminateState = this.indeterminate;\n        this.indeterminate = false;\n      } else if (this.type === \"radio\") {\n        this._preCheckedRadioState = this.checked;\n        this.checked = true;\n      }\n    }\n  }, {\n    key: \"_legacyCanceledActivationBehavior\",\n    value: function _legacyCanceledActivationBehavior() {\n      if (this.type === \"checkbox\") {\n        this.checked = !this.checked;\n        this.indeterminate = this._legacyActivationBehaviorPreviousIndeterminateState;\n      } else if (this.type === \"radio\") {\n        if (this._preCheckedRadioState !== null) {\n          this.checked = this._preCheckedRadioState;\n          this._preCheckedRadioState = null;\n        }\n      }\n    }\n  }, {\n    key: \"_activationBehavior\",\n    value: function _activationBehavior() {\n      if (!this._mutable && this.type !== \"checkbox\" && this.type !== \"radio\") {\n        return;\n      }\n\n      var form = this.form;\n\n      if (this.type === \"checkbox\" || this.type === \"radio\" && !this._preCheckedRadioState) {\n        if (this.isConnected) {\n          fireAnEvent(\"input\", this, undefined, {\n            bubbles: true\n          });\n          fireAnEvent(\"change\", this, undefined, {\n            bubbles: true\n          });\n        }\n      } else if (form && this.type === \"submit\") {\n        form._doSubmit();\n      } else if (form && this.type === \"reset\") {\n        form._doReset();\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldVal) {\n      var wrapper = idlUtils.wrapperForImpl(this);\n\n      if (!this._dirtyValue && name === \"value\") {\n        this._value = sanitizeValueByType(this, wrapper.defaultValue);\n      }\n\n      if (!this._dirtyCheckedness && name === \"checked\") {\n        this._checkedness = wrapper.defaultChecked;\n\n        if (this._checkedness) {\n          this._removeOtherRadioCheckedness();\n        }\n      }\n\n      if (name === \"name\" || name === \"type\") {\n        if (this._checkedness) {\n          this._removeOtherRadioCheckedness();\n        }\n      }\n\n      if (name === \"type\") {\n        var prevType = getTypeFromAttribute(oldVal);\n        var curType = getTypeFromAttribute(value); // When an input element's type attribute changes state…\n\n        if (prevType !== curType) {\n          var prevValueMode = valueAttributeMode(prevType);\n          var curValueMode = valueAttributeMode(curType);\n\n          if (prevValueMode === \"value\" && this._value !== \"\" && (curValueMode === \"default\" || curValueMode === \"default/on\")) {\n            this.setAttributeNS(null, \"value\", this._value);\n          } else if (prevValueMode !== \"value\" && curValueMode === \"value\") {\n            this._value = this.getAttributeNS(null, \"value\") || \"\";\n            this._dirtyValue = false;\n          } else if (prevValueMode !== \"filename\" && curValueMode === \"filename\") {\n            this._value = \"\";\n          }\n\n          this._signalATypeChange();\n\n          this._value = sanitizeValueByType(this, this._value);\n\n          var previouslySelectable = this._idlMemberApplies(\"setRangeText\", prevType);\n\n          var nowSelectable = this._idlMemberApplies(\"setRangeText\", curType);\n\n          if (!previouslySelectable && nowSelectable) {\n            this._selectionStart = 0;\n            this._selectionEnd = 0;\n            this._selectionDirection = \"none\";\n          }\n        }\n      }\n\n      _get(_getPrototypeOf(HTMLInputElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldVal);\n    } // https://html.spec.whatwg.org/multipage/input.html#signal-a-type-change\n\n  }, {\n    key: \"_signalATypeChange\",\n    value: function _signalATypeChange() {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"_formReset\",\n    value: function _formReset() {\n      var wrapper = idlUtils.wrapperForImpl(this);\n      this._value = sanitizeValueByType(this, wrapper.defaultValue);\n      this._dirtyValue = false;\n      this._checkedness = wrapper.defaultChecked;\n      this._dirtyCheckedness = false;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"_changedFormOwner\",\n    value: function _changedFormOwner() {\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"_otherRadioGroupElements\",\n    get: function get() {\n      var wrapper = idlUtils.wrapperForImpl(this);\n      var root = this._radioButtonGroupRoot;\n\n      if (!root) {\n        return [];\n      }\n\n      var result = [];\n      var descendants = domSymbolTree.treeIterator(root);\n\n      var _iterator = _createForOfIteratorHelper(descendants),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var candidate = _step.value;\n\n          if (candidate._radioButtonGroupRoot !== root) {\n            continue;\n          }\n\n          var candidateWrapper = idlUtils.wrapperForImpl(candidate);\n\n          if (!candidateWrapper.name || candidateWrapper.name !== wrapper.name) {\n            continue;\n          }\n\n          if (candidate !== this) {\n            result.push(candidate);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return result;\n    }\n  }, {\n    key: \"_removeOtherRadioCheckedness\",\n    value: function _removeOtherRadioCheckedness() {\n      var _iterator2 = _createForOfIteratorHelper(this._otherRadioGroupElements),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var radioGroupElement = _step2.value;\n          radioGroupElement._checkedness = false;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_radioButtonGroupRoot\",\n    get: function get() {\n      var wrapper = idlUtils.wrapperForImpl(this);\n\n      if (this.type !== \"radio\" || !wrapper.name) {\n        return null;\n      }\n\n      var e = domSymbolTree.parent(this);\n\n      while (e) {\n        // root node of this home sub tree\n        // or the form element we belong to\n        if (!domSymbolTree.parent(e) || e.nodeName.toUpperCase() === \"FORM\") {\n          return e;\n        }\n\n        e = domSymbolTree.parent(e);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_someInRadioGroup\",\n    value: function _someInRadioGroup(name) {\n      if (this[name]) {\n        return true;\n      }\n\n      return this._otherRadioGroupElements.some(function (radioGroupElement) {\n        return radioGroupElement[name];\n      });\n    }\n  }, {\n    key: \"_mutable\",\n    get: function get() {\n      return !isDisabled(this) && !this._hasAttributeAndApplies(\"readonly\");\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return formOwner(this);\n    }\n  }, {\n    key: \"checked\",\n    get: function get() {\n      return this._checkedness;\n    },\n    set: function set(checked) {\n      this._checkedness = Boolean(checked);\n      this._dirtyCheckedness = true;\n\n      if (this._checkedness) {\n        this._removeOtherRadioCheckedness();\n      }\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      switch (valueAttributeMode(this.type)) {\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n        case \"value\":\n          return this._getValue();\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n\n        case \"default\":\n          {\n            var attr = this.getAttributeNS(null, \"value\");\n            return attr !== null ? attr : \"\";\n          }\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n        case \"default/on\":\n          {\n            var _attr = this.getAttributeNS(null, \"value\");\n\n            return _attr !== null ? _attr : \"on\";\n          }\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n        case \"filename\":\n          return this.files.length ? \"C:\\\\fakepath\\\\\" + this.files[0].name : \"\";\n\n        default:\n          throw new Error(\"jsdom internal error: unknown value attribute mode\");\n      }\n    },\n    set: function set(val) {\n      switch (valueAttributeMode(this.type)) {\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-value\n        case \"value\":\n          {\n            var oldValue = this._value;\n            this._value = sanitizeValueByType(this, val);\n            this._dirtyValue = true;\n\n            if (oldValue !== this._value) {\n              this._selectionStart = this._selectionEnd = this._getValueLength();\n              this._selectionDirection = \"none\";\n            }\n\n            break;\n          }\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n\n        case \"default\":\n        case \"default/on\":\n          this.setAttributeNS(null, \"value\", val);\n          break;\n        // https://html.spec.whatwg.org/multipage/input.html#dom-input-value-filename\n\n        case \"filename\":\n          if (val === \"\") {\n            this.files.length = 0;\n          } else {\n            throw DOMException.create(this._globalObject, [\"This input element accepts a filename, which may only be programmatically set to the empty string.\", \"InvalidStateError\"]);\n          }\n\n          break;\n\n        default:\n          throw new Error(\"jsdom internal error: unknown value attribute mode\");\n      }\n    } // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasdate\n\n  }, {\n    key: \"valueAsDate\",\n    get: function get() {\n      if (!this._idlMemberApplies(\"valueAsDate\")) {\n        return null;\n      }\n\n      var window = this._ownerDocument._defaultView;\n\n      var convertedValue = this._convertStringToDate(this._value);\n\n      if (convertedValue instanceof Date) {\n        return new window.Date(convertedValue.getTime());\n      }\n\n      return null;\n    },\n    set: function set(v) {\n      if (!this._idlMemberApplies(\"valueAsDate\")) {\n        throw DOMException.create(this._globalObject, [\"Failed to set the 'valueAsDate' property on 'HTMLInputElement': This input element does not support Date \" + \"values.\", \"InvalidStateError\"]);\n      }\n\n      if (v !== null && !isDate(v)) {\n        throw new TypeError(\"Failed to set the 'valueAsDate' property on 'HTMLInputElement': The provided value is \" + \"not a Date.\");\n      }\n\n      if (v === null || isNaN(v)) {\n        this._value = \"\";\n      }\n\n      this._value = this._convertDateToString(v);\n    } // https://html.spec.whatwg.org/multipage/input.html#dom-input-valueasnumber\n\n  }, {\n    key: \"valueAsNumber\",\n    get: function get() {\n      if (!this._idlMemberApplies(\"valueAsNumber\")) {\n        return NaN;\n      }\n\n      var parsedValue = this._convertStringToNumber(this._value);\n\n      return parsedValue !== null ? parsedValue : NaN;\n    },\n    set: function set(v) {\n      if (!isFinite(v)) {\n        throw new TypeError(\"Failed to set infinite value as Number\");\n      }\n\n      if (!this._idlMemberApplies(\"valueAsNumber\")) {\n        throw DOMException.create(this._globalObject, [\"Failed to set the 'valueAsNumber' property on 'HTMLInputElement': This input element does not support \" + \"Number values.\", \"InvalidStateError\"]);\n      }\n\n      this._value = this._convertNumberToString(v);\n    } // https://html.spec.whatwg.org/multipage/input.html#dom-input-stepup\n\n  }, {\n    key: \"_stepUpdate\",\n    value: function _stepUpdate(n, isUp) {\n      var methodName = isUp ? \"stepUp\" : \"stepDown\";\n\n      if (!this._idlMemberApplies(methodName)) {\n        throw DOMException.create(this._globalObject, [\"Failed to invoke '\".concat(methodName, \"' method on 'HTMLInputElement': \") + \"This input element does not support Number values.\", \"InvalidStateError\"]);\n      }\n\n      var allowedValueStep = this._allowedValueStep;\n\n      if (allowedValueStep === null) {\n        throw DOMException.create(this._globalObject, [\"Failed to invoke '\".concat(methodName, \"' method on 'HTMLInputElement': \") + \"This input element does not support value step.\", \"InvalidStateError\"]);\n      }\n\n      var min = this._minimum;\n      var max = this._maximum;\n\n      if (min !== null && max !== null) {\n        if (min > max) {\n          return;\n        }\n\n        var candidateStepValue = this._stepAlign(Decimal.add(min, allowedValueStep),\n        /* roundUp = */\n        false);\n\n        if (candidateStepValue.lt(min) || candidateStepValue.gt(max)) {\n          return;\n        }\n      }\n\n      var value = 0;\n\n      try {\n        value = this.valueAsNumber;\n\n        if (isNaN(value)) {\n          // Empty value is parsed as NaN.\n          value = 0;\n        }\n      } catch (error) {// Step 5. Default value is 0.\n      }\n\n      value = new Decimal(value);\n      var valueBeforeStepping = value;\n\n      if (!this._isStepAligned(value)) {\n        value = this._stepAlign(value,\n        /* roundUp = */\n        isUp);\n      } else {\n        var delta = Decimal.mul(n, allowedValueStep);\n\n        if (!isUp) {\n          delta = delta.neg();\n        }\n\n        value = value.add(delta);\n      }\n\n      if (min !== null && value.lt(min)) {\n        value = this._stepAlign(min,\n        /* roundUp = */\n        true);\n      }\n\n      if (max !== null && value.gt(max)) {\n        value = this._stepAlign(max,\n        /* roundUp = */\n        false);\n      }\n\n      if (isUp ? value.lt(valueBeforeStepping) : value.gt(valueBeforeStepping)) {\n        return;\n      }\n\n      this._value = this._convertNumberToString(value.toNumber());\n    }\n  }, {\n    key: \"stepDown\",\n    value: function stepDown() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return this._stepUpdate(n, false);\n    }\n  }, {\n    key: \"stepUp\",\n    value: function stepUp() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      return this._stepUpdate(n, true);\n    }\n  }, {\n    key: \"files\",\n    get: function get() {\n      if (this.type === \"file\") {\n        this[filesSymbol] = this[filesSymbol] || FileList.createImpl(this._globalObject);\n      } else {\n        this[filesSymbol] = null;\n      }\n\n      return this[filesSymbol];\n    },\n    set: function set(value) {\n      if (this.type === \"file\" && value !== null) {\n        this[filesSymbol] = value;\n      }\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      var typeAttribute = this.getAttributeNS(null, \"type\");\n      return getTypeFromAttribute(typeAttribute);\n    },\n    set: function set(type) {\n      this.setAttributeNS(null, \"type\", type);\n    }\n  }, {\n    key: \"_dispatchSelectEvent\",\n    value: function _dispatchSelectEvent() {\n      fireAnEvent(\"select\", this, undefined, {\n        bubbles: true,\n        cancelable: true\n      });\n    }\n  }, {\n    key: \"_getValueLength\",\n    value: function _getValueLength() {\n      return typeof this.value === \"string\" ? this.value.length : 0;\n    }\n  }, {\n    key: \"select\",\n    value: function select() {\n      if (!this._idlMemberApplies(\"select\")) {\n        return;\n      }\n\n      this._selectionStart = 0;\n      this._selectionEnd = this._getValueLength();\n      this._selectionDirection = \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"selectionStart\",\n    get: function get() {\n      if (!this._idlMemberApplies(\"selectionStart\")) {\n        return null;\n      }\n\n      return this._selectionStart;\n    },\n    set: function set(start) {\n      if (!this._idlMemberApplies(\"selectionStart\")) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      this.setSelectionRange(start, Math.max(start, this._selectionEnd), this._selectionDirection);\n    }\n  }, {\n    key: \"selectionEnd\",\n    get: function get() {\n      if (!this._idlMemberApplies(\"selectionEnd\")) {\n        return null;\n      }\n\n      return this._selectionEnd;\n    },\n    set: function set(end) {\n      if (!this._idlMemberApplies(\"selectionEnd\")) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      this.setSelectionRange(this._selectionStart, end, this._selectionDirection);\n    }\n  }, {\n    key: \"selectionDirection\",\n    get: function get() {\n      if (!this._idlMemberApplies(\"selectionDirection\")) {\n        return null;\n      }\n\n      return this._selectionDirection;\n    },\n    set: function set(dir) {\n      if (!this._idlMemberApplies(\"selectionDirection\")) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      this.setSelectionRange(this._selectionStart, this._selectionEnd, dir);\n    }\n  }, {\n    key: \"setSelectionRange\",\n    value: function setSelectionRange(start, end, dir) {\n      if (!this._idlMemberApplies(\"setSelectionRange\")) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      this._selectionEnd = Math.min(end, this._getValueLength());\n      this._selectionStart = Math.min(start, this._selectionEnd);\n      this._selectionDirection = dir === \"forward\" || dir === \"backward\" ? dir : \"none\";\n\n      this._dispatchSelectEvent();\n    }\n  }, {\n    key: \"setRangeText\",\n    value: function setRangeText(repl, start, end) {\n      var selectionMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"preserve\";\n\n      if (!this._idlMemberApplies(\"setRangeText\")) {\n        throw DOMException.create(this._globalObject, [\"The object is in an invalid state.\", \"InvalidStateError\"]);\n      }\n\n      if (arguments.length < 2) {\n        start = this._selectionStart;\n        end = this._selectionEnd;\n      } else if (start > end) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      start = Math.min(start, this._getValueLength());\n      end = Math.min(end, this._getValueLength());\n      var val = this.value;\n      var selStart = this._selectionStart;\n      var selEnd = this._selectionEnd;\n      this.value = val.slice(0, start) + repl + val.slice(end);\n      var newEnd = start + this.value.length;\n\n      if (selectionMode === \"select\") {\n        this.setSelectionRange(start, newEnd);\n      } else if (selectionMode === \"start\") {\n        this.setSelectionRange(start, start);\n      } else if (selectionMode === \"end\") {\n        this.setSelectionRange(newEnd, newEnd);\n      } else {\n        // preserve\n        var delta = repl.length - (end - start);\n\n        if (selStart > end) {\n          selStart += delta;\n        } else if (selStart > start) {\n          selStart = start;\n        }\n\n        if (selEnd > end) {\n          selEnd += delta;\n        } else if (selEnd > start) {\n          selEnd = newEnd;\n        }\n\n        this.setSelectionRange(selStart, selEnd);\n      }\n    } // https://html.spec.whatwg.org/multipage/input.html#the-list-attribute\n\n  }, {\n    key: \"list\",\n    get: function get() {\n      var id = this._getAttributeIfApplies(\"list\");\n\n      if (!id) {\n        return null;\n      }\n\n      var el = this.getRootNode({}).getElementById(id);\n\n      if (el && el.localName === \"datalist\") {\n        return el;\n      }\n\n      return null;\n    } // Reflected IDL attribute does not care about whether the content attribute applies.\n\n  }, {\n    key: \"maxLength\",\n    get: function get() {\n      if (!this.hasAttributeNS(null, \"maxlength\")) {\n        return 524288; // stole this from chrome\n      }\n\n      return parseInt(this.getAttributeNS(null, \"maxlength\"));\n    },\n    set: function set(value) {\n      if (value < 0) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      this.setAttributeNS(null, \"maxlength\", String(value));\n    }\n  }, {\n    key: \"minLength\",\n    get: function get() {\n      if (!this.hasAttributeNS(null, \"minlength\")) {\n        return 0;\n      }\n\n      return parseInt(this.getAttributeNS(null, \"minlength\"));\n    },\n    set: function set(value) {\n      if (value < 0) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      this.setAttributeNS(null, \"minlength\", String(value));\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      if (!this.hasAttributeNS(null, \"size\")) {\n        return 20;\n      }\n\n      return parseInt(this.getAttributeNS(null, \"size\"));\n    },\n    set: function set(value) {\n      if (value <= 0) {\n        throw DOMException.create(this._globalObject, [\"The index is not in the allowed range.\", \"IndexSizeError\"]);\n      }\n\n      this.setAttributeNS(null, \"size\", String(value));\n    } // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n\n  }, {\n    key: \"_minimum\",\n    get: function get() {\n      var min = this._defaultMinimum;\n\n      var attr = this._getAttributeIfApplies(\"min\");\n\n      if (attr !== null && this._convertStringToNumber !== undefined) {\n        var parsed = this._convertStringToNumber(attr);\n\n        if (parsed !== null) {\n          min = parsed;\n        }\n      }\n\n      return min;\n    }\n  }, {\n    key: \"_maximum\",\n    get: function get() {\n      var max = this._defaultMaximum;\n\n      var attr = this._getAttributeIfApplies(\"max\");\n\n      if (attr !== null && this._convertStringToNumber !== undefined) {\n        var parsed = this._convertStringToNumber(attr);\n\n        if (parsed !== null) {\n          max = parsed;\n        }\n      }\n\n      return max;\n    }\n  }, {\n    key: \"_defaultMinimum\",\n    get: function get() {\n      if (this.type === \"range\") {\n        return 0;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_defaultMaximum\",\n    get: function get() {\n      if (this.type === \"range\") {\n        return 100;\n      }\n\n      return null;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step\n\n  }, {\n    key: \"_allowedValueStep\",\n    get: function get() {\n      if (!this._contentAttributeApplies(\"step\")) {\n        return null;\n      }\n\n      var attr = this.getAttributeNS(null, \"step\");\n\n      if (attr === null) {\n        return this._defaultStep * this._stepScaleFactor;\n      }\n\n      if (asciiCaseInsensitiveMatch(attr, \"any\")) {\n        return null;\n      }\n\n      var parsedStep = parseFloatingPointNumber(attr);\n\n      if (parsedStep === null || parsedStep <= 0) {\n        return this._defaultStep * this._stepScaleFactor;\n      }\n\n      return parsedStep * this._stepScaleFactor;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-scale\n\n  }, {\n    key: \"_stepScaleFactor\",\n    get: function get() {\n      var dayInMilliseconds = 24 * 60 * 60 * 1000;\n\n      switch (this.type) {\n        case \"week\":\n          return 7 * dayInMilliseconds;\n\n        case \"date\":\n          return dayInMilliseconds;\n\n        case \"datetime-local\":\n        case \"datetime\":\n        case \"time\":\n          return 1000;\n      }\n\n      return 1;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default\n\n  }, {\n    key: \"_defaultStep\",\n    get: function get() {\n      if (this.type === \"datetime-local\" || this.type === \"datetime\" || this.type === \"time\") {\n        return 60;\n      }\n\n      return 1;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-min-zero\n\n  }, {\n    key: \"_stepBase\",\n    get: function get() {\n      if (this._hasAttributeAndApplies(\"min\")) {\n        var min = this._convertStringToNumber(this.getAttributeNS(null, \"min\"));\n\n        if (min !== null) {\n          return min;\n        }\n      }\n\n      if (this.hasAttributeNS(null, \"value\")) {\n        var value = this._convertStringToNumber(this.getAttributeNS(null, \"value\"));\n\n        if (value !== null) {\n          return value;\n        }\n      }\n\n      if (this._defaultStepBase !== null) {\n        return this._defaultStepBase;\n      }\n\n      return 0;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-step-default-base\n\n  }, {\n    key: \"_defaultStepBase\",\n    get: function get() {\n      if (this.type === \"week\") {\n        // The start of week 1970-W01\n        return -259200000;\n      }\n\n      return null;\n    } // https://html.spec.whatwg.org/multipage/input.html#common-input-element-attributes\n    // When an attribute doesn't apply to an input element, user agents must ignore the attribute.\n\n  }, {\n    key: \"_contentAttributeApplies\",\n    value: function _contentAttributeApplies(attribute) {\n      return applicableTypesForContentAttribute[attribute].has(this.type);\n    }\n  }, {\n    key: \"_hasAttributeAndApplies\",\n    value: function _hasAttributeAndApplies(attribute) {\n      return this._contentAttributeApplies(attribute) && this.hasAttributeNS(null, attribute);\n    }\n  }, {\n    key: \"_getAttributeIfApplies\",\n    value: function _getAttributeIfApplies(attribute) {\n      if (this._contentAttributeApplies(attribute)) {\n        return this.getAttributeNS(null, attribute);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"_idlMemberApplies\",\n    value: function _idlMemberApplies(member) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.type;\n      return applicableTypesForIDLMember[member].has(type);\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      // https://html.spec.whatwg.org/multipage/input.html#hidden-state-(type=hidden)\n      // https://html.spec.whatwg.org/multipage/input.html#reset-button-state-(type=reset)\n      // https://html.spec.whatwg.org/multipage/input.html#button-state-(type=button)\n      var willNotValidateTypes = new Set([\"hidden\", \"reset\", \"button\"]); // https://html.spec.whatwg.org/multipage/input.html#attr-input-readonly\n\n      var readOnly = this._hasAttributeAndApplies(\"readonly\"); // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-disabled\n\n\n      return willNotValidateTypes.has(this.type) || readOnly;\n    } // https://html.spec.whatwg.org/multipage/input.html#concept-input-required\n\n  }, {\n    key: \"_required\",\n    get: function get() {\n      return this._hasAttributeAndApplies(\"required\");\n    } // https://html.spec.whatwg.org/multipage/input.html#has-a-periodic-domain\n\n  }, {\n    key: \"_hasAPeriodicDomain\",\n    get: function get() {\n      return this.type === \"time\";\n    } // https://html.spec.whatwg.org/multipage/input.html#has-a-reversed-range\n\n  }, {\n    key: \"_hasAReversedRange\",\n    get: function get() {\n      return this._hasAPeriodicDomain && this._maximum < this._minimum;\n    }\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this2 = this;\n\n      if (!this._validity) {\n        // Constraint validation: When an element has a reversed range, and the result of applying\n        // the algorithm to convert a string to a number to the string given by the element's value\n        // is a number, and the number obtained from that algorithm is more than the maximum and less\n        // than the minimum, the element is simultaneously suffering from an underflow and suffering\n        // from an overflow.\n        var reversedRangeSufferingOverUnderflow = function reversedRangeSufferingOverUnderflow() {\n          var parsedValue = _this2._convertStringToNumber(_this2._value);\n\n          return parsedValue !== null && parsedValue > _this2._maximum && parsedValue < _this2._minimum;\n        };\n\n        var state = {\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-missing\n          valueMissing: function valueMissing() {\n            // https://html.spec.whatwg.org/multipage/input.html#the-required-attribute\n            // Constraint validation: If the element is required, and its value IDL attribute applies\n            // and is in the mode value, and the element is mutable, and the element's value is the\n            // empty string, then the element is suffering from being missing.\n            //\n            // Note: As of today, the value IDL attribute always applies.\n            if (_this2._required && valueAttributeMode(_this2.type) === \"value\" && _this2._mutable && _this2._value === \"\") {\n              return true;\n            }\n\n            switch (_this2.type) {\n              // https://html.spec.whatwg.org/multipage/input.html#checkbox-state-(type=checkbox)\n              // Constraint validation: If the element is required and its checkedness is\n              // false, then the element is suffering from being missing.\n              case \"checkbox\":\n                if (_this2._required && !_this2._checkedness) {\n                  return true;\n                }\n\n                break;\n              // https://html.spec.whatwg.org/multipage/input.html#radio-button-state-(type=radio)\n              // Constraint validation: If an element in the radio button group is required,\n              // and all of the input elements in the radio button group have a checkedness\n              // that is false, then the element is suffering from being missing.\n\n              case \"radio\":\n                if (_this2._someInRadioGroup(\"_required\") && !_this2._someInRadioGroup(\"checked\")) {\n                  return true;\n                }\n\n                break;\n              // https://html.spec.whatwg.org/multipage/input.html#file-upload-state-(type=file)\n              // Constraint validation: If the element is required and the list of selected files is\n              // empty, then the element is suffering from being missing.\n\n              case \"file\":\n                if (_this2._required && _this2.files.length === 0) {\n                  return true;\n                }\n\n                break;\n            }\n\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-long\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-maxlength\n          // jsdom has no way at the moment to emulate a user interaction, so tooLong/tooShort have\n          // to be set to false.\n          tooLong: function tooLong() {\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-being-too-short\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#attr-fe-minlength\n          tooShort: function tooShort() {\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-overflow\n          rangeOverflow: function rangeOverflow() {\n            // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n            if (_this2._hasAReversedRange) {\n              return reversedRangeSufferingOverUnderflow();\n            } // Constraint validation: When the element has a maximum and does not have a reversed\n            // range, and the result of applying the algorithm to convert a string to a number to the\n            // string given by the element's value is a number, and the number obtained from that\n            // algorithm is more than the maximum, the element is suffering from an overflow.\n\n\n            if (_this2._maximum !== null) {\n              var parsedValue = _this2._convertStringToNumber(_this2._value);\n\n              if (parsedValue !== null && parsedValue > _this2._maximum) {\n                return true;\n              }\n            }\n\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-an-underflow\n          rangeUnderflow: function rangeUnderflow() {\n            // https://html.spec.whatwg.org/multipage/input.html#the-min-and-max-attributes\n            if (_this2._hasAReversedRange) {\n              return reversedRangeSufferingOverUnderflow();\n            } // Constraint validation: When the element has a minimum and does not have a reversed\n            // range, and the result of applying the algorithm to convert a string to a number to the\n            // string given by the element's value is a number, and the number obtained from that\n            // algorithm is less than the minimum, the element is suffering from an underflow.\n\n\n            if (_this2._minimum !== null) {\n              var parsedValue = _this2._convertStringToNumber(_this2._value);\n\n              if (parsedValue !== null && parsedValue < _this2._minimum) {\n                return true;\n              }\n            }\n\n            return false;\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-pattern-mismatch\n          patternMismatch: function patternMismatch() {\n            // https://html.spec.whatwg.org/multipage/input.html#the-pattern-attribute\n            if (_this2._value === \"\" || !_this2._hasAttributeAndApplies(\"pattern\")) {\n              return false;\n            }\n\n            var regExp;\n\n            try {\n              var pattern = _this2.getAttributeNS(null, \"pattern\"); // The pattern attribute should be matched against the entire value, not just any\n              // subset, so add ^ and $ anchors. But also check the validity of the regex itself\n              // first.\n\n\n              new RegExp(pattern, \"u\"); // eslint-disable-line no-new\n\n              regExp = new RegExp(\"^(?:\" + pattern + \")$\", \"u\");\n            } catch (e) {\n              return false;\n            }\n\n            if (_this2._hasAttributeAndApplies(\"multiple\")) {\n              return !splitOnCommas(_this2._value).every(function (value) {\n                return regExp.test(value);\n              });\n            }\n\n            return !regExp.test(_this2._value);\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-step-mismatch\n          // https://html.spec.whatwg.org/multipage/input.html#attr-input-step\n          stepMismatch: function stepMismatch() {\n            var allowedValueStep = _this2._allowedValueStep;\n\n            if (allowedValueStep === null) {\n              return false;\n            }\n\n            var number = _this2._convertStringToNumber(_this2._value);\n\n            return number !== null && !_this2._isStepAligned(number);\n          },\n          // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#suffering-from-a-type-mismatch\n          typeMismatch: function typeMismatch() {\n            switch (_this2.type) {\n              // https://html.spec.whatwg.org/multipage/input.html#url-state-(type=url)\n              // Constraint validation: While the value of the element is neither the empty string\n              // nor a valid absolute URL, the element is suffering from a type mismatch.\n              case \"url\":\n                if (_this2._value !== \"\" && !isValidAbsoluteURL(_this2._value)) {\n                  return true;\n                }\n\n                break;\n              // https://html.spec.whatwg.org/multipage/input.html#e-mail-state-(type=email)\n              // Constraint validation [multiple=false]: While the value of the element is neither the empty\n              // string nor a single valid e - mail address, the element is suffering from a type mismatch.\n              // Constraint validation [multiple=true]: While the value of the element is not a valid e-mail address list,\n              // the element is suffering from a type mismatch.\n\n              case \"email\":\n                if (_this2._value !== \"\" && !isValidEmailAddress(_this2._getValue(), _this2.hasAttributeNS(null, \"multiple\"))) {\n                  return true;\n                }\n\n                break;\n            }\n\n            return false;\n          }\n        };\n        this._validity = ValidityState.createImpl(this._globalObject, [], {\n          element: this,\n          state: state\n        });\n      }\n\n      return this._validity;\n    }\n  }, {\n    key: cloningSteps,\n    value: function value(copy, node) {\n      copy._value = node._value;\n      copy._checkedness = node._checkedness;\n      copy._dirtyValue = node._dirtyValue;\n      copy._dirtyCheckedness = node._dirtyCheckedness;\n    }\n  }]);\n\n  return HTMLInputElementImpl;\n}(HTMLElementImpl);\n\nmixin(HTMLInputElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLInputElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar HTMLConstructor_helpers_html_constructor = require(\"../helpers/html-constructor.js\").HTMLConstructor;\n\nvar SelectionMode = require(\"./SelectionMode.js\");\n\nvar ceReactionsPreSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPreSteps;\n\nvar ceReactionsPostSteps_helpers_custom_elements = require(\"../helpers/custom-elements.js\").ceReactionsPostSteps;\n\nvar parseInteger_helpers_strings = require(\"../helpers/strings.js\").parseInteger;\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar HTMLElement = require(\"./HTMLElement.js\");\n\nvar interfaceName = \"HTMLTextAreaElement\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'HTMLTextAreaElement'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"HTMLTextAreaElement\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor HTMLTextAreaElement is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  HTMLElement._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.HTMLElement === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate HTMLTextAreaElement before HTMLElement\");\n  }\n\n  var HTMLTextAreaElement = /*#__PURE__*/function (_globalObject$HTMLEle) {\n    _inherits(HTMLTextAreaElement, _globalObject$HTMLEle);\n\n    var _super = _createSuper(HTMLTextAreaElement);\n\n    function HTMLTextAreaElement() {\n      var _this;\n\n      _classCallCheck(this, HTMLTextAreaElement);\n\n      return _possibleConstructorReturn(_this, HTMLConstructor_helpers_html_constructor(globalObject, interfaceName, this instanceof HTMLTextAreaElement ? this.constructor : void 0));\n    }\n\n    _createClass(HTMLTextAreaElement, [{\n      key: \"checkValidity\",\n      value: function checkValidity() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'checkValidity' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol].checkValidity();\n      }\n    }, {\n      key: \"reportValidity\",\n      value: function reportValidity() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'reportValidity' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol].reportValidity();\n      }\n    }, {\n      key: \"setCustomValidity\",\n      value: function setCustomValidity(error) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setCustomValidity' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'setCustomValidity' on 'HTMLTextAreaElement': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol = esValue[implSymbol]).setCustomValidity.apply(_esValue$implSymbol, args);\n      }\n    }, {\n      key: \"select\",\n      value: function select() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'select' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol].select();\n      }\n    }, {\n      key: \"setRangeText\",\n      value: function setRangeText(replacement) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setRangeText' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n\n        switch (arguments.length) {\n          case 1:\n            {\n              var curArg = arguments[0];\n              curArg = conversions[\"DOMString\"](curArg, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n              });\n              args.push(curArg);\n            }\n            break;\n\n          case 2:\n            throw new TypeError(\"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': only \" + arguments.length + \" arguments present.\");\n            break;\n\n          case 3:\n            {\n              var _curArg = arguments[0];\n              _curArg = conversions[\"DOMString\"](_curArg, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n              });\n              args.push(_curArg);\n            }\n            {\n              var _curArg2 = arguments[1];\n              _curArg2 = conversions[\"unsigned long\"](_curArg2, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2\"\n              });\n              args.push(_curArg2);\n            }\n            {\n              var _curArg3 = arguments[2];\n              _curArg3 = conversions[\"unsigned long\"](_curArg3, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3\"\n              });\n              args.push(_curArg3);\n            }\n            break;\n\n          default:\n            {\n              var _curArg4 = arguments[0];\n              _curArg4 = conversions[\"DOMString\"](_curArg4, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 1\"\n              });\n              args.push(_curArg4);\n            }\n            {\n              var _curArg5 = arguments[1];\n              _curArg5 = conversions[\"unsigned long\"](_curArg5, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 2\"\n              });\n              args.push(_curArg5);\n            }\n            {\n              var _curArg6 = arguments[2];\n              _curArg6 = conversions[\"unsigned long\"](_curArg6, {\n                context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 3\"\n              });\n              args.push(_curArg6);\n            }\n            {\n              var _curArg7 = arguments[3];\n\n              if (_curArg7 !== undefined) {\n                _curArg7 = SelectionMode.convert(_curArg7, {\n                  context: \"Failed to execute 'setRangeText' on 'HTMLTextAreaElement': parameter 4\"\n                });\n              } else {\n                _curArg7 = \"preserve\";\n              }\n\n              args.push(_curArg7);\n            }\n        }\n\n        return (_esValue$implSymbol2 = esValue[implSymbol]).setRangeText.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"setSelectionRange\",\n      value: function setSelectionRange(start, end) {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setSelectionRange' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"unsigned long\"](curArg, {\n            context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg8 = arguments[1];\n          _curArg8 = conversions[\"unsigned long\"](_curArg8, {\n            context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 2\"\n          });\n          args.push(_curArg8);\n        }\n        {\n          var _curArg9 = arguments[2];\n\n          if (_curArg9 !== undefined) {\n            _curArg9 = conversions[\"DOMString\"](_curArg9, {\n              context: \"Failed to execute 'setSelectionRange' on 'HTMLTextAreaElement': parameter 3\"\n            });\n          }\n\n          args.push(_curArg9);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).setSelectionRange.apply(_esValue$implSymbol3, args);\n      }\n    }, {\n      key: \"autocomplete\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get autocomplete' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"autocomplete\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set autocomplete' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'autocomplete' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"autocomplete\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"autofocus\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get autofocus' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].hasAttributeNS(null, \"autofocus\");\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set autofocus' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'autofocus' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          if (V) {\n            esValue[implSymbol].setAttributeNS(null, \"autofocus\", \"\");\n          } else {\n            esValue[implSymbol].removeAttributeNS(null, \"autofocus\");\n          }\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"cols\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get cols' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"cols\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set cols' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'cols' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"cols\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"dirName\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get dirName' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"dirname\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set dirName' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'dirName' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"dirname\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"disabled\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get disabled' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].hasAttributeNS(null, \"disabled\");\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set disabled' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'disabled' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          if (V) {\n            esValue[implSymbol].setAttributeNS(null, \"disabled\", \"\");\n          } else {\n            esValue[implSymbol].removeAttributeNS(null, \"disabled\");\n          }\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"form\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get form' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"form\"]);\n      }\n    }, {\n      key: \"inputMode\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get inputMode' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"inputmode\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set inputMode' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'inputMode' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"inputmode\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"maxLength\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get maxLength' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"maxlength\");\n\n          if (value === null) {\n            return 0;\n          }\n\n          value = parseInteger_helpers_strings(value);\n          return value !== null && conversions.long(value) === value ? value : 0;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set maxLength' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"long\"](V, {\n          context: \"Failed to set the 'maxLength' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"maxlength\", String(V));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"minLength\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get minLength' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"minlength\");\n\n          if (value === null) {\n            return 0;\n          }\n\n          value = parseInteger_helpers_strings(value);\n          return value !== null && conversions.long(value) === value ? value : 0;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set minLength' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"long\"](V, {\n          context: \"Failed to set the 'minLength' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"minlength\", String(V));\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"name\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get name' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"name\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set name' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'name' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"name\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"placeholder\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get placeholder' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"placeholder\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set placeholder' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'placeholder' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"placeholder\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"readOnly\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get readOnly' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].hasAttributeNS(null, \"readonly\");\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set readOnly' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'readOnly' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          if (V) {\n            esValue[implSymbol].setAttributeNS(null, \"readonly\", \"\");\n          } else {\n            esValue[implSymbol].removeAttributeNS(null, \"readonly\");\n          }\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"required\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get required' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol].hasAttributeNS(null, \"required\");\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set required' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'required' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          if (V) {\n            esValue[implSymbol].setAttributeNS(null, \"required\", \"\");\n          } else {\n            esValue[implSymbol].removeAttributeNS(null, \"required\");\n          }\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"rows\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get rows' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"rows\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set rows' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'rows' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"rows\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"wrap\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get wrap' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          var value = esValue[implSymbol].getAttributeNS(null, \"wrap\");\n          return value === null ? \"\" : value;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set wrap' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'wrap' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol].setAttributeNS(null, \"wrap\", V);\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get type' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"type\"];\n      }\n    }, {\n      key: \"defaultValue\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get defaultValue' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"defaultValue\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set defaultValue' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'defaultValue' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"defaultValue\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"value\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get value' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          return esValue[implSymbol][\"value\"];\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set value' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'value' property on 'HTMLTextAreaElement': The provided value\",\n          treatNullAsEmptyString: true\n        });\n        ceReactionsPreSteps_helpers_custom_elements(globalObject);\n\n        try {\n          esValue[implSymbol][\"value\"] = V;\n        } finally {\n          ceReactionsPostSteps_helpers_custom_elements(globalObject);\n        }\n      }\n    }, {\n      key: \"textLength\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get textLength' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"textLength\"];\n      }\n    }, {\n      key: \"willValidate\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get willValidate' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"willValidate\"];\n      }\n    }, {\n      key: \"validity\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get validity' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"validity\"]);\n      }\n    }, {\n      key: \"validationMessage\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get validationMessage' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"validationMessage\"];\n      }\n    }, {\n      key: \"labels\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get labels' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"labels\"]);\n      }\n    }, {\n      key: \"selectionStart\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get selectionStart' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"selectionStart\"];\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set selectionStart' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'selectionStart' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        esValue[implSymbol][\"selectionStart\"] = V;\n      }\n    }, {\n      key: \"selectionEnd\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get selectionEnd' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"selectionEnd\"];\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set selectionEnd' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'selectionEnd' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        esValue[implSymbol][\"selectionEnd\"] = V;\n      }\n    }, {\n      key: \"selectionDirection\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get selectionDirection' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        return esValue[implSymbol][\"selectionDirection\"];\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set selectionDirection' called on an object that is not a valid instance of HTMLTextAreaElement.\");\n        }\n\n        V = conversions[\"DOMString\"](V, {\n          context: \"Failed to set the 'selectionDirection' property on 'HTMLTextAreaElement': The provided value\"\n        });\n        esValue[implSymbol][\"selectionDirection\"] = V;\n      }\n    }]);\n\n    return HTMLTextAreaElement;\n  }(globalObject.HTMLElement);\n\n  Object.defineProperties(HTMLTextAreaElement.prototype, _defineProperty({\n    checkValidity: {\n      enumerable: true\n    },\n    reportValidity: {\n      enumerable: true\n    },\n    setCustomValidity: {\n      enumerable: true\n    },\n    select: {\n      enumerable: true\n    },\n    setRangeText: {\n      enumerable: true\n    },\n    setSelectionRange: {\n      enumerable: true\n    },\n    autocomplete: {\n      enumerable: true\n    },\n    autofocus: {\n      enumerable: true\n    },\n    cols: {\n      enumerable: true\n    },\n    dirName: {\n      enumerable: true\n    },\n    disabled: {\n      enumerable: true\n    },\n    form: {\n      enumerable: true\n    },\n    inputMode: {\n      enumerable: true\n    },\n    maxLength: {\n      enumerable: true\n    },\n    minLength: {\n      enumerable: true\n    },\n    name: {\n      enumerable: true\n    },\n    placeholder: {\n      enumerable: true\n    },\n    readOnly: {\n      enumerable: true\n    },\n    required: {\n      enumerable: true\n    },\n    rows: {\n      enumerable: true\n    },\n    wrap: {\n      enumerable: true\n    },\n    type: {\n      enumerable: true\n    },\n    defaultValue: {\n      enumerable: true\n    },\n    value: {\n      enumerable: true\n    },\n    textLength: {\n      enumerable: true\n    },\n    willValidate: {\n      enumerable: true\n    },\n    validity: {\n      enumerable: true\n    },\n    validationMessage: {\n      enumerable: true\n    },\n    labels: {\n      enumerable: true\n    },\n    selectionStart: {\n      enumerable: true\n    },\n    selectionEnd: {\n      enumerable: true\n    },\n    selectionDirection: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"HTMLTextAreaElement\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = HTMLTextAreaElement;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: HTMLTextAreaElement\n  });\n};\n\nvar Impl = require(\"../nodes/HTMLTextAreaElement-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar EventHandlerNonNull = require(\"./EventHandlerNonNull.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar EventTarget = require(\"./EventTarget.js\");\n\nvar interfaceName = \"XMLHttpRequestEventTarget\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'XMLHttpRequestEventTarget'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"XMLHttpRequestEventTarget\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor XMLHttpRequestEventTarget is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  EventTarget._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\", \"DedicatedWorker\", \"SharedWorker\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.EventTarget === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate XMLHttpRequestEventTarget before EventTarget\");\n  }\n\n  var XMLHttpRequestEventTarget = /*#__PURE__*/function (_globalObject$EventTa) {\n    _inherits(XMLHttpRequestEventTarget, _globalObject$EventTa);\n\n    var _super = _createSuper(XMLHttpRequestEventTarget);\n\n    function XMLHttpRequestEventTarget() {\n      var _this;\n\n      _classCallCheck(this, XMLHttpRequestEventTarget);\n\n      throw new TypeError(\"Illegal constructor\");\n      return _possibleConstructorReturn(_this);\n    }\n\n    _createClass(XMLHttpRequestEventTarget, [{\n      key: \"onloadstart\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadstart' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadstart\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadstart' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadstart' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadstart\"] = V;\n      }\n    }, {\n      key: \"onprogress\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onprogress' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onprogress\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onprogress' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onprogress' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onprogress\"] = V;\n      }\n    }, {\n      key: \"onabort\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onabort' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onabort\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onabort' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onabort' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onabort\"] = V;\n      }\n    }, {\n      key: \"onerror\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onerror' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onerror\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onerror' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onerror' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onerror\"] = V;\n      }\n    }, {\n      key: \"onload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onload' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onload\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onload' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onload' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onload\"] = V;\n      }\n    }, {\n      key: \"ontimeout\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get ontimeout' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"ontimeout\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set ontimeout' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'ontimeout' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"ontimeout\"] = V;\n      }\n    }, {\n      key: \"onloadend\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onloadend' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onloadend\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onloadend' called on an object that is not a valid instance of XMLHttpRequestEventTarget.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onloadend' property on 'XMLHttpRequestEventTarget': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onloadend\"] = V;\n      }\n    }]);\n\n    return XMLHttpRequestEventTarget;\n  }(globalObject.EventTarget);\n\n  Object.defineProperties(XMLHttpRequestEventTarget.prototype, _defineProperty({\n    onloadstart: {\n      enumerable: true\n    },\n    onprogress: {\n      enumerable: true\n    },\n    onabort: {\n      enumerable: true\n    },\n    onerror: {\n      enumerable: true\n    },\n    onload: {\n      enumerable: true\n    },\n    ontimeout: {\n      enumerable: true\n    },\n    onloadend: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"XMLHttpRequestEventTarget\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = XMLHttpRequestEventTarget;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: XMLHttpRequestEventTarget\n  });\n};\n\nvar Impl = require(\"../xhr/XMLHttpRequestEventTarget-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
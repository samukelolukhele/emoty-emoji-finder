{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/svg/basic-types\"),\n    attach = _require.attach,\n    detach = _require.detach; // https://svgwg.org/svg2-draft/types.html#ListInterfaces\n// Child classes must implement _reserialize()\n\n\nvar List = /*#__PURE__*/function (_idlUtils$supportsPro, _idlUtils$supportedPr, _idlUtils$indexedSetN, _idlUtils$indexedSetE) {\n  function List() {\n    _classCallCheck(this, List);\n  }\n\n  _createClass(List, [{\n    key: \"_initList\",\n    value: function _initList(_ref) {\n      var element = _ref.element,\n          attribute = _ref.attribute,\n          _ref$readOnly = _ref.readOnly,\n          readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly;\n      this._element = element;\n      this._attribute = attribute;\n      this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n      this._readOnly = readOnly;\n      this._list = [];\n      this._version = -1;\n    }\n  }, {\n    key: \"_needsResync\",\n    get: function get() {\n      return this._version < this._element._version;\n    }\n  }, {\n    key: \"_synchronize\",\n    value: function _synchronize() {\n      if (!this._needsResync) {\n        return;\n      }\n\n      var value = [];\n\n      if (this._element.hasAttributeNS(null, this._attribute)) {\n        value = this._attributeRegistryEntry.getValue(this._element.getAttributeNS(null, this._attribute));\n      }\n\n      if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n        value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n      } // TODO: support non-DOMString lists.\n\n\n      this._list = value;\n      this._version = this._element._version;\n    }\n  }, {\n    key: \"_reserialize\",\n    value: function _reserialize() {\n      var elements = this._list;\n\n      this._element.setAttributeNS(null, this._attribute, this._attributeRegistryEntry.serialize(elements)); // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n\n\n      this._version = this._element._version;\n    }\n  }, {\n    key: _idlUtils$supportsPro,\n    value: function value(index) {\n      this._synchronize();\n\n      return index >= 0 && index < this.length;\n    }\n  }, {\n    key: _idlUtils$supportedPr,\n    get: function get() {\n      this._synchronize();\n\n      return this._list.keys();\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      this._synchronize();\n\n      return this._list.length;\n    }\n  }, {\n    key: \"numberOfItems\",\n    get: function get() {\n      this._synchronize();\n\n      return this._list.length;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n      }\n\n      var _iterator = _createForOfIteratorHelper(this._list),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          detach(item);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      this._list.length = 0;\n\n      this._reserialize();\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize(newItem) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this._list),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          detach(item);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      this._list.length = 0; // TODO: clone non-DOMString list elements.\n\n      attach(newItem, this);\n\n      this._list.push(newItem);\n\n      this._reserialize();\n    }\n  }, {\n    key: \"getItem\",\n    value: function getItem(index) {\n      this._synchronize();\n\n      if (index >= this._list.length) {\n        throw DOMException.create(this._globalObject, [\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\"]);\n      }\n\n      return this._list[index];\n    }\n  }, {\n    key: \"insertItemBefore\",\n    value: function insertItemBefore(newItem, index) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n      } // TODO: clone non-DOMString list elements.\n\n\n      if (index > this._list.length) {\n        index = this._list.length;\n      }\n\n      this._list.splice(index, 0, newItem);\n\n      attach(newItem, this);\n\n      this._reserialize();\n\n      return newItem;\n    }\n  }, {\n    key: \"replaceItem\",\n    value: function replaceItem(newItem, index) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n      }\n\n      if (index >= this._list.length) {\n        throw DOMException.create(this._globalObject, [\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\"]);\n      } // TODO: clone non-DOMString list elements.\n\n\n      detach(this._list[index]);\n      this._list[index] = newItem;\n      attach(newItem, this);\n\n      this._reserialize();\n\n      return newItem;\n    }\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(index) {\n      this._synchronize();\n\n      if (this._readOnly) {\n        throw DOMException.create(this._globalObject, [\"Attempting to modify a read-only list\", \"NoModificationAllowedError\"]);\n      }\n\n      if (index >= this._list.length) {\n        throw DOMException.create(this._globalObject, [\"The index provided (\".concat(index, \") is greater than or equal to the maximum bound (\").concat(this._list.length, \").\"), \"IndexSizeError\"]);\n      }\n\n      var item = this._list[index];\n      detach(item);\n\n      this._list.splice(index, 1);\n\n      this._reserialize();\n\n      return item;\n    }\n  }, {\n    key: \"appendItem\",\n    value: function appendItem(newItem) {\n      this._synchronize(); // TODO: clone non-DOMString list elements.\n\n\n      this._list.push(newItem);\n\n      attach(newItem, this);\n\n      this._reserialize();\n\n      return newItem;\n    }\n  }, {\n    key: _idlUtils$indexedSetN,\n    value: function value(index, _value) {\n      // Note: this will always throw a IndexSizeError.\n      this.replaceItem(_value, index);\n    }\n  }, {\n    key: _idlUtils$indexedSetE,\n    value: function value(index, _value2) {\n      this.replaceItem(_value2, index);\n    }\n  }]);\n\n  return List;\n}(idlUtils.supportsPropertyIndex, idlUtils.supportedPropertyIndices, idlUtils.indexedSetNew, idlUtils.indexedSetExisting);\n\nmodule.exports = List;","map":null,"metadata":{},"sourceType":"script"}
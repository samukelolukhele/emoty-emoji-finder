{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../helpers/selectors\"),\n    addNwsapi = _require.addNwsapi;\n\nvar _require2 = require(\"../helpers/namespaces\"),\n    HTML_NS = _require2.HTML_NS;\n\nvar _require3 = require(\"../../utils\"),\n    mixin = _require3.mixin,\n    memoizeQuery = _require3.memoizeQuery;\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar NodeImpl = require(\"./Node-impl\").implementation;\n\nvar ParentNodeImpl = require(\"./ParentNode-impl\").implementation;\n\nvar ChildNodeImpl = require(\"./ChildNode-impl\").implementation;\n\nvar attributes = require(\"../attributes\");\n\nvar namedPropertiesWindow = require(\"../named-properties-window\");\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require4 = require(\"../../browser/parser\"),\n    parseFragment = _require4.parseFragment;\n\nvar InnerHTMLImpl = require(\"../domparsing/InnerHTML-impl\").implementation;\n\nvar _require5 = require(\"../domparsing/serialization\"),\n    fragmentSerialization = _require5.fragmentSerialization;\n\nvar _require6 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require6.domSymbolTree;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar DOMTokenList = require(\"../generated/DOMTokenList\");\n\nvar NamedNodeMap = require(\"../generated/NamedNodeMap\");\n\nvar validateNames = require(\"../helpers/validate-names\");\n\nvar _require7 = require(\"../helpers/strings\"),\n    asciiLowercase = _require7.asciiLowercase,\n    asciiUppercase = _require7.asciiUppercase;\n\nvar _require8 = require(\"../node\"),\n    listOfElementsWithQualifiedName = _require8.listOfElementsWithQualifiedName,\n    listOfElementsWithNamespaceAndLocalName = _require8.listOfElementsWithNamespaceAndLocalName,\n    listOfElementsWithClassNames = _require8.listOfElementsWithClassNames;\n\nvar SlotableMixinImpl = require(\"./Slotable-impl\").implementation;\n\nvar NonDocumentTypeChildNode = require(\"./NonDocumentTypeChildNode-impl\").implementation;\n\nvar ShadowRoot = require(\"../generated/ShadowRoot\");\n\nvar Text = require(\"../generated/Text\");\n\nvar _require9 = require(\"../helpers/shadow-dom\"),\n    isValidHostElementName = _require9.isValidHostElementName;\n\nvar _require10 = require(\"../helpers/custom-elements\"),\n    isValidCustomElementName = _require10.isValidCustomElementName,\n    lookupCEDefinition = _require10.lookupCEDefinition;\n\nfunction attachId(id, elm, doc) {\n  if (id && elm && doc) {\n    if (!doc._ids[id]) {\n      doc._ids[id] = [];\n    }\n\n    doc._ids[id].push(elm);\n  }\n}\n\nfunction detachId(id, elm, doc) {\n  if (id && elm && doc) {\n    if (doc._ids && doc._ids[id]) {\n      var elms = doc._ids[id];\n\n      for (var i = 0; i < elms.length; i++) {\n        if (elms[i] === elm) {\n          elms.splice(i, 1);\n          --i;\n        }\n      }\n\n      if (elms.length === 0) {\n        delete doc._ids[id];\n      }\n    }\n  }\n}\n\nvar ElementImpl = /*#__PURE__*/function (_NodeImpl) {\n  _inherits(ElementImpl, _NodeImpl);\n\n  var _super = _createSuper(ElementImpl);\n\n  function ElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, ElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n\n    _this._initSlotableMixin();\n\n    _this._namespaceURI = privateData.namespace;\n    _this._prefix = privateData.prefix;\n    _this._localName = privateData.localName;\n    _this._ceState = privateData.ceState;\n    _this._ceDefinition = privateData.ceDefinition;\n    _this._isValue = privateData.isValue;\n    _this._shadowRoot = null;\n    _this._ceReactionQueue = [];\n    _this.nodeType = NODE_TYPE.ELEMENT_NODE;\n    _this.scrollTop = 0;\n    _this.scrollLeft = 0;\n    _this._attributeList = []; // Used for caching.\n\n    _this._attributesByNameMap = new Map();\n    _this._attributes = NamedNodeMap.createImpl(_this._globalObject, [], {\n      element: _assertThisInitialized(_this)\n    });\n    _this._cachedTagName = null;\n    return _this;\n  }\n\n  _createClass(ElementImpl, [{\n    key: \"_attach\",\n    value: function _attach() {\n      namedPropertiesWindow.nodeAttachedToDocument(this);\n      var id = this.getAttributeNS(null, \"id\");\n\n      if (id) {\n        attachId(id, this, this._ownerDocument);\n      }\n\n      _get(_getPrototypeOf(ElementImpl.prototype), \"_attach\", this).call(this);\n    }\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      _get(_getPrototypeOf(ElementImpl.prototype), \"_detach\", this).call(this);\n\n      namedPropertiesWindow.nodeDetachedFromDocument(this);\n      var id = this.getAttributeNS(null, \"id\");\n\n      if (id) {\n        detachId(id, this, this._ownerDocument);\n      }\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      this._modified();\n\n      namedPropertiesWindow.elementAttributeModified(this, name, value, oldValue);\n\n      if (name === \"id\" && this._attached) {\n        var doc = this._ownerDocument;\n        detachId(oldValue, this, doc);\n        attachId(value, this, doc);\n      } // update classList\n\n\n      if (name === \"class\" && this._classList !== undefined) {\n        this._classList.attrModified();\n      }\n\n      this._attrModifiedSlotableMixin(name, value, oldValue);\n    }\n  }, {\n    key: \"namespaceURI\",\n    get: function get() {\n      return this._namespaceURI;\n    }\n  }, {\n    key: \"prefix\",\n    get: function get() {\n      return this._prefix;\n    }\n  }, {\n    key: \"localName\",\n    get: function get() {\n      return this._localName;\n    }\n  }, {\n    key: \"_qualifiedName\",\n    get: function get() {\n      return this._prefix !== null ? this._prefix + \":\" + this._localName : this._localName;\n    }\n  }, {\n    key: \"tagName\",\n    get: function get() {\n      // This getter can be a hotpath in getComputedStyle.\n      // All these are invariants during the instance lifetime so we can safely cache the computed tagName.\n      // We could create it during construction but since we already identified this as potentially slow we do it lazily.\n      if (this._cachedTagName === null) {\n        if (this.namespaceURI === HTML_NS && this._ownerDocument._parsingMode === \"html\") {\n          this._cachedTagName = asciiUppercase(this._qualifiedName);\n        } else {\n          this._cachedTagName = this._qualifiedName;\n        }\n      }\n\n      return this._cachedTagName;\n    }\n  }, {\n    key: \"attributes\",\n    get: function get() {\n      return this._attributes;\n    } // https://w3c.github.io/DOM-Parsing/#dom-element-outerhtml\n\n  }, {\n    key: \"outerHTML\",\n    get: function get() {\n      // TODO: maybe parse5 can give us a hook where it serializes the node itself too:\n      // https://github.com/inikulin/parse5/issues/230\n      // Alternatively, if we can create a virtual node in domSymbolTree, that'd also work.\n      // It's currently prevented by the fact that a node can't be duplicated in the same tree.\n      // Then we could get rid of all the code for childNodesForSerializing.\n      return fragmentSerialization({\n        childNodesForSerializing: [this],\n        _ownerDocument: this._ownerDocument\n      }, {\n        requireWellFormed: true,\n        globalObject: this._globalObject\n      });\n    },\n    set: function set(markup) {\n      var parent = domSymbolTree.parent(this);\n      var document = this._ownerDocument;\n\n      if (!parent) {\n        return;\n      }\n\n      if (parent.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n        throw DOMException.create(this._globalObject, [\"Modifications are not allowed for this document\", \"NoModificationAllowedError\"]);\n      }\n\n      if (parent.nodeType === NODE_TYPE.DOCUMENT_FRAGMENT_NODE) {\n        parent = document.createElementNS(HTML_NS, \"body\");\n      }\n\n      var fragment = parseFragment(markup, parent);\n      var contextObjectParent = domSymbolTree.parent(this);\n\n      contextObjectParent._replace(fragment, this);\n    }\n  }, {\n    key: \"classList\",\n    get: function get() {\n      if (this._classList === undefined) {\n        this._classList = DOMTokenList.createImpl(this._globalObject, [], {\n          element: this,\n          attributeLocalName: \"class\"\n        });\n      }\n\n      return this._classList;\n    }\n  }, {\n    key: \"hasAttributes\",\n    value: function hasAttributes() {\n      return attributes.hasAttributes(this);\n    }\n  }, {\n    key: \"getAttributeNames\",\n    value: function getAttributeNames() {\n      return attributes.attributeNames(this);\n    }\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(name) {\n      var attr = attributes.getAttributeByName(this, name);\n\n      if (!attr) {\n        return null;\n      }\n\n      return attr._value;\n    }\n  }, {\n    key: \"getAttributeNS\",\n    value: function getAttributeNS(namespace, localName) {\n      var attr = attributes.getAttributeByNameNS(this, namespace, localName);\n\n      if (!attr) {\n        return null;\n      }\n\n      return attr._value;\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(name, value) {\n      validateNames.name(this._globalObject, name);\n\n      if (this._namespaceURI === HTML_NS && this._ownerDocument._parsingMode === \"html\") {\n        name = asciiLowercase(name);\n      }\n\n      var attribute = attributes.getAttributeByName(this, name);\n\n      if (attribute === null) {\n        var newAttr = this._ownerDocument._createAttribute({\n          localName: name,\n          value: value\n        });\n\n        attributes.appendAttribute(this, newAttr);\n        return;\n      }\n\n      attributes.changeAttribute(this, attribute, value);\n    }\n  }, {\n    key: \"setAttributeNS\",\n    value: function setAttributeNS(namespace, name, value) {\n      var extracted = validateNames.validateAndExtract(this._globalObject, namespace, name); // Because of widespread use of this method internally, e.g. to manually implement attribute/content reflection, we\n      // centralize the conversion to a string here, so that all call sites don't have to do it.\n\n      value = \"\".concat(value);\n      attributes.setAttributeValue(this, extracted.localName, value, extracted.prefix, extracted.namespace);\n    }\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(name) {\n      attributes.removeAttributeByName(this, name);\n    }\n  }, {\n    key: \"removeAttributeNS\",\n    value: function removeAttributeNS(namespace, localName) {\n      attributes.removeAttributeByNameNS(this, namespace, localName);\n    }\n  }, {\n    key: \"toggleAttribute\",\n    value: function toggleAttribute(qualifiedName, force) {\n      validateNames.name(this._globalObject, qualifiedName);\n\n      if (this._namespaceURI === HTML_NS && this._ownerDocument._parsingMode === \"html\") {\n        qualifiedName = asciiLowercase(qualifiedName);\n      }\n\n      var attribute = attributes.getAttributeByName(this, qualifiedName);\n\n      if (attribute === null) {\n        if (force === undefined || force === true) {\n          var newAttr = this._ownerDocument._createAttribute({\n            localName: qualifiedName,\n            value: \"\"\n          });\n\n          attributes.appendAttribute(this, newAttr);\n          return true;\n        }\n\n        return false;\n      }\n\n      if (force === undefined || force === false) {\n        attributes.removeAttributeByName(this, qualifiedName);\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(name) {\n      if (this._namespaceURI === HTML_NS && this._ownerDocument._parsingMode === \"html\") {\n        name = asciiLowercase(name);\n      }\n\n      return attributes.hasAttributeByName(this, name);\n    }\n  }, {\n    key: \"hasAttributeNS\",\n    value: function hasAttributeNS(namespace, localName) {\n      if (namespace === \"\") {\n        namespace = null;\n      }\n\n      return attributes.hasAttributeByNameNS(this, namespace, localName);\n    }\n  }, {\n    key: \"getAttributeNode\",\n    value: function getAttributeNode(name) {\n      return attributes.getAttributeByName(this, name);\n    }\n  }, {\n    key: \"getAttributeNodeNS\",\n    value: function getAttributeNodeNS(namespace, localName) {\n      return attributes.getAttributeByNameNS(this, namespace, localName);\n    }\n  }, {\n    key: \"setAttributeNode\",\n    value: function setAttributeNode(attr) {\n      // eslint-disable-next-line no-restricted-properties\n      return attributes.setAttribute(this, attr);\n    }\n  }, {\n    key: \"setAttributeNodeNS\",\n    value: function setAttributeNodeNS(attr) {\n      // eslint-disable-next-line no-restricted-properties\n      return attributes.setAttribute(this, attr);\n    }\n  }, {\n    key: \"removeAttributeNode\",\n    value: function removeAttributeNode(attr) {\n      // eslint-disable-next-line no-restricted-properties\n      if (!attributes.hasAttribute(this, attr)) {\n        throw DOMException.create(this._globalObject, [\"Tried to remove an attribute that was not present\", \"NotFoundError\"]);\n      } // eslint-disable-next-line no-restricted-properties\n\n\n      attributes.removeAttribute(this, attr);\n      return attr;\n    }\n  }, {\n    key: \"getBoundingClientRect\",\n    value: function getBoundingClientRect() {\n      return {\n        x: 0,\n        y: 0,\n        bottom: 0,\n        height: 0,\n        left: 0,\n        right: 0,\n        top: 0,\n        width: 0\n      };\n    }\n  }, {\n    key: \"getClientRects\",\n    value: function getClientRects() {\n      return [];\n    }\n  }, {\n    key: \"scrollWidth\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"scrollHeight\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"clientTop\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"clientLeft\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"clientWidth\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"clientHeight\",\n    get: function get() {\n      return 0;\n    } // https://dom.spec.whatwg.org/#dom-element-attachshadow\n\n  }, {\n    key: \"attachShadow\",\n    value: function attachShadow(init) {\n      var _ownerDocument = this._ownerDocument,\n          _namespaceURI = this._namespaceURI,\n          _localName = this._localName,\n          _isValue = this._isValue;\n\n      if (this.namespaceURI !== HTML_NS) {\n        throw DOMException.create(this._globalObject, [\"This element does not support attachShadow. This element is not part of the HTML namespace.\", \"NotSupportedError\"]);\n      }\n\n      if (!isValidHostElementName(_localName) && !isValidCustomElementName(_localName)) {\n        var message = \"This element does not support attachShadow. This element is not a custom element nor \" + \"a standard element supporting a shadow root.\";\n        throw DOMException.create(this._globalObject, [message, \"NotSupportedError\"]);\n      }\n\n      if (isValidCustomElementName(_localName) || _isValue) {\n        var definition = lookupCEDefinition(_ownerDocument, _namespaceURI, _localName, _isValue);\n\n        if (definition && definition.disableShadow) {\n          throw DOMException.create(this._globalObject, [\"Shadow root cannot be create on a custom element with disabled shadow\", \"NotSupportedError\"]);\n        }\n      }\n\n      if (this._shadowRoot !== null) {\n        throw DOMException.create(this._globalObject, [\"Shadow root cannot be created on a host which already hosts a shadow tree.\", \"NotSupportedError\"]);\n      }\n\n      var shadow = ShadowRoot.createImpl(this._globalObject, [], {\n        ownerDocument: this.ownerDocument,\n        mode: init.mode,\n        host: this\n      });\n      this._shadowRoot = shadow;\n      return shadow;\n    } // https://dom.spec.whatwg.org/#dom-element-shadowroot\n\n  }, {\n    key: \"shadowRoot\",\n    get: function get() {\n      var shadow = this._shadowRoot;\n\n      if (shadow === null || shadow.mode === \"closed\") {\n        return null;\n      }\n\n      return shadow;\n    } // https://dom.spec.whatwg.org/#insert-adjacent\n\n  }, {\n    key: \"_insertAdjacent\",\n    value: function _insertAdjacent(element, where, node) {\n      where = asciiLowercase(where);\n\n      if (where === \"beforebegin\") {\n        if (element.parentNode === null) {\n          return null;\n        }\n\n        return element.parentNode._preInsert(node, element);\n      }\n\n      if (where === \"afterbegin\") {\n        return element._preInsert(node, element.firstChild);\n      }\n\n      if (where === \"beforeend\") {\n        return element._preInsert(node, null);\n      }\n\n      if (where === \"afterend\") {\n        if (element.parentNode === null) {\n          return null;\n        }\n\n        return element.parentNode._preInsert(node, element.nextSibling);\n      }\n\n      throw DOMException.create(this._globalObject, ['Must provide one of \"beforebegin\", \"afterbegin\", \"beforeend\", or \"afterend\".', \"SyntaxError\"]);\n    }\n  }, {\n    key: \"insertAdjacentElement\",\n    value: function insertAdjacentElement(where, element) {\n      return this._insertAdjacent(this, where, element);\n    }\n  }, {\n    key: \"insertAdjacentText\",\n    value: function insertAdjacentText(where, data) {\n      var text = Text.createImpl(this._globalObject, [], {\n        data: data,\n        ownerDocument: this._ownerDocument\n      });\n\n      this._insertAdjacent(this, where, text);\n    } // https://w3c.github.io/DOM-Parsing/#dom-element-insertadjacenthtml\n\n  }, {\n    key: \"insertAdjacentHTML\",\n    value: function insertAdjacentHTML(position, text) {\n      position = asciiLowercase(position);\n      var context;\n\n      switch (position) {\n        case \"beforebegin\":\n        case \"afterend\":\n          {\n            context = this.parentNode;\n\n            if (context === null || context.nodeType === NODE_TYPE.DOCUMENT_NODE) {\n              throw DOMException.create(this._globalObject, [\"Cannot insert HTML adjacent to parent-less nodes or children of document nodes.\", \"NoModificationAllowedError\"]);\n            }\n\n            break;\n          }\n\n        case \"afterbegin\":\n        case \"beforeend\":\n          {\n            context = this;\n            break;\n          }\n\n        default:\n          {\n            throw DOMException.create(this._globalObject, ['Must provide one of \"beforebegin\", \"afterbegin\", \"beforeend\", or \"afterend\".', \"SyntaxError\"]);\n          }\n      }\n\n      if (context.nodeType !== NODE_TYPE.ELEMENT_NODE || context._ownerDocument._parsingMode === \"html\" && context._localName === \"html\" && context._namespaceURI === HTML_NS) {\n        context = context._ownerDocument.createElement(\"body\");\n      }\n\n      var fragment = parseFragment(text, context);\n\n      switch (position) {\n        case \"beforebegin\":\n          {\n            this.parentNode._insert(fragment, this);\n\n            break;\n          }\n\n        case \"afterbegin\":\n          {\n            this._insert(fragment, this.firstChild);\n\n            break;\n          }\n\n        case \"beforeend\":\n          {\n            this._append(fragment);\n\n            break;\n          }\n\n        case \"afterend\":\n          {\n            this.parentNode._insert(fragment, this.nextSibling);\n\n            break;\n          }\n      }\n    }\n  }, {\n    key: \"closest\",\n    value: function closest(selectors) {\n      var matcher = addNwsapi(this);\n      return matcher.closest(selectors, idlUtils.wrapperForImpl(this));\n    }\n  }]);\n\n  return ElementImpl;\n}(NodeImpl);\n\nmixin(ElementImpl.prototype, NonDocumentTypeChildNode.prototype);\nmixin(ElementImpl.prototype, ParentNodeImpl.prototype);\nmixin(ElementImpl.prototype, ChildNodeImpl.prototype);\nmixin(ElementImpl.prototype, SlotableMixinImpl.prototype);\nmixin(ElementImpl.prototype, InnerHTMLImpl.prototype);\nElementImpl.prototype.getElementsByTagName = memoizeQuery(function (qualifiedName) {\n  return listOfElementsWithQualifiedName(qualifiedName, this);\n});\nElementImpl.prototype.getElementsByTagNameNS = memoizeQuery(function (namespace, localName) {\n  return listOfElementsWithNamespaceAndLocalName(namespace, localName, this);\n});\nElementImpl.prototype.getElementsByClassName = memoizeQuery(function (classNames) {\n  return listOfElementsWithClassNames(classNames, this);\n});\n\nElementImpl.prototype.matches = function (selectors) {\n  var matcher = addNwsapi(this);\n  return matcher.match(selectors, idlUtils.wrapperForImpl(this));\n};\n\nElementImpl.prototype.webkitMatchesSelector = ElementImpl.prototype.matches;\nmodule.exports = {\n  implementation: ElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _require = require(\"../../browser/parser\"),\n    parseIntoDocument = _require.parseIntoDocument;\n\nvar Document = require(\"../generated/Document\");\n\nexports.implementation = /*#__PURE__*/function () {\n  function DOMParserImpl(globalObject) {\n    _classCallCheck(this, DOMParserImpl);\n\n    this._globalObject = globalObject;\n  }\n\n  _createClass(DOMParserImpl, [{\n    key: \"parseFromString\",\n    value: function parseFromString(string, contentType) {\n      switch (String(contentType)) {\n        case \"text/html\":\n          {\n            return this.createScriptingDisabledDocument(\"html\", contentType, string);\n          }\n\n        case \"text/xml\":\n        case \"application/xml\":\n        case \"application/xhtml+xml\":\n        case \"image/svg+xml\":\n          {\n            try {\n              return this.createScriptingDisabledDocument(\"xml\", contentType, string);\n            } catch (error) {\n              var document = this.createScriptingDisabledDocument(\"xml\", contentType);\n              var element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n              element.textContent = error.message;\n              document.appendChild(element);\n              return document;\n            }\n          }\n\n        default:\n          throw new TypeError(\"Invalid contentType\");\n      }\n    }\n  }, {\n    key: \"createScriptingDisabledDocument\",\n    value: function createScriptingDisabledDocument(parsingMode, contentType, string) {\n      var document = Document.createImpl(this._globalObject, [], {\n        options: {\n          parsingMode: parsingMode,\n          encoding: \"UTF-8\",\n          contentType: contentType,\n          readyState: \"complete\",\n          scriptingDisabled: true // TODO: somehow set URL to active document's URL\n\n        }\n      });\n\n      if (string !== undefined) {\n        parseIntoDocument(string, document);\n      }\n\n      return document;\n    }\n  }]);\n\n  return DOMParserImpl;\n}();","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _assertThisInitialized = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/assertThisInitialized\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar ValidityState = require(\"../generated/ValidityState\");\n\nvar DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar _require3 = require(\"../helpers/form-controls\"),\n    getLabelsForLabelable = _require3.getLabelsForLabelable,\n    formOwner = _require3.formOwner,\n    isDisabled = _require3.isDisabled;\n\nvar _require4 = require(\"../helpers/strings\"),\n    parseNonNegativeInteger = _require4.parseNonNegativeInteger;\n\nvar HTMLSelectElementImpl = /*#__PURE__*/function (_HTMLElementImpl, _idlUtils$supportedPr, _idlUtils$indexedSetN, _idlUtils$indexedSetE) {\n  _inherits(HTMLSelectElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLSelectElementImpl);\n\n  function HTMLSelectElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLSelectElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this._options = HTMLOptionsCollection.createImpl(_this._globalObject, [], {\n      element: _assertThisInitialized(_this),\n      query: function query() {\n        // Customized domSymbolTree.treeToArray() clone.\n        var array = [];\n\n        var _iterator = _createForOfIteratorHelper(domSymbolTree.childrenIterator(_assertThisInitialized(_this))),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var child = _step.value;\n\n            if (child._localName === \"option\") {\n              array.push(child);\n            } else if (child._localName === \"optgroup\") {\n              var _iterator2 = _createForOfIteratorHelper(domSymbolTree.childrenIterator(child)),\n                  _step2;\n\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var childOfGroup = _step2.value;\n\n                  if (childOfGroup._localName === \"option\") {\n                    array.push(childOfGroup);\n                  }\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return array;\n      }\n    });\n    _this._selectedOptions = null; // lazy\n\n    _this._customValidityErrorMessage = \"\";\n    _this._labels = null;\n    return _this;\n  }\n\n  _createClass(HTMLSelectElementImpl, [{\n    key: \"_formReset\",\n    value: function _formReset() {\n      var _iterator3 = _createForOfIteratorHelper(this.options),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var option = _step3.value;\n          option._selectedness = option.hasAttributeNS(null, \"selected\");\n          option._dirtyness = false;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      this._askedForAReset();\n    }\n  }, {\n    key: \"_askedForAReset\",\n    value: function _askedForAReset() {\n      if (this.hasAttributeNS(null, \"multiple\")) {\n        return;\n      }\n\n      var selected = this.options.filter(function (opt) {\n        return opt._selectedness;\n      });\n      var size = this._displaySize;\n\n      if (size === 1 && !selected.length) {\n        // select the first option that is not disabled\n        var _iterator4 = _createForOfIteratorHelper(this.options),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var option = _step4.value;\n            var disabled = option.hasAttributeNS(null, \"disabled\");\n            var parentNode = domSymbolTree.parent(option);\n\n            if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttributeNS(null, \"disabled\")) {\n              disabled = true;\n            }\n\n            if (!disabled) {\n              // (do not set dirty)\n              option._selectedness = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else if (selected.length >= 2) {\n        // select the last selected option\n        selected.forEach(function (option, index) {\n          option._selectedness = index === selected.length - 1;\n        });\n      }\n    }\n  }, {\n    key: \"_descendantAdded\",\n    value: function _descendantAdded(parent, child) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_descendantAdded\", this).call(this, parent, child);\n    }\n  }, {\n    key: \"_descendantRemoved\",\n    value: function _descendantRemoved(parent, child) {\n      if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_descendantRemoved\", this).call(this, parent, child);\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (name === \"multiple\" || name === \"size\") {\n        this._askedForAReset();\n      }\n\n      _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n    }\n  }, {\n    key: \"_displaySize\",\n    get: function get() {\n      if (this.hasAttributeNS(null, \"size\")) {\n        var size = parseNonNegativeInteger(this.getAttributeNS(null, \"size\"));\n\n        if (size !== null) {\n          return size;\n        }\n      }\n\n      return this.hasAttributeNS(null, \"multiple\") ? 4 : 1;\n    }\n  }, {\n    key: \"_mutable\",\n    get: function get() {\n      return !isDisabled(this);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    }\n  }, {\n    key: \"selectedOptions\",\n    get: function get() {\n      var _this2 = this;\n\n      return HTMLCollection.createImpl(this._globalObject, [], {\n        element: this,\n        query: function query() {\n          return domSymbolTree.treeToArray(_this2, {\n            filter: function filter(node) {\n              return node._localName === \"option\" && node._selectedness === true;\n            }\n          });\n        }\n      });\n    }\n  }, {\n    key: \"selectedIndex\",\n    get: function get() {\n      for (var i = 0; i < this.options.length; i++) {\n        if (this.options.item(i)._selectedness) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    set: function set(index) {\n      for (var i = 0; i < this.options.length; i++) {\n        this.options.item(i)._selectedness = false;\n      }\n\n      var selectedOption = this.options.item(index);\n\n      if (selectedOption) {\n        selectedOption._selectedness = true;\n        selectedOption._dirtyness = true;\n      }\n    }\n  }, {\n    key: \"labels\",\n    get: function get() {\n      return getLabelsForLabelable(this);\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      var _iterator5 = _createForOfIteratorHelper(this.options),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var option = _step5.value;\n\n          if (option._selectedness) {\n            return option.value;\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return \"\";\n    },\n    set: function set(val) {\n      var _iterator6 = _createForOfIteratorHelper(this.options),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var option = _step6.value;\n\n          if (option.value === val) {\n            option._selectedness = true;\n            option._dirtyness = true;\n          } else {\n            option._selectedness = false;\n          }\n\n          option._modified();\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"form\",\n    get: function get() {\n      return formOwner(this);\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.hasAttributeNS(null, \"multiple\") ? \"select-multiple\" : \"select-one\";\n    }\n  }, {\n    key: _idlUtils$supportedPr,\n    get: function get() {\n      return this.options[idlUtils.supportedPropertyIndices];\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.options.length;\n    }\n  }, {\n    key: \"length\",\n    set: function set(value) {\n      this.options.length = value;\n    }\n  }, {\n    key: \"item\",\n    value: function item(index) {\n      return this.options.item(index);\n    }\n  }, {\n    key: \"namedItem\",\n    value: function namedItem(name) {\n      return this.options.namedItem(name);\n    }\n  }, {\n    key: _idlUtils$indexedSetN,\n    value: function value(index, _value) {\n      return this.options[idlUtils.indexedSetNew](index, _value);\n    }\n  }, {\n    key: _idlUtils$indexedSetE,\n    value: function value(index, _value2) {\n      return this.options[idlUtils.indexedSetExisting](index, _value2);\n    }\n  }, {\n    key: \"add\",\n    value: function add(opt, before) {\n      this.options.add(opt, before);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(index) {\n      if (arguments.length > 0) {\n        index = conversions.long(index, {\n          context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n        });\n        this.options.remove(index);\n      } else {\n        _get(_getPrototypeOf(HTMLSelectElementImpl.prototype), \"remove\", this).call(this);\n      }\n    }\n  }, {\n    key: \"_barredFromConstraintValidationSpecialization\",\n    value: function _barredFromConstraintValidationSpecialization() {\n      return this.hasAttributeNS(null, \"readonly\");\n    } // Constraint validation: If the element has its required attribute specified,\n    // and either none of the option elements in the select element's list of options\n    // have their selectedness set to true, or the only option element in the select\n    // element's list of options with its selectedness set to true is the placeholder\n    // label option, then the element is suffering from being missing.\n\n  }, {\n    key: \"validity\",\n    get: function get() {\n      var _this3 = this;\n\n      if (!this._validity) {\n        var state = {\n          valueMissing: function valueMissing() {\n            if (!_this3.hasAttributeNS(null, \"required\")) {\n              return false;\n            }\n\n            var selectedOptionIndex = _this3.selectedIndex;\n            return selectedOptionIndex < 0 || selectedOptionIndex === 0 && _this3._hasPlaceholderOption;\n          }\n        };\n        this._validity = ValidityState.createImpl(this._globalObject, [], {\n          element: this,\n          state: state\n        });\n      }\n\n      return this._validity;\n    } // If a select element has a required attribute specified, does not have a multiple attribute\n    // specified, and has a display size of 1; and if the value of the first option element in the\n    // select element's list of options (if any) is the empty string, and that option element's parent\n    // node is the select element(and not an optgroup element), then that option is the select\n    // element's placeholder label option.\n    // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n\n  }, {\n    key: \"_hasPlaceholderOption\",\n    get: function get() {\n      return this.hasAttributeNS(null, \"required\") && !this.hasAttributeNS(null, \"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n    }\n  }]);\n\n  return HTMLSelectElementImpl;\n}(HTMLElementImpl, idlUtils.supportedPropertyIndices, idlUtils.indexedSetNew, idlUtils.indexedSetExisting);\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
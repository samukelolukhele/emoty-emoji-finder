{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar _require = require(\"../helpers/details\"),\n    isSummaryForParentDetails = _require.isSummaryForParentDetails;\n\nvar focusing = require(\"../helpers/focusing\");\n\nvar _require2 = require(\"../helpers/namespaces\"),\n    HTML_NS = _require2.HTML_NS,\n    SVG_NS = _require2.SVG_NS;\n\nvar DOMStringMap = require(\"../generated/DOMStringMap\");\n\nvar tabIndexReflectAllowedHTMLElements = new Set([\"a\", \"area\", \"button\", \"frame\", \"iframe\", \"input\", \"object\", \"select\", \"textarea\"]);\n\nvar HTMLOrSVGElementImpl = /*#__PURE__*/function () {\n  function HTMLOrSVGElementImpl() {\n    _classCallCheck(this, HTMLOrSVGElementImpl);\n  }\n\n  _createClass(HTMLOrSVGElementImpl, [{\n    key: \"_initHTMLOrSVGElement\",\n    value: function _initHTMLOrSVGElement() {\n      this._tabIndex = 0;\n      this._dataset = DOMStringMap.createImpl(this._globalObject, [], {\n        element: this\n      });\n    }\n  }, {\n    key: \"dataset\",\n    get: function get() {\n      return this._dataset;\n    } // TODO this should be [Reflect]able if we added default value support to webidl2js's [Reflect]\n\n  }, {\n    key: \"tabIndex\",\n    get: function get() {\n      if (!this.hasAttributeNS(null, \"tabindex\")) {\n        if (this.namespaceURI === HTML_NS && (tabIndexReflectAllowedHTMLElements.has(this._localName) || this._localName === \"summary\" && isSummaryForParentDetails(this)) || this.namespaceURI === SVG_NS && this._localName === \"a\") {\n          return 0;\n        }\n\n        return -1;\n      }\n\n      return conversions.long(this.getAttributeNS(null, \"tabindex\"));\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"tabindex\", String(value));\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      if (!focusing.isFocusableAreaElement(this)) {\n        return;\n      }\n\n      var ownerDocument = this._ownerDocument;\n      var previous = ownerDocument._lastFocusedElement;\n\n      if (previous === this) {\n        return;\n      }\n\n      ownerDocument._lastFocusedElement = null;\n\n      if (previous) {\n        focusing.fireFocusEventWithTargetAdjustment(\"blur\", previous, this);\n        focusing.fireFocusEventWithTargetAdjustment(\"focusout\", previous, this, {\n          bubbles: true\n        });\n      } else {\n        var frameElement = ownerDocument._defaultView._frameElement;\n\n        if (frameElement) {\n          var frameLastFocusedElement = frameElement.ownerDocument._lastFocusedElement;\n          frameElement.ownerDocument._lastFocusedElement = null;\n          focusing.fireFocusEventWithTargetAdjustment(\"blur\", frameLastFocusedElement, null);\n          focusing.fireFocusEventWithTargetAdjustment(\"focusout\", frameLastFocusedElement, null, {\n            bubbles: true\n          });\n          frameElement.ownerDocument._lastFocusedElement = frameElement;\n        }\n      }\n\n      ownerDocument._lastFocusedElement = this;\n      focusing.fireFocusEventWithTargetAdjustment(\"focus\", this, previous);\n      focusing.fireFocusEventWithTargetAdjustment(\"focusin\", this, previous, {\n        bubbles: true\n      });\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (this._ownerDocument._lastFocusedElement !== this || !focusing.isFocusableAreaElement(this)) {\n        return;\n      }\n\n      this._ownerDocument._lastFocusedElement = null;\n      focusing.fireFocusEventWithTargetAdjustment(\"blur\", this, this._ownerDocument);\n      focusing.fireFocusEventWithTargetAdjustment(\"focusout\", this, this._ownerDocument, {\n        bubbles: true\n      });\n      focusing.fireFocusEventWithTargetAdjustment(\"focus\", this._ownerDocument, this);\n      focusing.fireFocusEventWithTargetAdjustment(\"focusin\", this._ownerDocument, this, {\n        bubbles: true\n      });\n    }\n  }]);\n\n  return HTMLOrSVGElementImpl;\n}();\n\nexports.implementation = HTMLOrSVGElementImpl;","map":null,"metadata":{},"sourceType":"script"}
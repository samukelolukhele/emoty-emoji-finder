{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar _require = require(\"../../utils\"),\n    mixin = _require.mixin;\n\nvar ElementImpl = require(\"./Element-impl\").implementation;\n\nvar MouseEvent = require(\"../generated/MouseEvent\");\n\nvar ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\n\nvar GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\n\nvar HTMLOrSVGElementImpl = require(\"./HTMLOrSVGElement-impl\").implementation;\n\nvar _require2 = require(\"../helpers/traversal\"),\n    firstChildWithLocalName = _require2.firstChildWithLocalName;\n\nvar _require3 = require(\"../helpers/form-controls\"),\n    isDisabled = _require3.isDisabled;\n\nvar _require4 = require(\"../helpers/events\"),\n    fireAnEvent = _require4.fireAnEvent;\n\nvar _require5 = require(\"../helpers/strings\"),\n    asciiLowercase = _require5.asciiLowercase;\n\nvar HTMLElementImpl = /*#__PURE__*/function (_ElementImpl) {\n  _inherits(HTMLElementImpl, _ElementImpl);\n\n  var _super = _createSuper(HTMLElementImpl);\n\n  function HTMLElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n\n    _this._initHTMLOrSVGElement();\n\n    _this._initElementCSSInlineStyle();\n\n    _this._initGlobalEvents();\n\n    _this._clickInProgress = false; // <summary> uses HTMLElement and has activation behavior\n\n    _this._hasActivationBehavior = _this._localName === \"summary\";\n    return _this;\n  }\n\n  _createClass(HTMLElementImpl, [{\n    key: \"_activationBehavior\",\n    value: function _activationBehavior() {\n      var parent = this.parentNode;\n\n      if (parent && parent._localName === \"details\" && this === firstChildWithLocalName(parent, \"summary\")) {\n        if (parent.hasAttributeNS(null, \"open\")) {\n          parent.removeAttributeNS(null, \"open\");\n        } else {\n          parent.setAttributeNS(null, \"open\", \"\");\n        }\n      }\n    } // https://html.spec.whatwg.org/multipage/dom.html#the-translate-attribute\n\n  }, {\n    key: \"translate\",\n    get: function get() {\n      var translateAttr = this.getAttributeNS(null, \"translate\");\n      var translateAttrString = asciiLowercase(translateAttr || \"\");\n\n      if (translateAttrString === \"yes\" || translateAttr && translateAttrString === \"\") {\n        return true;\n      } else if (translateAttrString === \"no\") {\n        return false;\n      }\n\n      if (this === this.ownerDocument.documentElement) {\n        return true;\n      }\n\n      return this.parentElement && this.parentElement.translate;\n    },\n    set: function set(value) {\n      if (value === true) {\n        this.setAttributeNS(null, \"translate\", \"yes\");\n      } else {\n        this.setAttributeNS(null, \"translate\", \"no\");\n      }\n    }\n  }, {\n    key: \"click\",\n    value: function click() {\n      // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n      // https://html.spec.whatwg.org/multipage/webappapis.html#fire-a-synthetic-mouse-event\n      if (isDisabled(this)) {\n        return;\n      }\n\n      if (this._clickInProgress) {\n        return;\n      }\n\n      this._clickInProgress = true; // https://github.com/whatwg/html/issues/4451\n      // https://github.com/whatwg/html/issues/4452\n\n      fireAnEvent(\"click\", this, MouseEvent, {\n        bubbles: true,\n        cancelable: true,\n        composed: true,\n        isTrusted: false,\n        view: this.ownerDocument.defaultView\n      });\n      this._clickInProgress = false;\n    }\n  }, {\n    key: \"draggable\",\n    get: function get() {\n      var attributeValue = asciiLowercase(this.getAttributeNS(null, \"draggable\") || \"\");\n\n      if (attributeValue === \"true\") {\n        return true;\n      } else if (attributeValue === \"false\") {\n        return false;\n      }\n\n      return this._localName === \"img\" || this._localName === \"a\" && this.hasAttributeNS(null, \"href\");\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"draggable\", String(value));\n    }\n  }, {\n    key: \"dir\",\n    get: function get() {\n      var dirValue = this.getAttributeNS(null, \"dir\");\n\n      if (dirValue !== null) {\n        dirValue = dirValue.toLowerCase();\n\n        if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n          return dirValue;\n        }\n      }\n\n      return \"\";\n    },\n    set: function set(value) {\n      this.setAttributeNS(null, \"dir\", value);\n    } // Keep in sync with SVGElement. https://github.com/jsdom/jsdom/issues/2599\n\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n        this._settingCssText = true;\n        this._style.cssText = value;\n        this._settingCssText = false;\n      } else if (name.startsWith(\"on\")) {\n        this._globalEventChanged(name.substring(2));\n      }\n\n      _get(_getPrototypeOf(HTMLElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n    }\n  }, {\n    key: \"offsetParent\",\n    get: function get() {\n      return null;\n    }\n  }, {\n    key: \"offsetTop\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetLeft\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetWidth\",\n    get: function get() {\n      return 0;\n    }\n  }, {\n    key: \"offsetHeight\",\n    get: function get() {\n      return 0;\n    }\n  }]);\n\n  return HTMLElementImpl;\n}(ElementImpl);\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLOrSVGElementImpl.prototype);\nmodule.exports = {\n  implementation: HTMLElementImpl\n};","map":null,"metadata":{},"sourceType":"script"}
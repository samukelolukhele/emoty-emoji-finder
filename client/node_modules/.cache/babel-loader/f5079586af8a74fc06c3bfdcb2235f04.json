{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Mixin = require('../../utils/mixin');\n\nvar Tokenizer = require('../../tokenizer');\n\nvar LocationInfoTokenizerMixin = require('./tokenizer-mixin');\n\nvar LocationInfoOpenElementStackMixin = require('./open-element-stack-mixin');\n\nvar HTML = require('../../common/html'); //Aliases\n\n\nvar $ = HTML.TAG_NAMES;\n\nvar LocationInfoParserMixin = /*#__PURE__*/function (_Mixin) {\n  _inherits(LocationInfoParserMixin, _Mixin);\n\n  var _super = _createSuper(LocationInfoParserMixin);\n\n  function LocationInfoParserMixin(parser) {\n    var _this;\n\n    _classCallCheck(this, LocationInfoParserMixin);\n\n    _this = _super.call(this, parser);\n    _this.parser = parser;\n    _this.treeAdapter = _this.parser.treeAdapter;\n    _this.posTracker = null;\n    _this.lastStartTagToken = null;\n    _this.lastFosterParentingLocation = null;\n    _this.currentToken = null;\n    return _this;\n  }\n\n  _createClass(LocationInfoParserMixin, [{\n    key: \"_setStartLocation\",\n    value: function _setStartLocation(element) {\n      var loc = null;\n\n      if (this.lastStartTagToken) {\n        loc = Object.assign({}, this.lastStartTagToken.location);\n        loc.startTag = this.lastStartTagToken.location;\n      }\n\n      this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n    }\n  }, {\n    key: \"_setEndLocation\",\n    value: function _setEndLocation(element, closingToken) {\n      var loc = this.treeAdapter.getNodeSourceCodeLocation(element);\n\n      if (loc) {\n        if (closingToken.location) {\n          var ctLoc = closingToken.location;\n          var tn = this.treeAdapter.getTagName(element); // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n          // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n\n          var isClosingEndTag = closingToken.type === Tokenizer.END_TAG_TOKEN && tn === closingToken.tagName;\n          var endLoc = {};\n\n          if (isClosingEndTag) {\n            endLoc.endTag = Object.assign({}, ctLoc);\n            endLoc.endLine = ctLoc.endLine;\n            endLoc.endCol = ctLoc.endCol;\n            endLoc.endOffset = ctLoc.endOffset;\n          } else {\n            endLoc.endLine = ctLoc.startLine;\n            endLoc.endCol = ctLoc.startCol;\n            endLoc.endOffset = ctLoc.startOffset;\n          }\n\n          this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n      }\n    }\n  }, {\n    key: \"_getOverriddenMethods\",\n    value: function _getOverriddenMethods(mxn, orig) {\n      return {\n        _bootstrap: function _bootstrap(document, fragmentContext) {\n          orig._bootstrap.call(this, document, fragmentContext);\n\n          mxn.lastStartTagToken = null;\n          mxn.lastFosterParentingLocation = null;\n          mxn.currentToken = null;\n          var tokenizerMixin = Mixin.install(this.tokenizer, LocationInfoTokenizerMixin);\n          mxn.posTracker = tokenizerMixin.posTracker;\n          Mixin.install(this.openElements, LocationInfoOpenElementStackMixin, {\n            onItemPop: function onItemPop(element) {\n              mxn._setEndLocation(element, mxn.currentToken);\n            }\n          });\n        },\n        _runParsingLoop: function _runParsingLoop(scriptHandler) {\n          orig._runParsingLoop.call(this, scriptHandler); // NOTE: generate location info for elements\n          // that remains on open element stack\n\n\n          for (var i = this.openElements.stackTop; i >= 0; i--) {\n            mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);\n          }\n        },\n        //Token processing\n        _processTokenInForeignContent: function _processTokenInForeignContent(token) {\n          mxn.currentToken = token;\n\n          orig._processTokenInForeignContent.call(this, token);\n        },\n        _processToken: function _processToken(token) {\n          mxn.currentToken = token;\n\n          orig._processToken.call(this, token); //NOTE: <body> and <html> are never popped from the stack, so we need to updated\n          //their end location explicitly.\n\n\n          var requireExplicitUpdate = token.type === Tokenizer.END_TAG_TOKEN && (token.tagName === $.HTML || token.tagName === $.BODY && this.openElements.hasInScope($.BODY));\n\n          if (requireExplicitUpdate) {\n            for (var i = this.openElements.stackTop; i >= 0; i--) {\n              var element = this.openElements.items[i];\n\n              if (this.treeAdapter.getTagName(element) === token.tagName) {\n                mxn._setEndLocation(element, token);\n\n                break;\n              }\n            }\n          }\n        },\n        //Doctype\n        _setDocumentType: function _setDocumentType(token) {\n          orig._setDocumentType.call(this, token);\n\n          var documentChildren = this.treeAdapter.getChildNodes(this.document);\n          var cnLength = documentChildren.length;\n\n          for (var i = 0; i < cnLength; i++) {\n            var node = documentChildren[i];\n\n            if (this.treeAdapter.isDocumentTypeNode(node)) {\n              this.treeAdapter.setNodeSourceCodeLocation(node, token.location);\n              break;\n            }\n          }\n        },\n        //Elements\n        _attachElementToTree: function _attachElementToTree(element) {\n          //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.\n          //So we will use token location stored in this methods for the element.\n          mxn._setStartLocation(element);\n\n          mxn.lastStartTagToken = null;\n\n          orig._attachElementToTree.call(this, element);\n        },\n        _appendElement: function _appendElement(token, namespaceURI) {\n          mxn.lastStartTagToken = token;\n\n          orig._appendElement.call(this, token, namespaceURI);\n        },\n        _insertElement: function _insertElement(token, namespaceURI) {\n          mxn.lastStartTagToken = token;\n\n          orig._insertElement.call(this, token, namespaceURI);\n        },\n        _insertTemplate: function _insertTemplate(token) {\n          mxn.lastStartTagToken = token;\n\n          orig._insertTemplate.call(this, token);\n\n          var tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);\n          this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);\n        },\n        _insertFakeRootElement: function _insertFakeRootElement() {\n          orig._insertFakeRootElement.call(this);\n\n          this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);\n        },\n        //Comments\n        _appendCommentNode: function _appendCommentNode(token, parent) {\n          orig._appendCommentNode.call(this, token, parent);\n\n          var children = this.treeAdapter.getChildNodes(parent);\n          var commentNode = children[children.length - 1];\n          this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        },\n        //Text\n        _findFosterParentingLocation: function _findFosterParentingLocation() {\n          //NOTE: store last foster parenting location, so we will be able to find inserted text\n          //in case of foster parenting\n          mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);\n          return mxn.lastFosterParentingLocation;\n        },\n        _insertCharacters: function _insertCharacters(token) {\n          orig._insertCharacters.call(this, token);\n\n          var hasFosterParent = this._shouldFosterParentOnInsertion();\n\n          var parent = hasFosterParent && mxn.lastFosterParentingLocation.parent || this.openElements.currentTmplContent || this.openElements.current;\n          var siblings = this.treeAdapter.getChildNodes(parent);\n          var textNodeIdx = hasFosterParent && mxn.lastFosterParentingLocation.beforeElement ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1 : siblings.length - 1;\n          var textNode = siblings[textNodeIdx]; //NOTE: if we have location assigned by another token, then just update end position\n\n          var tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n\n          if (tnLoc) {\n            var _token$location = token.location,\n                endLine = _token$location.endLine,\n                endCol = _token$location.endCol,\n                endOffset = _token$location.endOffset;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, {\n              endLine: endLine,\n              endCol: endCol,\n              endOffset: endOffset\n            });\n          } else {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n          }\n        }\n      };\n    }\n  }]);\n\n  return LocationInfoParserMixin;\n}(Mixin);\n\nmodule.exports = LocationInfoParserMixin;","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n/**\n * emojiUnicode\n * Get the unicode code of an emoji in base 16.\n *\n * @name emojiUnicode\n * @function\n * @param {String} input The emoji character.\n * @returns {String} The base 16 unicode code.\n */\n\nfunction emojiUnicode(input) {\n  return emojiUnicode.raw(input).split(' ').map(function (val) {\n    return parseInt(val).toString(16);\n  }).join(' ');\n}\n/**\n * emojiunicode.raw\n * Get the unicode code points of an emoji in base 16.\n *\n * @name emojiunicode.raw\n * @function\n * @param {String} input The emoji character.\n * @returns {String} The unicode code points.\n */\n\n\nemojiUnicode.raw = function (input) {\n  if (input.length === 1) {\n    return input.charCodeAt(0).toString();\n  } else if (input.length > 1) {\n    var pairs = [];\n\n    for (var i = 0; i < input.length; i++) {\n      if ( // high surrogate\n      input.charCodeAt(i) >= 0xd800 && input.charCodeAt(i) <= 0xdbff) {\n        if (input.charCodeAt(i + 1) >= 0xdc00 && input.charCodeAt(i + 1) <= 0xdfff) {\n          // low surrogate\n          pairs.push((input.charCodeAt(i) - 0xd800) * 0x400 + (input.charCodeAt(i + 1) - 0xdc00) + 0x10000);\n        }\n      } else if (input.charCodeAt(i) < 0xd800 || input.charCodeAt(i) > 0xdfff) {\n        // modifiers and joiners\n        pairs.push(input.charCodeAt(i));\n      }\n    }\n\n    return pairs.join(' ');\n  }\n\n  return '';\n};\n\nmodule.exports = emojiUnicode;","map":null,"metadata":{},"sourceType":"script"}
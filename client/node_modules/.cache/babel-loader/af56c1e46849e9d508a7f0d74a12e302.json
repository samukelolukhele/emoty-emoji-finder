{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"./namespaces\"),\n    HTML_NS = _require.HTML_NS;\n\nvar _require2 = require(\"./create-element\"),\n    createElement = _require2.createElement,\n    getValidTagNames = _require2.getValidTagNames;\n\nvar _require3 = require(\"../generated/utils\"),\n    implForWrapper = _require3.implForWrapper,\n    wrapperForImpl = _require3.wrapperForImpl; // https://html.spec.whatwg.org/multipage/custom-elements.html#concept-already-constructed-marker\n\n\nvar ALREADY_CONSTRUCTED_MARKER = Symbol(\"already-constructed-marker\"); // https://html.spec.whatwg.org/multipage/dom.html#htmlconstructor\n\nfunction HTMLConstructor(globalObject, constructorName, newTarget) {\n  var registry = implForWrapper(globalObject.customElements);\n\n  if (newTarget === HTMLConstructor) {\n    throw new TypeError(\"Invalid constructor\");\n  }\n\n  var definition = registry._customElementDefinitions.find(function (entry) {\n    return entry.objectReference === newTarget;\n  });\n\n  if (definition === undefined) {\n    throw new TypeError(\"Invalid constructor, the constructor is not part of the custom element registry\");\n  }\n\n  var isValue = null;\n\n  if (definition.localName === definition.name) {\n    if (constructorName !== \"HTMLElement\") {\n      throw new TypeError(\"Invalid constructor, autonomous custom element should extend from HTMLElement\");\n    }\n  } else {\n    var validLocalNames = getValidTagNames(HTML_NS, constructorName);\n\n    if (!validLocalNames.includes(definition.localName)) {\n      throw new TypeError(\"\".concat(definition.localName, \" is not valid local name for \").concat(constructorName));\n    }\n\n    isValue = definition.name;\n  }\n\n  var prototype = newTarget.prototype;\n\n  if (prototype === null || typeof prototype !== \"object\") {\n    // The following line deviates from the specification. The HTMLElement prototype should be retrieved from the realm\n    // associated with the \"new.target\". Because it is impossible to get such information in jsdom, we fallback to the\n    // HTMLElement prototype associated with the current object.\n    prototype = globalObject.HTMLElement.prototype;\n  }\n\n  if (definition.constructionStack.length === 0) {\n    var documentImpl = implForWrapper(globalObject.document);\n\n    var _elementImpl = createElement(documentImpl, definition.localName, HTML_NS);\n\n    var _element = wrapperForImpl(_elementImpl);\n\n    Object.setPrototypeOf(_element, prototype);\n    _elementImpl._ceState = \"custom\";\n    _elementImpl._ceDefinition = definition;\n    _elementImpl._isValue = isValue;\n    return _element;\n  }\n\n  var elementImpl = definition.constructionStack[definition.constructionStack.length - 1];\n  var element = wrapperForImpl(elementImpl);\n\n  if (elementImpl === ALREADY_CONSTRUCTED_MARKER) {\n    throw new TypeError(\"This instance is already constructed\");\n  }\n\n  Object.setPrototypeOf(element, prototype);\n  definition.constructionStack[definition.constructionStack.length - 1] = ALREADY_CONSTRUCTED_MARKER;\n  return element;\n}\n\nmodule.exports = {\n  HTMLConstructor: HTMLConstructor\n};","map":null,"metadata":{},"sourceType":"script"}
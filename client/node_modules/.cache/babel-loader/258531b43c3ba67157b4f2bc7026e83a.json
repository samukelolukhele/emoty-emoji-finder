{"ast":null,"code":"\"use strict\";\n\nvar _require = require(\"./strings\"),\n    parseFloatingPointNumber = _require.parseFloatingPointNumber;\n\nvar _require2 = require(\"./dates-and-times\"),\n    parseDateString = _require2.parseDateString,\n    parseLocalDateAndTimeString = _require2.parseLocalDateAndTimeString,\n    parseMonthString = _require2.parseMonthString,\n    parseTimeString = _require2.parseTimeString,\n    parseWeekString = _require2.parseWeekString,\n    serializeDate = _require2.serializeDate,\n    serializeMonth = _require2.serializeMonth,\n    serializeNormalizedDateAndTime = _require2.serializeNormalizedDateAndTime,\n    serializeTime = _require2.serializeTime,\n    serializeWeek = _require2.serializeWeek,\n    parseDateAsWeek = _require2.parseDateAsWeek; // Necessary because Date.UTC() treats year within [0, 99] as [1900, 1999].\n\n\nfunction getUTCMs(year) {\n  var month = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var day = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  var hour = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var minute = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  var second = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  var millisecond = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;\n\n  if (year > 99 || year < 0) {\n    return Date.UTC(year, month - 1, day, hour, minute, second, millisecond);\n  }\n\n  var d = new Date(0);\n  d.setUTCFullYear(year);\n  d.setUTCMonth(month - 1);\n  d.setUTCDate(day);\n  d.setUTCHours(hour);\n  d.setUTCMinutes(minute);\n  d.setUTCSeconds(second, millisecond);\n  return d.valueOf();\n}\n\nvar dayOfWeekRelMondayLUT = [-1, 0, 1, 2, 3, -3, -2];\nexports.convertStringToNumberByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date: function date(input) {\n    var date = parseDateString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    return getUTCMs(date.year, date.month, date.day);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month: function month(input) {\n    var date = parseMonthString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    return (date.year - 1970) * 12 + (date.month - 1);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-number\n  week: function week(input) {\n    var date = parseWeekString(input);\n\n    if (date === null) {\n      return null;\n    }\n\n    var dateObj = new Date(getUTCMs(date.year)); // An HTML week starts on Monday, while 0 represents Sunday. Account for such.\n\n    var dayOfWeekRelMonday = dayOfWeekRelMondayLUT[dateObj.getUTCDay()];\n    return dateObj.setUTCDate(1 + 7 * (date.week - 1) - dayOfWeekRelMonday);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-number\n  time: function time(input) {\n    var time = parseTimeString(input);\n\n    if (time === null) {\n      return null;\n    }\n\n    return ((time.hour * 60 + time.minute) * 60 + time.second) * 1000 + time.millisecond;\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-string-number\n  \"datetime-local\": function datetimeLocal(input) {\n    var dateAndTime = parseLocalDateAndTimeString(input);\n\n    if (dateAndTime === null) {\n      return null;\n    }\n\n    var _dateAndTime$date = dateAndTime.date,\n        year = _dateAndTime$date.year,\n        month = _dateAndTime$date.month,\n        day = _dateAndTime$date.day,\n        _dateAndTime$time = dateAndTime.time,\n        hour = _dateAndTime$time.hour,\n        minute = _dateAndTime$time.minute,\n        second = _dateAndTime$time.second,\n        millisecond = _dateAndTime$time.millisecond; // Doesn't quite matter whether or not UTC is used, since the offset from 1970-01-01 local time is returned.\n\n    return getUTCMs(year, month, day, hour, minute, second, millisecond);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-string-number\n  number: parseFloatingPointNumber,\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-string-number\n  range: parseFloatingPointNumber\n};\nexports.convertStringToDateByType = {\n  date: function date(input) {\n    var parsedInput = exports.convertStringToNumberByType.date(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-number\n  month: function month(input) {\n    var parsedMonthString = parseMonthString(input);\n\n    if (parsedMonthString === null) {\n      return null;\n    }\n\n    var date = new Date(0);\n    date.setUTCFullYear(parsedMonthString.year);\n    date.setUTCMonth(parsedMonthString.month - 1);\n    return date;\n  },\n  week: function week(input) {\n    var parsedInput = exports.convertStringToNumberByType.week(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  time: function time(input) {\n    var parsedInput = exports.convertStringToNumberByType.time(input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  },\n  \"datetime-local\": function datetimeLocal(input) {\n    var parsedInput = exports.convertStringToNumberByType[\"datetime-local\"](input);\n    return parsedInput === null ? null : new Date(parsedInput);\n  }\n};\nexports.serializeDateByType = {\n  date: function date(input) {\n    return serializeDate({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1,\n      day: input.getUTCDate()\n    });\n  },\n  month: function month(input) {\n    return serializeMonth({\n      year: input.getUTCFullYear(),\n      month: input.getUTCMonth() + 1\n    });\n  },\n  week: function week(input) {\n    return serializeWeek(parseDateAsWeek(input));\n  },\n  time: function time(input) {\n    return serializeTime({\n      hour: input.getUTCHours(),\n      minute: input.getUTCMinutes(),\n      second: input.getUTCSeconds(),\n      millisecond: input.getUTCMilliseconds()\n    });\n  },\n  \"datetime-local\": function datetimeLocal(input) {\n    return serializeNormalizedDateAndTime({\n      date: {\n        year: input.getUTCFullYear(),\n        month: input.getUTCMonth() + 1,\n        day: input.getUTCDate()\n      },\n      time: {\n        hour: input.getUTCHours(),\n        minute: input.getUTCMinutes(),\n        second: input.getUTCSeconds(),\n        millisecond: input.getUTCMilliseconds()\n      }\n    });\n  }\n};\nexports.convertNumberToStringByType = {\n  // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):concept-input-value-string-number\n  date: function date(input) {\n    return exports.serializeDateByType.date(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):concept-input-value-string-date\n  month: function month(input) {\n    var year = 1970 + Math.floor(input / 12);\n    var month = input % 12;\n    var date = new Date(0);\n    date.setUTCFullYear(year);\n    date.setUTCMonth(month);\n    return exports.serializeDateByType.month(date);\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):concept-input-value-string-date\n  week: function week(input) {\n    return exports.serializeDateByType.week(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):concept-input-value-string-date\n  time: function time(input) {\n    return exports.serializeDateByType.time(new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):concept-input-value-number-string\n  \"datetime-local\": function datetimeLocal(input) {\n    return exports.serializeDateByType[\"datetime-local\"](new Date(input));\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):concept-input-value-number-string\n  number: function number(input) {\n    return input.toString();\n  },\n  // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):concept-input-value-number-string\n  range: function range(input) {\n    return input.toString();\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
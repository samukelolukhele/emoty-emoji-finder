{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar BlobPropertyBag = require(\"./BlobPropertyBag.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\nvar interfaceName = \"Blob\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'Blob'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"Blob\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor Blob is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\", \"Worker\"]);\n\nexports.install = function (globalObject, globalNames) {\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  var Blob = /*#__PURE__*/function () {\n    function Blob() {\n      _classCallCheck(this, Blob);\n\n      var args = [];\n      {\n        var curArg = arguments[0];\n\n        if (curArg !== undefined) {\n          if (!utils.isObject(curArg)) {\n            throw new TypeError(\"Failed to construct 'Blob': parameter 1\" + \" is not an iterable object.\");\n          } else {\n            var V = [];\n            var tmp = curArg;\n\n            var _iterator = _createForOfIteratorHelper(tmp),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var nextItem = _step.value;\n\n                if (exports.is(nextItem)) {\n                  nextItem = utils.implForWrapper(nextItem);\n                } else if (utils.isArrayBuffer(nextItem)) {} else if (ArrayBuffer.isView(nextItem)) {} else {\n                  nextItem = conversions[\"USVString\"](nextItem, {\n                    context: \"Failed to construct 'Blob': parameter 1\" + \"'s element\"\n                  });\n                }\n\n                V.push(nextItem);\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            curArg = V;\n          }\n        }\n\n        args.push(curArg);\n      }\n      {\n        var _curArg = arguments[1];\n        _curArg = BlobPropertyBag.convert(_curArg, {\n          context: \"Failed to construct 'Blob': parameter 2\"\n        });\n        args.push(_curArg);\n      }\n      return exports.setup(Object.create((this instanceof Blob ? this.constructor : void 0).prototype), globalObject, args);\n    }\n\n    _createClass(Blob, [{\n      key: \"slice\",\n      value: function slice() {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'slice' called on an object that is not a valid instance of Blob.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg !== undefined) {\n            curArg = conversions[\"long long\"](curArg, {\n              context: \"Failed to execute 'slice' on 'Blob': parameter 1\",\n              clamp: true\n            });\n          }\n\n          args.push(curArg);\n        }\n        {\n          var _curArg2 = arguments[1];\n\n          if (_curArg2 !== undefined) {\n            _curArg2 = conversions[\"long long\"](_curArg2, {\n              context: \"Failed to execute 'slice' on 'Blob': parameter 2\",\n              clamp: true\n            });\n          }\n\n          args.push(_curArg2);\n        }\n        {\n          var _curArg3 = arguments[2];\n\n          if (_curArg3 !== undefined) {\n            _curArg3 = conversions[\"DOMString\"](_curArg3, {\n              context: \"Failed to execute 'slice' on 'Blob': parameter 3\"\n            });\n          }\n\n          args.push(_curArg3);\n        }\n        return utils.tryWrapperForImpl((_esValue$implSymbol = esValue[implSymbol]).slice.apply(_esValue$implSymbol, args));\n      }\n    }, {\n      key: \"size\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get size' called on an object that is not a valid instance of Blob.\");\n        }\n\n        return esValue[implSymbol][\"size\"];\n      }\n    }, {\n      key: \"type\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get type' called on an object that is not a valid instance of Blob.\");\n        }\n\n        return esValue[implSymbol][\"type\"];\n      }\n    }]);\n\n    return Blob;\n  }();\n\n  Object.defineProperties(Blob.prototype, _defineProperty({\n    slice: {\n      enumerable: true\n    },\n    size: {\n      enumerable: true\n    },\n    type: {\n      enumerable: true\n    }\n  }, Symbol.toStringTag, {\n    value: \"Blob\",\n    configurable: true\n  }));\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = Blob;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: Blob\n  });\n};\n\nvar Impl = require(\"../file-api/Blob-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
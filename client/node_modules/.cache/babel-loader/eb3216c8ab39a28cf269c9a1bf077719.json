{"ast":null,"code":"\"use strict\";\n\nvar cssom = require(\"cssom\");\n\nvar defaultStyleSheet = require(\"../../browser/default-stylesheet\");\n\nvar _require = require(\"./selectors\"),\n    matchesDontThrow = _require.matchesDontThrow;\n\nvar _Array$prototype = Array.prototype,\n    forEach = _Array$prototype.forEach,\n    indexOf = _Array$prototype.indexOf;\nvar parsedDefaultStyleSheet; // Properties for which getResolvedValue is implemented. This is less than\n// every supported property.\n// https://drafts.csswg.org/indexes/#properties\n\nexports.propertiesWithResolvedValueImplemented = {\n  __proto__: null,\n  // https://drafts.csswg.org/css2/visufx.html#visibility\n  visibility: {\n    inherited: true,\n    initial: \"visible\",\n    computedValue: \"as-specified\"\n  }\n};\n\nexports.forEachMatchingSheetRuleOfElement = function (elementImpl, handleRule) {\n  function handleSheet(sheet) {\n    forEach.call(sheet.cssRules, function (rule) {\n      if (rule.media) {\n        if (indexOf.call(rule.media, \"screen\") !== -1) {\n          forEach.call(rule.cssRules, function (innerRule) {\n            if (matches(innerRule, elementImpl)) {\n              handleRule(innerRule);\n            }\n          });\n        }\n      } else if (matches(rule, elementImpl)) {\n        handleRule(rule);\n      }\n    });\n  }\n\n  if (!parsedDefaultStyleSheet) {\n    parsedDefaultStyleSheet = cssom.parse(defaultStyleSheet);\n  }\n\n  handleSheet(parsedDefaultStyleSheet);\n  forEach.call(elementImpl._ownerDocument.styleSheets._list, handleSheet);\n};\n\nfunction matches(rule, element) {\n  return matchesDontThrow(element, rule.selectorText);\n} // Naive implementation of https://drafts.csswg.org/css-cascade-4/#cascading\n// based on the previous jsdom implementation of getComputedStyle.\n// Does not implement https://drafts.csswg.org/css-cascade-4/#cascade-specificity,\n// or rather specificity is only implemented by the order in which the matching\n// rules appear. The last rule is the most specific while the first rule is\n// the least specific.\n\n\nfunction getCascadedPropertyValue(element, property) {\n  var value = \"\";\n  exports.forEachMatchingSheetRuleOfElement(element, function (rule) {\n    var propertyValue = rule.style.getPropertyValue(property); // getPropertyValue returns \"\" if the property is not found\n\n    if (propertyValue !== \"\") {\n      value = propertyValue;\n    }\n  });\n  var inlineValue = element.style.getPropertyValue(property);\n\n  if (inlineValue !== \"\" && inlineValue !== null) {\n    value = inlineValue;\n  }\n\n  return value;\n} // https://drafts.csswg.org/css-cascade-4/#specified-value\n\n\nfunction getSpecifiedValue(element, property) {\n  var cascade = getCascadedPropertyValue(element, property);\n\n  if (cascade !== \"\") {\n    return cascade;\n  } // Defaulting\n\n\n  var _exports$propertiesWi = exports.propertiesWithResolvedValueImplemented[property],\n      initial = _exports$propertiesWi.initial,\n      inherited = _exports$propertiesWi.inherited;\n\n  if (inherited && element.parentElement !== null) {\n    return getComputedValue(element.parentElement, property);\n  } // root element without parent element or inherited property\n\n\n  return initial;\n} // https://drafts.csswg.org/css-cascade-4/#computed-value\n\n\nfunction getComputedValue(element, property) {\n  var computedValue = exports.propertiesWithResolvedValueImplemented[property].computedValue;\n\n  if (computedValue === \"as-specified\") {\n    return getSpecifiedValue(element, property);\n  }\n\n  throw new TypeError(\"Internal error: unrecognized computed value instruction '\".concat(computedValue, \"'\"));\n} // https://drafts.csswg.org/cssom/#resolved-value\n// Only implements `visibility`\n\n\nexports.getResolvedValue = function (element, property) {\n  // Determined for special case properties, none of which are implemented here.\n  // So we skip to \"any other property: The resolved value is the computed value.\"\n  return getComputedValue(element, property);\n};\n\nexports.SHADOW_DOM_PSEUDO_REGEXP = /^::(?:part|slotted)\\(/i;","map":null,"metadata":{},"sourceType":"script"}
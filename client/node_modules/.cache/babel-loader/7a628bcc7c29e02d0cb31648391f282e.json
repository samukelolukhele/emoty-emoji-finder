{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar reportException = require(\"../helpers/runtime-script-errors\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/node\"),\n    nodeRoot = _require.nodeRoot;\n\nvar _require2 = require(\"../helpers/shadow-dom\"),\n    isNode = _require2.isNode,\n    isShadowRoot = _require2.isShadowRoot,\n    isSlotable = _require2.isSlotable,\n    getEventTargetParent = _require2.getEventTargetParent,\n    isShadowInclusiveAncestor = _require2.isShadowInclusiveAncestor,\n    retarget = _require2.retarget;\n\nvar MouseEvent = require(\"../generated/MouseEvent\");\n\nvar EVENT_PHASE = {\n  NONE: 0,\n  CAPTURING_PHASE: 1,\n  AT_TARGET: 2,\n  BUBBLING_PHASE: 3\n};\n\nvar EventTargetImpl = /*#__PURE__*/function () {\n  function EventTargetImpl(globalObject) {\n    _classCallCheck(this, EventTargetImpl);\n\n    this._globalObject = globalObject;\n    this._eventListeners = Object.create(null);\n  }\n\n  _createClass(EventTargetImpl, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, callback, options) {\n      options = normalizeEventHandlerOptions(options, [\"capture\", \"once\", \"passive\"]);\n\n      if (callback === null) {\n        return;\n      }\n\n      if (!this._eventListeners[type]) {\n        this._eventListeners[type] = [];\n      }\n\n      for (var i = 0; i < this._eventListeners[type].length; ++i) {\n        var listener = this._eventListeners[type][i];\n\n        if (listener.callback.objectReference === callback.objectReference && listener.options.capture === options.capture) {\n          return;\n        }\n      }\n\n      this._eventListeners[type].push({\n        callback: callback,\n        options: options\n      });\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, callback, options) {\n      options = normalizeEventHandlerOptions(options, [\"capture\"]);\n\n      if (callback === null) {\n        // Optimization, not in the spec.\n        return;\n      }\n\n      if (!this._eventListeners[type]) {\n        return;\n      }\n\n      for (var i = 0; i < this._eventListeners[type].length; ++i) {\n        var listener = this._eventListeners[type][i];\n\n        if (listener.callback.objectReference === callback.objectReference && listener.options.capture === options.capture) {\n          this._eventListeners[type].splice(i, 1);\n\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(eventImpl) {\n      if (eventImpl._dispatchFlag || !eventImpl._initializedFlag) {\n        throw DOMException.create(this._globalObject, [\"Tried to dispatch an uninitialized event\", \"InvalidStateError\"]);\n      }\n\n      if (eventImpl.eventPhase !== EVENT_PHASE.NONE) {\n        throw DOMException.create(this._globalObject, [\"Tried to dispatch a dispatching event\", \"InvalidStateError\"]);\n      }\n\n      eventImpl.isTrusted = false;\n      return this._dispatch(eventImpl);\n    } // https://dom.spec.whatwg.org/#get-the-parent\n\n  }, {\n    key: \"_getTheParent\",\n    value: function _getTheParent() {\n      return null;\n    } // https://dom.spec.whatwg.org/#concept-event-dispatch\n    // legacyOutputDidListenersThrowFlag optional parameter is not necessary here since it is only used by indexDB.\n\n  }, {\n    key: \"_dispatch\",\n    value: function _dispatch(eventImpl, targetOverride\n    /* , legacyOutputDidListenersThrowFlag */\n    ) {\n      var targetImpl = this;\n      var clearTargets = false;\n      var activationTarget = null;\n      eventImpl._dispatchFlag = true;\n      targetOverride = targetOverride || targetImpl;\n      var relatedTarget = retarget(eventImpl.relatedTarget, targetImpl);\n\n      if (targetImpl !== relatedTarget || targetImpl === eventImpl.relatedTarget) {\n        var touchTargets = [];\n        appendToEventPath(eventImpl, targetImpl, targetOverride, relatedTarget, touchTargets, false);\n        var isActivationEvent = MouseEvent.isImpl(eventImpl) && eventImpl.type === \"click\";\n\n        if (isActivationEvent && targetImpl._hasActivationBehavior) {\n          activationTarget = targetImpl;\n        }\n\n        var slotInClosedTree = false;\n        var slotable = isSlotable(targetImpl) && targetImpl._assignedSlot ? targetImpl : null;\n        var parent = getEventTargetParent(targetImpl, eventImpl); // Populate event path\n        // https://dom.spec.whatwg.org/#event-path\n\n        while (parent !== null) {\n          if (slotable !== null) {\n            if (parent.localName !== \"slot\") {\n              throw new Error(\"JSDOM Internal Error: Expected parent to be a Slot\");\n            }\n\n            slotable = null;\n            var parentRoot = nodeRoot(parent);\n\n            if (isShadowRoot(parentRoot) && parentRoot.mode === \"closed\") {\n              slotInClosedTree = true;\n            }\n          }\n\n          if (isSlotable(parent) && parent._assignedSlot) {\n            slotable = parent;\n          }\n\n          relatedTarget = retarget(eventImpl.relatedTarget, parent);\n\n          if (isNode(parent) && isShadowInclusiveAncestor(nodeRoot(targetImpl), parent) || idlUtils.wrapperForImpl(parent).constructor.name === \"Window\") {\n            if (isActivationEvent && eventImpl.bubbles && activationTarget === null && parent._hasActivationBehavior) {\n              activationTarget = parent;\n            }\n\n            appendToEventPath(eventImpl, parent, null, relatedTarget, touchTargets, slotInClosedTree);\n          } else if (parent === relatedTarget) {\n            parent = null;\n          } else {\n            targetImpl = parent;\n\n            if (isActivationEvent && activationTarget === null && targetImpl._hasActivationBehavior) {\n              activationTarget = targetImpl;\n            }\n\n            appendToEventPath(eventImpl, parent, targetImpl, relatedTarget, touchTargets, slotInClosedTree);\n          }\n\n          if (parent !== null) {\n            parent = getEventTargetParent(parent, eventImpl);\n          }\n\n          slotInClosedTree = false;\n        }\n\n        var clearTargetsStructIndex = -1;\n\n        for (var i = eventImpl._path.length - 1; i >= 0 && clearTargetsStructIndex === -1; i--) {\n          if (eventImpl._path[i].target !== null) {\n            clearTargetsStructIndex = i;\n          }\n        }\n\n        var clearTargetsStruct = eventImpl._path[clearTargetsStructIndex];\n        clearTargets = isNode(clearTargetsStruct.target) && isShadowRoot(nodeRoot(clearTargetsStruct.target)) || isNode(clearTargetsStruct.relatedTarget) && isShadowRoot(nodeRoot(clearTargetsStruct.relatedTarget));\n\n        if (activationTarget !== null && activationTarget._legacyPreActivationBehavior) {\n          activationTarget._legacyPreActivationBehavior();\n        }\n\n        for (var _i = eventImpl._path.length - 1; _i >= 0; --_i) {\n          var struct = eventImpl._path[_i];\n\n          if (struct.target !== null) {\n            eventImpl.eventPhase = EVENT_PHASE.AT_TARGET;\n          } else {\n            eventImpl.eventPhase = EVENT_PHASE.CAPTURING_PHASE;\n          }\n\n          invokeEventListeners(struct, eventImpl, \"capturing\");\n        }\n\n        for (var _i2 = 0; _i2 < eventImpl._path.length; _i2++) {\n          var _struct = eventImpl._path[_i2];\n\n          if (_struct.target !== null) {\n            eventImpl.eventPhase = EVENT_PHASE.AT_TARGET;\n          } else {\n            if (!eventImpl.bubbles) {\n              continue;\n            }\n\n            eventImpl.eventPhase = EVENT_PHASE.BUBBLING_PHASE;\n          }\n\n          invokeEventListeners(_struct, eventImpl, \"bubbling\");\n        }\n      }\n\n      eventImpl.eventPhase = EVENT_PHASE.NONE;\n      eventImpl.currentTarget = null;\n      eventImpl._path = [];\n      eventImpl._dispatchFlag = false;\n      eventImpl._stopPropagationFlag = false;\n      eventImpl._stopImmediatePropagationFlag = false;\n\n      if (clearTargets) {\n        eventImpl.target = null;\n        eventImpl.relatedTarget = null;\n      }\n\n      if (activationTarget !== null) {\n        if (!eventImpl._canceledFlag) {\n          activationTarget._activationBehavior(eventImpl);\n        } else if (activationTarget._legacyCanceledActivationBehavior) {\n          activationTarget._legacyCanceledActivationBehavior();\n        }\n      }\n\n      return !eventImpl._canceledFlag;\n    }\n  }]);\n\n  return EventTargetImpl;\n}();\n\nmodule.exports = {\n  implementation: EventTargetImpl\n}; // https://dom.spec.whatwg.org/#concept-event-listener-invoke\n\nfunction invokeEventListeners(struct, eventImpl, phase) {\n  var structIndex = eventImpl._path.indexOf(struct);\n\n  for (var i = structIndex; i >= 0; i--) {\n    var t = eventImpl._path[i];\n\n    if (t.target) {\n      eventImpl.target = t.target;\n      break;\n    }\n  }\n\n  eventImpl.relatedTarget = idlUtils.wrapperForImpl(struct.relatedTarget);\n\n  if (eventImpl._stopPropagationFlag) {\n    return;\n  }\n\n  eventImpl.currentTarget = idlUtils.wrapperForImpl(struct.item);\n  var listeners = struct.item._eventListeners;\n  innerInvokeEventListeners(eventImpl, listeners, phase, struct.itemInShadowTree);\n} // https://dom.spec.whatwg.org/#concept-event-listener-inner-invoke\n\n\nfunction innerInvokeEventListeners(eventImpl, listeners, phase, itemInShadowTree) {\n  var found = false;\n  var type = eventImpl.type,\n      target = eventImpl.target;\n  var wrapper = idlUtils.wrapperForImpl(target);\n\n  if (!listeners || !listeners[type]) {\n    return found;\n  } // Copy event listeners before iterating since the list can be modified during the iteration.\n\n\n  var handlers = listeners[type].slice();\n\n  for (var i = 0; i < handlers.length; i++) {\n    var listener = handlers[i];\n    var _listener$options = listener.options,\n        capture = _listener$options.capture,\n        once = _listener$options.once,\n        passive = _listener$options.passive; // Check if the event listener has been removed since the listeners has been cloned.\n\n    if (!listeners[type].includes(listener)) {\n      continue;\n    }\n\n    found = true;\n\n    if (phase === \"capturing\" && !capture || phase === \"bubbling\" && capture) {\n      continue;\n    }\n\n    if (once) {\n      listeners[type].splice(listeners[type].indexOf(listener), 1);\n    }\n\n    var window = null;\n\n    if (wrapper && wrapper._document) {\n      // Triggered by Window\n      window = wrapper;\n    } else if (target._ownerDocument) {\n      // Triggered by most webidl2js'ed instances\n      window = target._ownerDocument._defaultView;\n    } else if (wrapper._ownerDocument) {\n      // Currently triggered by some non-webidl2js things\n      window = wrapper._ownerDocument._defaultView;\n    }\n\n    var currentEvent = void 0;\n\n    if (window) {\n      currentEvent = window._currentEvent;\n\n      if (!itemInShadowTree) {\n        window._currentEvent = eventImpl;\n      }\n    }\n\n    if (passive) {\n      eventImpl._inPassiveListenerFlag = true;\n    }\n\n    try {\n      listener.callback.call(eventImpl.currentTarget, eventImpl);\n    } catch (e) {\n      if (window) {\n        reportException(window, e);\n      } // Errors in window-less documents just get swallowed... can you think of anything better?\n\n    }\n\n    eventImpl._inPassiveListenerFlag = false;\n\n    if (window) {\n      window._currentEvent = currentEvent;\n    }\n\n    if (eventImpl._stopImmediatePropagationFlag) {\n      return found;\n    }\n  }\n\n  return found;\n}\n/**\n * Normalize the event listeners options argument in order to get always a valid options object\n * @param   {Object} options         - user defined options\n * @param   {Array} defaultBoolKeys  - boolean properties that should belong to the options object\n * @returns {Object} object containing at least the \"defaultBoolKeys\"\n */\n\n\nfunction normalizeEventHandlerOptions(options, defaultBoolKeys) {\n  var returnValue = {}; // no need to go further here\n\n  if (typeof options === \"boolean\" || options === null || typeof options === \"undefined\") {\n    returnValue.capture = Boolean(options);\n    return returnValue;\n  } // non objects options so we typecast its value as \"capture\" value\n\n\n  if (typeof options !== \"object\") {\n    returnValue.capture = Boolean(options); // at this point we don't need to loop the \"capture\" key anymore\n\n    defaultBoolKeys = defaultBoolKeys.filter(function (k) {\n      return k !== \"capture\";\n    });\n  }\n\n  var _iterator = _createForOfIteratorHelper(defaultBoolKeys),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var key = _step.value;\n      returnValue[key] = Boolean(options[key]);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return returnValue;\n} // https://dom.spec.whatwg.org/#concept-event-path-append\n\n\nfunction appendToEventPath(eventImpl, target, targetOverride, relatedTarget, touchTargets, slotInClosedTree) {\n  var itemInShadowTree = isNode(target) && isShadowRoot(nodeRoot(target));\n  var rootOfClosedTree = isShadowRoot(target) && target.mode === \"closed\";\n\n  eventImpl._path.push({\n    item: target,\n    itemInShadowTree: itemInShadowTree,\n    target: targetOverride,\n    relatedTarget: relatedTarget,\n    touchTargets: touchTargets,\n    rootOfClosedTree: rootOfClosedTree,\n    slotInClosedTree: slotInClosedTree\n  });\n}","map":null,"metadata":{},"sourceType":"script"}
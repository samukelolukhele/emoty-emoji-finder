{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils.js\");\n\nvar _require = require(\"../attributes\"),\n    setAttributeValue = _require.setAttributeValue,\n    removeAttributeByName = _require.removeAttributeByName;\n\nvar validateName = require(\"../helpers/validate-names\").name;\n\nvar DOMException = require(\"domexception/webidl2js-wrapper\");\n\nvar dataAttrRe = /^data-([^A-Z]*)$/;\n\nfunction attrCamelCase(name) {\n  return name.replace(/-([a-z])/g, function (match, alpha) {\n    return alpha.toUpperCase();\n  });\n}\n\nfunction attrSnakeCase(name) {\n  return name.replace(/[A-Z]/g, function (match) {\n    return \"-\".concat(match.toLowerCase());\n  });\n}\n\nexports.implementation = /*#__PURE__*/function (_idlUtils$supportedPr, _idlUtils$namedGet, _idlUtils$namedSetNew, _idlUtils$namedSetExi, _idlUtils$namedDelete) {\n  function DOMStringMapImpl(globalObject, args, privateData) {\n    _classCallCheck(this, DOMStringMapImpl);\n\n    this._globalObject = globalObject;\n    this._element = privateData.element;\n  }\n\n  _createClass(DOMStringMapImpl, [{\n    key: _idlUtils$supportedPr,\n    get: function get() {\n      var result = new Set();\n      var attributes = this._element.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes.item(i);\n        var matches = dataAttrRe.exec(attr.localName);\n\n        if (matches) {\n          result.add(attrCamelCase(matches[1]));\n        }\n      }\n\n      return result;\n    }\n  }, {\n    key: _idlUtils$namedGet,\n    value: function value(name) {\n      var attributes = this._element.attributes;\n\n      for (var i = 0; i < attributes.length; i++) {\n        var attr = attributes.item(i);\n        var matches = dataAttrRe.exec(attr.localName);\n\n        if (matches && attrCamelCase(matches[1]) === name) {\n          return attr.value;\n        }\n      }\n\n      return undefined;\n    }\n  }, {\n    key: _idlUtils$namedSetNew,\n    value: function value(name, _value) {\n      if (/-[a-z]/.test(name)) {\n        throw DOMException.create(this._globalObject, [\"'\".concat(name, \"' is not a valid property name\"), \"SyntaxError\"]);\n      }\n\n      name = \"data-\".concat(attrSnakeCase(name));\n      validateName(this._globalObject, name);\n      setAttributeValue(this._element, name, _value);\n    }\n  }, {\n    key: _idlUtils$namedSetExi,\n    value: function value(name, _value2) {\n      this[idlUtils.namedSetNew](name, _value2);\n    }\n  }, {\n    key: _idlUtils$namedDelete,\n    value: function value(name) {\n      name = \"data-\".concat(attrSnakeCase(name));\n      removeAttributeByName(this._element, name);\n    }\n  }]);\n\n  return DOMStringMapImpl;\n}(idlUtils.supportedPropertyNames, idlUtils.namedGet, idlUtils.namedSetNew, idlUtils.namedSetExisting, idlUtils.namedDelete);","map":null,"metadata":{},"sourceType":"script"}
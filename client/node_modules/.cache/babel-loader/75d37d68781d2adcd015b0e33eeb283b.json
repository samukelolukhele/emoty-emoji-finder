{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar DOMTokenList = require(\"../generated/DOMTokenList\");\n\nvar HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar _require = require(\"../helpers/stylesheets\"),\n    fetchStylesheet = _require.fetchStylesheet;\n\nvar _require2 = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require2.parseURLToResultingURLRecord;\n\nvar whatwgURL = require(\"whatwg-url\"); // Important reading: \"appropriate times to obtain the resource\" in\n// https://html.spec.whatwg.org/multipage/semantics.html#link-type-stylesheet\n\n\nvar HTMLLinkElementImpl = /*#__PURE__*/function (_HTMLElementImpl) {\n  _inherits(HTMLLinkElementImpl, _HTMLElementImpl);\n\n  var _super = _createSuper(HTMLLinkElementImpl);\n\n  function HTMLLinkElementImpl(globalObject, args, privateData) {\n    var _this;\n\n    _classCallCheck(this, HTMLLinkElementImpl);\n\n    _this = _super.call(this, globalObject, args, privateData);\n    _this.sheet = null;\n    return _this;\n  }\n\n  _createClass(HTMLLinkElementImpl, [{\n    key: \"relList\",\n    get: function get() {\n      if (this._relList === undefined) {\n        this._relList = DOMTokenList.createImpl(this._globalObject, [], {\n          element: this,\n          attributeLocalName: \"rel\",\n          supportedTokens: new Set([\"stylesheet\"])\n        });\n      }\n\n      return this._relList;\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      _get(_getPrototypeOf(HTMLLinkElementImpl.prototype), \"_attach\", this).call(this);\n\n      maybeFetchAndProcess(this);\n    }\n  }, {\n    key: \"_attrModified\",\n    value: function _attrModified(name, value, oldValue) {\n      _get(_getPrototypeOf(HTMLLinkElementImpl.prototype), \"_attrModified\", this).call(this, name, value, oldValue);\n\n      if (name === \"href\") {\n        // TODO crossorigin=\"\" or type=\"\"\n        maybeFetchAndProcess(this);\n      }\n\n      if (name === \"rel\" && this._relList !== undefined) {\n        this._relList.attrModified();\n      }\n    }\n  }, {\n    key: \"_accept\",\n    get: function get() {\n      return \"text/css,*/*;q=0.1\";\n    }\n  }]);\n\n  return HTMLLinkElementImpl;\n}(HTMLElementImpl);\n\nmodule.exports = {\n  implementation: HTMLLinkElementImpl\n}; // https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n\nfunction maybeFetchAndProcess(el) {\n  if (!isExternalResourceLink(el)) {\n    return;\n  } // Browsing-context connected\n\n\n  if (!el.isConnected || !el._ownerDocument._defaultView) {\n    return;\n  }\n\n  fetchAndProcess(el);\n} // https://html.spec.whatwg.org/multipage/semantics.html#default-fetch-and-process-the-linked-resource\n// TODO: refactor into general link-fetching like the spec.\n\n\nfunction fetchAndProcess(el) {\n  var href = el.getAttributeNS(null, \"href\");\n\n  if (href === null || href === \"\") {\n    return;\n  }\n\n  var url = parseURLToResultingURLRecord(href, el._ownerDocument);\n\n  if (url === null) {\n    return;\n  } // TODO handle crossorigin=\"\", nonce, integrity=\"\", referrerpolicy=\"\"\n\n\n  var serialized = whatwgURL.serializeURL(url);\n  fetchStylesheet(el, serialized);\n}\n\nfunction isExternalResourceLink(el) {\n  // for our purposes, only stylesheets can be external resource links\n  var wrapper = idlUtils.wrapperForImpl(el);\n\n  if (!/(?:[ \\t\\n\\r\\f]|^)stylesheet(?:[ \\t\\n\\r\\f]|$)/i.test(wrapper.rel)) {\n    // rel is a space-separated list of tokens, and the original rel types\n    // are case-insensitive.\n    return false;\n  }\n\n  return el.hasAttributeNS(null, \"href\");\n}","map":null,"metadata":{},"sourceType":"script"}
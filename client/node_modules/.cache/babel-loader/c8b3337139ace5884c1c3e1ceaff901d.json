{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar whatwgURL = require(\"whatwg-url\");\n\nvar _require = require(\"../helpers/document-base-url\"),\n    parseURLToResultingURLRecord = _require.parseURLToResultingURLRecord;\n\nvar _require2 = require(\"../helpers/strings\"),\n    asciiCaseInsensitiveMatch = _require2.asciiCaseInsensitiveMatch;\n\nvar _require3 = require(\"../window/navigation\"),\n    navigate = _require3.navigate;\n\nexports.implementation = /*#__PURE__*/function () {\n  function HTMLHyperlinkElementUtilsImpl() {\n    _classCallCheck(this, HTMLHyperlinkElementUtilsImpl);\n  }\n\n  _createClass(HTMLHyperlinkElementUtilsImpl, [{\n    key: \"_htmlHyperlinkElementUtilsSetup\",\n    value: function _htmlHyperlinkElementUtilsSetup() {\n      this.url = null;\n    } // https://html.spec.whatwg.org/multipage/links.html#cannot-navigate\n\n  }, {\n    key: \"_cannotNavigate\",\n    value: function _cannotNavigate() {\n      // TODO: Correctly check if the document is fully active\n      return this._localName !== \"a\" && !this.isConnected;\n    } // https://html.spec.whatwg.org/multipage/semantics.html#get-an-element's-target\n\n  }, {\n    key: \"_getAnElementsTarget\",\n    value: function _getAnElementsTarget() {\n      if (this.hasAttributeNS(null, \"target\")) {\n        return this.getAttributeNS(null, \"target\");\n      }\n\n      var baseEl = this._ownerDocument.querySelector(\"base[target]\");\n\n      if (baseEl) {\n        return baseEl.getAttributeNS(null, \"target\");\n      }\n\n      return \"\";\n    } // https://html.spec.whatwg.org/multipage/browsers.html#the-rules-for-choosing-a-browsing-context-given-a-browsing-context-name\n\n  }, {\n    key: \"_chooseABrowsingContext\",\n    value: function _chooseABrowsingContext(name, current) {\n      var chosen = null;\n\n      if (name === \"\" || asciiCaseInsensitiveMatch(name, \"_self\")) {\n        chosen = current;\n      } else if (asciiCaseInsensitiveMatch(name, \"_parent\")) {\n        chosen = current.parent;\n      } else if (asciiCaseInsensitiveMatch(name, \"_top\")) {\n        chosen = current.top;\n      } else if (!asciiCaseInsensitiveMatch(name, \"_blank\")) {// https://github.com/whatwg/html/issues/1440\n      } // TODO: Create new browsing context, handle noopener\n\n\n      return chosen;\n    } // https://html.spec.whatwg.org/multipage/links.html#following-hyperlinks-2\n\n  }, {\n    key: \"_followAHyperlink\",\n    value: function _followAHyperlink() {\n      if (this._cannotNavigate()) {\n        return;\n      }\n\n      var source = this._ownerDocument._defaultView;\n      var targetAttributeValue = \"\";\n\n      if (this._localName === \"a\" || this._localName === \"area\") {\n        targetAttributeValue = this._getAnElementsTarget();\n      }\n\n      var noopener = this.relList.contains(\"noreferrer\") || this.relList.contains(\"noopener\");\n\n      var target = this._chooseABrowsingContext(targetAttributeValue, source, noopener);\n\n      if (target === null) {\n        return;\n      }\n\n      var url = parseURLToResultingURLRecord(this.href, this._ownerDocument);\n\n      if (url === null) {\n        return;\n      } // TODO: Handle hyperlink suffix and referrerpolicy\n\n\n      setTimeout(function () {\n        navigate(target, url, {});\n      }, 0);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.href;\n    }\n  }, {\n    key: \"href\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        var href = this.getAttributeNS(null, \"href\");\n        return href === null ? \"\" : href;\n      }\n\n      return whatwgURL.serializeURL(url);\n    },\n    set: function set(v) {\n      this.setAttributeNS(null, \"href\", v);\n    }\n  }, {\n    key: \"origin\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeURLOrigin(this.url);\n    }\n  }, {\n    key: \"protocol\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \":\";\n      }\n\n      return this.url.scheme + \":\";\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v + \":\", {\n        url: this.url,\n        stateOverride: \"scheme start\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"username\",\n    get: function get() {\n      reinitializeURL(this);\n\n      if (this.url === null) {\n        return \"\";\n      }\n\n      return this.url.username;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.setTheUsername(url, v);\n      updateHref(this);\n    }\n  }, {\n    key: \"password\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return \"\";\n      }\n\n      return url.password;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      whatwgURL.setThePassword(url, v);\n      updateHref(this);\n    }\n  }, {\n    key: \"host\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null) {\n        return \"\";\n      }\n\n      if (url.port === null) {\n        return whatwgURL.serializeHost(url.host);\n      }\n\n      return whatwgURL.serializeHost(url.host) + \":\" + whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"host\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"hostname\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeHost(url.host);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"hostname\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"port\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.port === null) {\n        return \"\";\n      }\n\n      return whatwgURL.serializeInteger(url.port);\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.host === null || url.host === \"\" || url.cannotBeABaseURL || url.scheme === \"file\") {\n        return;\n      }\n\n      if (v === \"\") {\n        url.port = null;\n      } else {\n        whatwgURL.basicURLParse(v, {\n          url: url,\n          stateOverride: \"port\"\n        });\n      }\n\n      updateHref(this);\n    }\n  }, {\n    key: \"pathname\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return \"\";\n      }\n\n      if (url.cannotBeABaseURL) {\n        return url.path[0];\n      }\n\n      return \"/\" + url.path.join(\"/\");\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.cannotBeABaseURL) {\n        return;\n      }\n\n      url.path = [];\n      whatwgURL.basicURLParse(v, {\n        url: url,\n        stateOverride: \"path start\"\n      });\n      updateHref(this);\n    }\n  }, {\n    key: \"search\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.query === null || url.query === \"\") {\n        return \"\";\n      }\n\n      return \"?\" + url.query;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return;\n      }\n\n      if (v === \"\") {\n        url.query = null;\n      } else {\n        var input = v[0] === \"?\" ? v.substring(1) : v;\n        url.query = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: url,\n          stateOverride: \"query\",\n          encodingOverride: this._ownerDocument.charset\n        });\n      }\n\n      updateHref(this);\n    }\n  }, {\n    key: \"hash\",\n    get: function get() {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null || url.fragment === null || url.fragment === \"\") {\n        return \"\";\n      }\n\n      return \"#\" + url.fragment;\n    },\n    set: function set(v) {\n      reinitializeURL(this);\n      var url = this.url;\n\n      if (url === null) {\n        return;\n      }\n\n      if (v === \"\") {\n        url.fragment = null;\n      } else {\n        var input = v[0] === \"#\" ? v.substring(1) : v;\n        url.fragment = \"\";\n        whatwgURL.basicURLParse(input, {\n          url: url,\n          stateOverride: \"fragment\"\n        });\n      }\n\n      updateHref(this);\n    }\n  }]);\n\n  return HTMLHyperlinkElementUtilsImpl;\n}();\n\nfunction reinitializeURL(hheu) {\n  if (hheu.url !== null && hheu.url.scheme === \"blob\" && hheu.url.cannotBeABaseURL) {\n    return;\n  }\n\n  setTheURL(hheu);\n}\n\nfunction setTheURL(hheu) {\n  var href = hheu.getAttributeNS(null, \"href\");\n\n  if (href === null) {\n    hheu.url = null;\n    return;\n  }\n\n  var parsed = parseURLToResultingURLRecord(href, hheu._ownerDocument);\n  hheu.url = parsed === null ? null : parsed;\n}\n\nfunction updateHref(hheu) {\n  hheu.setAttributeNS(null, \"href\", whatwgURL.serializeURL(hheu.url));\n}","map":null,"metadata":{},"sourceType":"script"}
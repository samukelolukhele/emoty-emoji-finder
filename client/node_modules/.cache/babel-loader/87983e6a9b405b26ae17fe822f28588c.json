{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _inherits = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/client/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar conversions = require(\"webidl-conversions\");\n\nvar utils = require(\"./utils.js\");\n\nvar Document = require(\"./Document.js\");\n\nvar Blob = require(\"./Blob.js\");\n\nvar FormData = require(\"./FormData.js\");\n\nvar EventHandlerNonNull = require(\"./EventHandlerNonNull.js\");\n\nvar XMLHttpRequestResponseType = require(\"./XMLHttpRequestResponseType.js\");\n\nvar implSymbol = utils.implSymbol;\nvar ctorRegistrySymbol = utils.ctorRegistrySymbol;\n\nvar XMLHttpRequestEventTarget = require(\"./XMLHttpRequestEventTarget.js\");\n\nvar interfaceName = \"XMLHttpRequest\";\n\nexports.is = function (value) {\n  return utils.isObject(value) && utils.hasOwn(value, implSymbol) && value[implSymbol] instanceof Impl.implementation;\n};\n\nexports.isImpl = function (value) {\n  return utils.isObject(value) && value instanceof Impl.implementation;\n};\n\nexports.convert = function (value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$context = _ref.context,\n      context = _ref$context === void 0 ? \"The provided value\" : _ref$context;\n\n  if (exports.is(value)) {\n    return utils.implForWrapper(value);\n  }\n\n  throw new TypeError(\"\".concat(context, \" is not of type 'XMLHttpRequest'.\"));\n};\n\nfunction makeWrapper(globalObject) {\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    throw new Error(\"Internal error: invalid global object\");\n  }\n\n  var ctor = globalObject[ctorRegistrySymbol][\"XMLHttpRequest\"];\n\n  if (ctor === undefined) {\n    throw new Error(\"Internal error: constructor XMLHttpRequest is not installed on the passed global object\");\n  }\n\n  return Object.create(ctor.prototype);\n}\n\nexports.create = function (globalObject, constructorArgs, privateData) {\n  var wrapper = makeWrapper(globalObject);\n  return exports.setup(wrapper, globalObject, constructorArgs, privateData);\n};\n\nexports.createImpl = function (globalObject, constructorArgs, privateData) {\n  var wrapper = exports.create(globalObject, constructorArgs, privateData);\n  return utils.implForWrapper(wrapper);\n};\n\nexports._internalSetup = function (wrapper, globalObject) {\n  XMLHttpRequestEventTarget._internalSetup(wrapper, globalObject);\n};\n\nexports.setup = function (wrapper, globalObject) {\n  var constructorArgs = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var privateData = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  privateData.wrapper = wrapper;\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: new Impl.implementation(globalObject, constructorArgs, privateData),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper;\n};\n\nexports.new = function (globalObject) {\n  var wrapper = makeWrapper(globalObject);\n\n  exports._internalSetup(wrapper, globalObject);\n\n  Object.defineProperty(wrapper, implSymbol, {\n    value: Object.create(Impl.implementation.prototype),\n    configurable: true\n  });\n  wrapper[implSymbol][utils.wrapperSymbol] = wrapper;\n\n  if (Impl.init) {\n    Impl.init(wrapper[implSymbol]);\n  }\n\n  return wrapper[implSymbol];\n};\n\nvar exposed = new Set([\"Window\", \"DedicatedWorker\", \"SharedWorker\"]);\n\nexports.install = function (globalObject, globalNames) {\n  var _Object$definePropert;\n\n  if (!globalNames.some(function (globalName) {\n    return exposed.has(globalName);\n  })) {\n    return;\n  }\n\n  if (globalObject.XMLHttpRequestEventTarget === undefined) {\n    throw new Error(\"Internal error: attempting to evaluate XMLHttpRequest before XMLHttpRequestEventTarget\");\n  }\n\n  var XMLHttpRequest = /*#__PURE__*/function (_globalObject$XMLHttp) {\n    _inherits(XMLHttpRequest, _globalObject$XMLHttp);\n\n    var _super = _createSuper(XMLHttpRequest);\n\n    function XMLHttpRequest() {\n      var _this;\n\n      _classCallCheck(this, XMLHttpRequest);\n\n      return _possibleConstructorReturn(_this, exports.setup(Object.create((this instanceof XMLHttpRequest ? this.constructor : void 0).prototype), globalObject, undefined));\n    }\n\n    _createClass(XMLHttpRequest, [{\n      key: \"open\",\n      value: function open(method, url) {\n        var _esValue$implSymbol;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'open' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'open' on 'XMLHttpRequest': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n\n        switch (arguments.length) {\n          case 2:\n            {\n              var curArg = arguments[0];\n              curArg = conversions[\"ByteString\"](curArg, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 1\"\n              });\n              args.push(curArg);\n            }\n            {\n              var _curArg = arguments[1];\n              _curArg = conversions[\"USVString\"](_curArg, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 2\"\n              });\n              args.push(_curArg);\n            }\n            break;\n\n          case 3:\n            {\n              var _curArg2 = arguments[0];\n              _curArg2 = conversions[\"ByteString\"](_curArg2, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 1\"\n              });\n              args.push(_curArg2);\n            }\n            {\n              var _curArg3 = arguments[1];\n              _curArg3 = conversions[\"USVString\"](_curArg3, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 2\"\n              });\n              args.push(_curArg3);\n            }\n            {\n              var _curArg4 = arguments[2];\n              _curArg4 = conversions[\"boolean\"](_curArg4, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 3\"\n              });\n              args.push(_curArg4);\n            }\n            break;\n\n          case 4:\n            {\n              var _curArg5 = arguments[0];\n              _curArg5 = conversions[\"ByteString\"](_curArg5, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 1\"\n              });\n              args.push(_curArg5);\n            }\n            {\n              var _curArg6 = arguments[1];\n              _curArg6 = conversions[\"USVString\"](_curArg6, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 2\"\n              });\n              args.push(_curArg6);\n            }\n            {\n              var _curArg7 = arguments[2];\n              _curArg7 = conversions[\"boolean\"](_curArg7, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 3\"\n              });\n              args.push(_curArg7);\n            }\n            {\n              var _curArg8 = arguments[3];\n\n              if (_curArg8 !== undefined) {\n                if (_curArg8 === null || _curArg8 === undefined) {\n                  _curArg8 = null;\n                } else {\n                  _curArg8 = conversions[\"USVString\"](_curArg8, {\n                    context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 4\"\n                  });\n                }\n              } else {\n                _curArg8 = null;\n              }\n\n              args.push(_curArg8);\n            }\n            break;\n\n          default:\n            {\n              var _curArg9 = arguments[0];\n              _curArg9 = conversions[\"ByteString\"](_curArg9, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 1\"\n              });\n              args.push(_curArg9);\n            }\n            {\n              var _curArg10 = arguments[1];\n              _curArg10 = conversions[\"USVString\"](_curArg10, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 2\"\n              });\n              args.push(_curArg10);\n            }\n            {\n              var _curArg11 = arguments[2];\n              _curArg11 = conversions[\"boolean\"](_curArg11, {\n                context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 3\"\n              });\n              args.push(_curArg11);\n            }\n            {\n              var _curArg12 = arguments[3];\n\n              if (_curArg12 !== undefined) {\n                if (_curArg12 === null || _curArg12 === undefined) {\n                  _curArg12 = null;\n                } else {\n                  _curArg12 = conversions[\"USVString\"](_curArg12, {\n                    context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 4\"\n                  });\n                }\n              } else {\n                _curArg12 = null;\n              }\n\n              args.push(_curArg12);\n            }\n            {\n              var _curArg13 = arguments[4];\n\n              if (_curArg13 !== undefined) {\n                if (_curArg13 === null || _curArg13 === undefined) {\n                  _curArg13 = null;\n                } else {\n                  _curArg13 = conversions[\"USVString\"](_curArg13, {\n                    context: \"Failed to execute 'open' on 'XMLHttpRequest': parameter 5\"\n                  });\n                }\n              } else {\n                _curArg13 = null;\n              }\n\n              args.push(_curArg13);\n            }\n        }\n\n        return (_esValue$implSymbol = esValue[implSymbol]).open.apply(_esValue$implSymbol, args);\n      }\n    }, {\n      key: \"setRequestHeader\",\n      value: function setRequestHeader(name, value) {\n        var _esValue$implSymbol2;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'setRequestHeader' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        if (arguments.length < 2) {\n          throw new TypeError(\"Failed to execute 'setRequestHeader' on 'XMLHttpRequest': 2 arguments required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'setRequestHeader' on 'XMLHttpRequest': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        {\n          var _curArg14 = arguments[1];\n          _curArg14 = conversions[\"ByteString\"](_curArg14, {\n            context: \"Failed to execute 'setRequestHeader' on 'XMLHttpRequest': parameter 2\"\n          });\n          args.push(_curArg14);\n        }\n        return (_esValue$implSymbol2 = esValue[implSymbol]).setRequestHeader.apply(_esValue$implSymbol2, args);\n      }\n    }, {\n      key: \"send\",\n      value: function send() {\n        var _esValue$implSymbol3;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'send' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n\n          if (curArg !== undefined) {\n            if (curArg === null || curArg === undefined) {\n              curArg = null;\n            } else {\n              if (Document.is(curArg) || Blob.is(curArg) || FormData.is(curArg)) {\n                curArg = utils.implForWrapper(curArg);\n              } else if (utils.isArrayBuffer(curArg)) {} else if (ArrayBuffer.isView(curArg)) {} else {\n                curArg = conversions[\"USVString\"](curArg, {\n                  context: \"Failed to execute 'send' on 'XMLHttpRequest': parameter 1\"\n                });\n              }\n            }\n          } else {\n            curArg = null;\n          }\n\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol3 = esValue[implSymbol]).send.apply(_esValue$implSymbol3, args);\n      }\n    }, {\n      key: \"abort\",\n      value: function abort() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'abort' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol].abort();\n      }\n    }, {\n      key: \"getResponseHeader\",\n      value: function getResponseHeader(name) {\n        var _esValue$implSymbol4;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getResponseHeader' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'getResponseHeader' on 'XMLHttpRequest': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"ByteString\"](curArg, {\n            context: \"Failed to execute 'getResponseHeader' on 'XMLHttpRequest': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol4 = esValue[implSymbol]).getResponseHeader.apply(_esValue$implSymbol4, args);\n      }\n    }, {\n      key: \"getAllResponseHeaders\",\n      value: function getAllResponseHeaders() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'getAllResponseHeaders' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol].getAllResponseHeaders();\n      }\n    }, {\n      key: \"overrideMimeType\",\n      value: function overrideMimeType(mime) {\n        var _esValue$implSymbol5;\n\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'overrideMimeType' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        if (arguments.length < 1) {\n          throw new TypeError(\"Failed to execute 'overrideMimeType' on 'XMLHttpRequest': 1 argument required, but only \" + arguments.length + \" present.\");\n        }\n\n        var args = [];\n        {\n          var curArg = arguments[0];\n          curArg = conversions[\"DOMString\"](curArg, {\n            context: \"Failed to execute 'overrideMimeType' on 'XMLHttpRequest': parameter 1\"\n          });\n          args.push(curArg);\n        }\n        return (_esValue$implSymbol5 = esValue[implSymbol]).overrideMimeType.apply(_esValue$implSymbol5, args);\n      }\n    }, {\n      key: \"onreadystatechange\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get onreadystatechange' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"onreadystatechange\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set onreadystatechange' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        if (!utils.isObject(V)) {\n          V = null;\n        } else {\n          V = EventHandlerNonNull.convert(V, {\n            context: \"Failed to set the 'onreadystatechange' property on 'XMLHttpRequest': The provided value\"\n          });\n        }\n\n        esValue[implSymbol][\"onreadystatechange\"] = V;\n      }\n    }, {\n      key: \"readyState\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get readyState' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"readyState\"];\n      }\n    }, {\n      key: \"timeout\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get timeout' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"timeout\"];\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set timeout' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        V = conversions[\"unsigned long\"](V, {\n          context: \"Failed to set the 'timeout' property on 'XMLHttpRequest': The provided value\"\n        });\n        esValue[implSymbol][\"timeout\"] = V;\n      }\n    }, {\n      key: \"withCredentials\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get withCredentials' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"withCredentials\"];\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set withCredentials' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        V = conversions[\"boolean\"](V, {\n          context: \"Failed to set the 'withCredentials' property on 'XMLHttpRequest': The provided value\"\n        });\n        esValue[implSymbol][\"withCredentials\"] = V;\n      }\n    }, {\n      key: \"upload\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get upload' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return utils.getSameObject(this, \"upload\", function () {\n          return utils.tryWrapperForImpl(esValue[implSymbol][\"upload\"]);\n        });\n      }\n    }, {\n      key: \"responseURL\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get responseURL' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"responseURL\"];\n      }\n    }, {\n      key: \"status\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get status' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"status\"];\n      }\n    }, {\n      key: \"statusText\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get statusText' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"statusText\"];\n      }\n    }, {\n      key: \"responseType\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get responseType' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"responseType\"]);\n      },\n      set: function set(V) {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'set responseType' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        V = \"\".concat(V);\n\n        if (!XMLHttpRequestResponseType.enumerationValues.has(V)) {\n          return;\n        }\n\n        esValue[implSymbol][\"responseType\"] = V;\n      }\n    }, {\n      key: \"response\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get response' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"response\"];\n      }\n    }, {\n      key: \"responseText\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get responseText' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return esValue[implSymbol][\"responseText\"];\n      }\n    }, {\n      key: \"responseXML\",\n      get: function get() {\n        var esValue = this !== null && this !== undefined ? this : globalObject;\n\n        if (!exports.is(esValue)) {\n          throw new TypeError(\"'get responseXML' called on an object that is not a valid instance of XMLHttpRequest.\");\n        }\n\n        return utils.tryWrapperForImpl(esValue[implSymbol][\"responseXML\"]);\n      }\n    }]);\n\n    return XMLHttpRequest;\n  }(globalObject.XMLHttpRequestEventTarget);\n\n  Object.defineProperties(XMLHttpRequest.prototype, (_Object$definePropert = {\n    open: {\n      enumerable: true\n    },\n    setRequestHeader: {\n      enumerable: true\n    },\n    send: {\n      enumerable: true\n    },\n    abort: {\n      enumerable: true\n    },\n    getResponseHeader: {\n      enumerable: true\n    },\n    getAllResponseHeaders: {\n      enumerable: true\n    },\n    overrideMimeType: {\n      enumerable: true\n    },\n    onreadystatechange: {\n      enumerable: true\n    },\n    readyState: {\n      enumerable: true\n    },\n    timeout: {\n      enumerable: true\n    },\n    withCredentials: {\n      enumerable: true\n    },\n    upload: {\n      enumerable: true\n    },\n    responseURL: {\n      enumerable: true\n    },\n    status: {\n      enumerable: true\n    },\n    statusText: {\n      enumerable: true\n    },\n    responseType: {\n      enumerable: true\n    },\n    response: {\n      enumerable: true\n    },\n    responseText: {\n      enumerable: true\n    },\n    responseXML: {\n      enumerable: true\n    }\n  }, _defineProperty(_Object$definePropert, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    configurable: true\n  }), _defineProperty(_Object$definePropert, \"UNSENT\", {\n    value: 0,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"OPENED\", {\n    value: 1,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"HEADERS_RECEIVED\", {\n    value: 2,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"LOADING\", {\n    value: 3,\n    enumerable: true\n  }), _defineProperty(_Object$definePropert, \"DONE\", {\n    value: 4,\n    enumerable: true\n  }), _Object$definePropert));\n  Object.defineProperties(XMLHttpRequest, {\n    UNSENT: {\n      value: 0,\n      enumerable: true\n    },\n    OPENED: {\n      value: 1,\n      enumerable: true\n    },\n    HEADERS_RECEIVED: {\n      value: 2,\n      enumerable: true\n    },\n    LOADING: {\n      value: 3,\n      enumerable: true\n    },\n    DONE: {\n      value: 4,\n      enumerable: true\n    }\n  });\n\n  if (globalObject[ctorRegistrySymbol] === undefined) {\n    globalObject[ctorRegistrySymbol] = Object.create(null);\n  }\n\n  globalObject[ctorRegistrySymbol][interfaceName] = XMLHttpRequest;\n  Object.defineProperty(globalObject, interfaceName, {\n    configurable: true,\n    writable: true,\n    value: XMLHttpRequest\n  });\n};\n\nvar Impl = require(\"../xhr/XMLHttpRequest-impl.js\");","map":null,"metadata":{},"sourceType":"script"}
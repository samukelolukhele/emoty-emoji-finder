{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _classCallCheck = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/samukelolukhele/Desktop/Documents/Udemy Work & Notes/Web Development - App Brewery/ReactJS/React Emojipedia Project/node_modules/@babel/runtime/helpers/createClass\");\n\nvar idlUtils = require(\"../generated/utils\");\n\nvar NodeList = require(\"../generated/NodeList\");\n\nvar HTMLCollection = require(\"../generated/HTMLCollection\");\n\nvar _require = require(\"../helpers/selectors\"),\n    addNwsapi = _require.addNwsapi;\n\nvar _require2 = require(\"../helpers/internal-constants\"),\n    domSymbolTree = _require2.domSymbolTree;\n\nvar NODE_TYPE = require(\"../node-type\");\n\nvar _require3 = require(\"../node\"),\n    convertNodesIntoNode = _require3.convertNodesIntoNode;\n\nvar ParentNodeImpl = /*#__PURE__*/function () {\n  function ParentNodeImpl() {\n    _classCallCheck(this, ParentNodeImpl);\n  }\n\n  _createClass(ParentNodeImpl, [{\n    key: \"children\",\n    get: function get() {\n      var _this = this;\n\n      if (!this._childrenList) {\n        this._childrenList = HTMLCollection.createImpl(this._globalObject, [], {\n          element: this,\n          query: function query() {\n            return domSymbolTree.childrenToArray(_this, {\n              filter: function filter(node) {\n                return node.nodeType === NODE_TYPE.ELEMENT_NODE;\n              }\n            });\n          }\n        });\n      } else {\n        this._childrenList._update();\n      }\n\n      return this._childrenList;\n    }\n  }, {\n    key: \"firstElementChild\",\n    get: function get() {\n      var _iterator = _createForOfIteratorHelper(domSymbolTree.childrenIterator(this)),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var child = _step.value;\n\n          if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n            return child;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"lastElementChild\",\n    get: function get() {\n      var _iterator2 = _createForOfIteratorHelper(domSymbolTree.childrenIterator(this, {\n        reverse: true\n      })),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var child = _step2.value;\n\n          if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n            return child;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return null;\n    }\n  }, {\n    key: \"childElementCount\",\n    get: function get() {\n      return this.children.length;\n    }\n  }, {\n    key: \"prepend\",\n    value: function prepend() {\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      this._preInsert(convertNodesIntoNode(this._ownerDocument, nodes), this.firstChild);\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n\n      this._append(convertNodesIntoNode(this._ownerDocument, nodes));\n    }\n  }, {\n    key: \"replaceChildren\",\n    value: function replaceChildren() {\n      for (var _len3 = arguments.length, nodes = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        nodes[_key3] = arguments[_key3];\n      }\n\n      var node = convertNodesIntoNode(this._ownerDocument, nodes);\n\n      this._preInsertValidity(node, null);\n\n      this._replaceAll(node);\n    }\n  }, {\n    key: \"querySelector\",\n    value: function querySelector(selectors) {\n      if (shouldAlwaysSelectNothing(this)) {\n        return null;\n      }\n\n      var matcher = addNwsapi(this);\n      return idlUtils.implForWrapper(matcher.first(selectors, idlUtils.wrapperForImpl(this)));\n    } // Warning for internal users: this returns a NodeList containing IDL wrappers instead of impls\n\n  }, {\n    key: \"querySelectorAll\",\n    value: function querySelectorAll(selectors) {\n      if (shouldAlwaysSelectNothing(this)) {\n        return NodeList.create(this._globalObject, [], {\n          nodes: []\n        });\n      }\n\n      var matcher = addNwsapi(this);\n      var list = matcher.select(selectors, idlUtils.wrapperForImpl(this));\n      return NodeList.create(this._globalObject, [], {\n        nodes: list.map(function (n) {\n          return idlUtils.tryImplForWrapper(n);\n        })\n      });\n    }\n  }]);\n\n  return ParentNodeImpl;\n}();\n\nfunction shouldAlwaysSelectNothing(elImpl) {\n  // This is true during initialization.\n  return elImpl === elImpl._ownerDocument && !elImpl.documentElement;\n}\n\nmodule.exports = {\n  implementation: ParentNodeImpl\n};","map":null,"metadata":{},"sourceType":"script"}